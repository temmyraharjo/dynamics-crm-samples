using System;
using Microsoft.Xrm.Sdk;

namespace Insurgo.Custom.Entities
{
    [System.Runtime.Serialization.DataContractAttribute]
    public abstract class EntityBase : Entity
    {
        protected EntityBase(string entityName) : base(entityName)
        {
        }

        public DateTime? CreatedOn = null;
        public DateTime? ModifiedOn = null;
        public int? VersionNumber = null;

        public EntityReference CreatedBy = null;
        public EntityReference CreatedOnBehalfBy = null;
        public int? ImportSequenceNumber = null;
        public EntityReference ModifiedBy = null;
        public EntityReference ModifiedOnBehalfBy = null;
        public DateTime? OverriddenCreatedOn = null;
        public OptionSetValue statecode = null;
        public OptionSetValue statuscode = null;
        public int? TimeZoneRuleVersionNumber = null;
        public int? UTCConversionTimeZoneCode = null;
    }

    [System.Runtime.Serialization.DataContractAttribute]
    public abstract class UserOrTeamEntity : EntityBase
    {
        protected UserOrTeamEntity(string entityName) : base(entityName)
        {
        }

        public EntityReference OwningBusinessUnit = null;
        public EntityReference OwningTeam = null;
        public EntityReference OwningUser = null;
        public EntityReference OwnerId = null;
    }

    [System.Runtime.Serialization.DataContractAttribute]
    public abstract class OrganizationEntity : EntityBase
    {
        protected OrganizationEntity(string entityName) : base(entityName)
        {
        }
    }

    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("account")]
    public class Account : Entity
    {
        public const string EntityLogicalName = "account";
        public Account() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("accountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["accountid"] = value;
            }
        }

        public readonly string EMailAddress3 = null;

        public readonly string EMailAddress2 = null;

        public readonly string EMailAddress1 = null;

        public readonly string Address1_City = null;

        public readonly EntityReference SLAId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Money Aging90 = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly string WebSiteURL = null;

        public readonly double? Address1_Longitude = null;

        public readonly bool? DoNotPostalMail = null;

        public readonly OptionSetValue Address1_AddressTypeCode = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? SharesOutstanding = null;

        public readonly bool? DoNotSendMM = null;

        public readonly EntityReference CreatedByExternalParty = null;

        public readonly bool? CreditOnHold = null;

        public readonly Money Aging30 = null;

        public readonly bool? DoNotBulkPostalMail = null;

        public readonly string YomiName = null;

        public readonly OptionSetValue Address1_ShippingMethodCode = null;

        public readonly OptionSetValue PaymentTermsCode = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly OptionSetValue AccountCategoryCode = null;

        public readonly string Address2_StateOrProvince = null;

        public readonly string Address2_Country = null;

        public readonly string Address2_Line2 = null;

        public readonly Money Aging60_Base = null;

        public readonly string Address1_Line3 = null;

        public readonly int? OnHoldTime = null;

        public readonly OptionSetValue Address1_FreightTermsCode = null;

        public readonly Money CreditLimit = null;

        public readonly OptionSetValue AccountRatingCode = null;

        public readonly int? Address1_UTCOffset = null;

        public readonly OptionSetValue PreferredAppointmentTimeCode = null;

        public readonly int? NumberOfEmployees = null;

        public readonly OptionSetValue AccountClassificationCode = null;

        public readonly Money Revenue = null;

        public readonly OptionSetValue CustomerTypeCode = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string Address2_County = null;

        public readonly bool? IsPrivate = null;

        public readonly EntityReference PrimaryContactId = null;

        public readonly string Telephone3 = null;

        public readonly EntityReference ParentAccountId = null;

        public readonly string Address2_City = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly double? Address2_Latitude = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? DoNotBulkEMail = null;

        public readonly bool? DoNotFax = null;

        public readonly Money MarketCap = null;

        public readonly string Address1_Composite = null;

        public readonly OptionSetValue OwnershipCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string Address2_PostalCode = null;

        public readonly DateTime? LastUsedInCampaign = null;

        public readonly Guid? ProcessId = null;

        public readonly string Address2_Line3 = null;

        public readonly string Description = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string Address1_County = null;

        public readonly OptionSetValue PreferredContactMethodCode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Address1_Line1 = null;

        public readonly bool? DoNotEMail = null;

        public readonly OptionSetValue TerritoryCode = null;

        public readonly string Address2_PostOfficeBox = null;

        public readonly string Address2_Telephone1 = null;

        public readonly string Address2_Telephone2 = null;

        public readonly string Address2_Telephone3 = null;

        public readonly Guid? Address1_AddressId = null;

        public readonly string TraversedPath = null;

        public readonly string Address1_Telephone2 = null;

        public readonly EntityReference OwningUser = null;

        public readonly OptionSetValue IndustryCode = null;

        public readonly string Address2_Name = null;

        public readonly string PrimarySatoriId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Money Aging60 = null;

        public readonly string TimeSpentByMeOnEmailAndMeetings = null;

        public readonly OptionSetValue BusinessTypeCode = null;

        public readonly string PrimaryTwitterId = null;

        public readonly byte[] EntityImage = null;

        public readonly string Address2_Composite = null;

        public readonly OptionSetValue ShippingMethodCode = null;

        public readonly string Address1_Country = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string Address1_StateOrProvince = null;

        public readonly bool? MarketingOnly = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Address2_Line1 = null;

        public readonly string Address1_Telephone1 = null;

        public readonly string Address1_Telephone3 = null;

        public readonly string Address1_PostOfficeBox = null;

        public readonly bool? FollowEmail = null;

        public readonly string Fax = null;

        public readonly EntityReference MasterId = null;

        public readonly string SIC = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? Address2_UTCOffset = null;

        public readonly Guid? StageId = null;

        public readonly string AccountNumber = null;

        public readonly Money CreditLimit_Base = null;

        public readonly string Address2_Fax = null;

        public readonly Money Revenue_Base = null;

        public readonly bool? Merged = null;

        public readonly double? Address2_Longitude = null;

        public readonly EntityReference ModifiedByExternalParty = null;

        public readonly string FtpSiteURL = null;

        public readonly Money Aging90_Base = null;

        public readonly bool? DoNotPhone = null;

        public readonly string Address1_PrimaryContactName = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly string Address1_Line2 = null;

        public readonly EntityReference CreatedBy = null;

        public readonly OptionSetValue Address2_AddressTypeCode = null;

        public readonly string Address2_UPSZone = null;

        public readonly Money MarketCap_Base = null;

        public readonly string Address1_PostalCode = null;

        public readonly string TickerSymbol = null;

        public readonly OptionSetValue CustomerSizeCode = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly bool? ParticipatesInWorkflow = null;

        public readonly string StockExchange = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string Telephone2 = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference PreferredSystemUserId = null;

        public readonly Guid? AccountId = null;

        public readonly string Telephone1 = null;

        public readonly Money Aging30_Base = null;

        public readonly string Address1_Name = null;

        public readonly string Address1_Fax = null;

        public readonly double? Address1_Latitude = null;

        public readonly OptionSetValue Address2_ShippingMethodCode = null;

        public readonly OptionSetValue PreferredAppointmentDayCode = null;

        public readonly OptionSetValue Address2_FreightTermsCode = null;

        public readonly string Address1_UPSZone = null;

        public readonly Guid? Address2_AddressId = null;

        public readonly string Address2_PrimaryContactName = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum Address1_AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }
            public enum Address1_ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum AccountCategoryCode
            {
                PreferredCustomer = 1,
                Standard = 2
            }
            public enum Address1_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum AccountRatingCode
            {
                DefaultValue = 1
            }
            public enum PreferredAppointmentTimeCode
            {
                Morning = 1,
                Afternoon = 2,
                Evening = 3
            }
            public enum AccountClassificationCode
            {
                DefaultValue = 1
            }
            public enum CustomerTypeCode
            {
                Competitor = 1,
                Consultant = 2,
                Customer = 3,
                Investor = 4,
                Partner = 5,
                Influencer = 6,
                Press = 7,
                Prospect = 8,
                Reseller = 9,
                Supplier = 10,
                Vendor = 11,
                Other = 12
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum OwnershipCode
            {
                Public = 1,
                Private = 2,
                Subsidiary = 3,
                Other = 4
            }
            public enum PreferredContactMethodCode
            {
                Any = 1,
                Email = 2,
                Phone = 3,
                Fax = 4,
                Mail = 5
            }
            public enum TerritoryCode
            {
                DefaultValue = 1
            }
            public enum IndustryCode
            {
                Accounting = 1,
                AgricultureAndNonPetrolNaturalResourceExtraction = 2,
                BroadcastingPrintingAndPublishing = 3,
                Brokers = 4,
                BuildingSupplyRetail = 5,
                BusinessServices = 6,
                Consulting = 7,
                ConsumerServices = 8,
                DesignDirectionAndCreativeManagement = 9,
                DistributorsDispatchersAndProcessors = 10,
                DoctorSOfficesAndClinics = 11,
                DurableManufacturing = 12,
                EatingAndDrinkingPlaces = 13,
                EntertainmentRetail = 14,
                EquipmentRentalAndLeasing = 15,
                Financial = 16,
                FoodAndTobaccoProcessing = 17,
                InboundCapitalIntensiveProcessing = 18,
                InboundRepairAndServices = 19,
                Insurance = 20,
                LegalServices = 21,
                NonDurableMerchandiseRetail = 22,
                OutboundConsumerService = 23,
                PetrochemicalExtractionAndDistribution = 24,
                ServiceRetail = 25,
                SIGAffiliations = 26,
                SocialServices = 27,
                SpecialOutboundTradeContractors = 28,
                SpecialtyRealty = 29,
                Transportation = 30,
                UtilityCreationAndDistribution = 31,
                VehicleRetail = 32,
                Wholesale = 33
            }
            public enum BusinessTypeCode
            {
                DefaultValue = 1
            }
            public enum ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum CustomerSizeCode
            {
                DefaultValue = 1
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum PreferredAppointmentDayCode
            {
                Sunday = 0,
                Monday = 1,
                Tuesday = 2,
                Wednesday = 3,
                Thursday = 4,
                Friday = 5,
                Saturday = 6
            }
            public enum Address2_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("aciviewmapper")]
    public class ACIViewMapper : Entity
    {
        public const string EntityLogicalName = "aciviewmapper";
        public ACIViewMapper() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("aciviewmapperid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["aciviewmapperid"] = value;
            }
        }

        public readonly string WebApplicationEndPoint = null;

        public readonly Guid? ACIViewMapperId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string ViewName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("actioncard")]
    public class ActionCard : Entity
    {
        public const string EntityLogicalName = "actioncard";
        public ActionCard() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncardid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncardid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly string Description = null;

        public readonly string ParentRegardingObjectIdData = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference CardTypeId = null;

        public readonly string Data = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly Guid? ActionCardId = null;

        public readonly bool? Visibility = null;

        public readonly int? CardType = null;

        public readonly EntityReference RecordId = null;

        public readonly DateTime? StartDate = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ParentRegardingObjectId = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? ExpiryDate = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? RecordIdObjectTypeCode2 = null;

        public readonly int? Priority = null;

        public readonly OptionSetValue State = null;

        public readonly string ReferenceTokens = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly OptionSetValue Source = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum State
            {
                Active = 0,
                Dismissed = 1,
                Completed = 2
            }
            public enum Source
            {
                CRM = 1,
                Exchange = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("actioncardusersettings")]
    public class ActionCardUserSettings : Entity
    {
        public const string EntityLogicalName = "actioncardusersettings";
        public ActionCardUserSettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncardusersettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncardusersettingsid"] = value;
            }
        }

        public readonly EntityReference CardTypeId = null;

        public readonly bool? BoolCardOption = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly int? VersionNumber = null;

        public readonly bool? IsEnabled = null;

        public readonly int? IntCardOption = null;

        public readonly string StringCardOption = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly Guid? ActionCardUserSettingsId = null;

        public readonly int? CardType = null;

        public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("actioncarduserstate")]
    public class ActionCardUserState : Entity
    {
        public const string EntityLogicalName = "actioncarduserstate";
        public ActionCardUserState() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncarduserstateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncarduserstateid"] = value;
            }
        }

        public readonly EntityReference ActionCardId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly DateTime? StartDate = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue State = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OwnerId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Guid? ActionCardUserStateId = null;

        public new static class Options
        {
            public enum State
            {
                Active = 0,
                Dismissed = 1,
                Completed = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("activityfileattachment")]
    public class activityfileattachment : UserOrTeamEntity
    {
        public const string EntityLogicalName = "activityfileattachment";
        public activityfileattachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityfileattachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityfileattachmentid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string filename = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? activityfileattachmentId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference ParentId = null;

        public readonly string ObjectTypeCode = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ObjectTypeCode
            {
                Post = 8000,
                PostComment = 8005
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("activitymimeattachment")]
    public class ActivityMimeAttachment : Entity
    {
        public const string EntityLogicalName = "activitymimeattachment";
        public ActivityMimeAttachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activitymimeattachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activitymimeattachmentid"] = value;
            }
        }

        public readonly string ActivitySubject = null;

        public readonly EntityReference OwningUser = null;

        public readonly int? AttachmentNumber = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string AnonymousLink = null;

        public readonly Guid? ActivityMimeAttachmentId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FileName = null;

        public readonly int? FileSize = null;

        public readonly EntityReference AttachmentId = null;

        public readonly string Subject = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference ObjectId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly string MimeType = null;

        public readonly Guid? ActivityMimeAttachmentIdUnique = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly bool? IsFollowed = null;

        public readonly Guid? SolutionId = null;

        public readonly string ObjectTypeCode = null;

        public readonly string AttachmentContentId = null;

        public readonly string Body = null;

        public readonly EntityReference ActivityId = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ObjectTypeCode
            {
                EmailTemplate = 2010,
                EmailActivity = 4200
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("activityparty")]
    public class ActivityParty : Entity
    {
        public const string EntityLogicalName = "activityparty";
        public ActivityParty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activitypartyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activitypartyid"] = value;
            }
        }

        public readonly Guid? OwningUser = null;

        public readonly string ExchangeEntryId = null;

        public readonly string AddressUsed = null;

        public readonly bool? DoNotPostalMail = null;

        public readonly EntityReference PartyId = null;

        public readonly OptionSetValue ParticipationTypeMask = null;

        public readonly bool? DoNotFax = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly OptionSetValue InstanceTypeCode = null;

        public readonly bool? DoNotEmail = null;

        public readonly int? AddressUsedEmailColumnNumber = null;

        public readonly bool? DoNotPhone = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly double? Effort = null;

        public readonly Guid? ActivityPartyId = null;

        public readonly bool? IsPartyDeleted = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly EntityReference ActivityId = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ParticipationTypeMask
            {
                Sender = 1,
                ToRecipient = 2,
                CCRecipient = 3,
                BCCRecipient = 4,
                RequiredAttendee = 5,
                OptionalAttendee = 6,
                Organizer = 7,
                Regarding = 8,
                Owner = 9,
                Resource = 10,
                Customer = 11
            }
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("activitypointer")]
    public class ActivityPointer : Entity
    {
        public const string EntityLogicalName = "activitypointer";
        public ActivityPointer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string TraversedPath = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly Guid? ActivityId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? DeliveryLastAttemptedOn = null;

        public readonly EntityReference OwnerId = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string ExchangeItemId = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly bool? IsBilled = null;

        public readonly decimal? ExchangeRate = null;

        public readonly EntityReference OwningTeam = null;

        public readonly OptionSetValue DeliveryPriorityCode = null;

        public readonly EntityReference SenderMailboxId = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly OptionSetValue StateCode = null;

        public readonly Guid? SeriesId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwningUser = null;

        public readonly OptionSetValue Community = null;

        public readonly string ActivityAdditionalParams = null;

        public readonly DateTime? ActualStart = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly string ActivityTypeCode = null;

        public readonly EntityReference SLAId = null;

        public readonly EntityCollection allparties = null;

        public readonly OptionSetValue InstanceTypeCode = null;

        public readonly DateTime? PostponeActivityProcessingUntil = null;

        public readonly int? OnHoldTime = null;

        public readonly Guid? ProcessId = null;

        public readonly DateTime? SortDate = null;

        public readonly string Description = null;

        public readonly bool? IsMapiPrivate = null;

        public readonly DateTime? SentOn = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly Guid? StageId = null;

        public readonly string ExchangeWebLink = null;

        public readonly bool? LeftVoiceMail = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly bool? IsRegularActivity = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? ActualDurationMinutes = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3,
                Scheduled = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("advancedsimilarityrule")]
    public class AdvancedSimilarityRule : Entity
    {
        public const string EntityLogicalName = "advancedsimilarityrule";
        public AdvancedSimilarityRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("advancedsimilarityruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["advancedsimilarityruleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string Description = null;

        public readonly int? MaxNumberKeyphrases = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly int? NgramSize = null;

        public readonly string FetchXmlList = null;

        public readonly string FilterResultByStatusDisplayName = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string ExactMatchList = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string Entity = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? AdvancedSimilarityRuleId = null;

        public readonly Guid? AdvancedSimilarityRuleIdUnique = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? IsAzureMLRequired = null;

        public readonly string SourceEntity = null;

        public readonly EntityReference AzureServiceConnectionId = null;

        public readonly OptionSetValue FilterResultByStatus = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum SourceEntity
            {
                Case = 112
            }
            public enum FilterResultByStatus
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("annotation")]
    public class Annotation : Entity
    {
        public const string EntityLogicalName = "annotation";
        public Annotation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("annotationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["annotationid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? IsPrivate = null;

        public readonly string Prefix = null;

        public readonly string FilePointer = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string FileName = null;

        public readonly int? FileSize = null;

        public readonly int? ImportSequenceNumber = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly string DummyRegarding = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference ObjectId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string MimeType = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string StoragePointer = null;

        public readonly string StepId = null;

        public readonly string DocumentBody = null;

        public readonly string NoteText = null;

        public readonly string DummyFileName = null;

        public readonly string ObjectTypeCode = null;

        public readonly string LangId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? IsDocument = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly Guid? AnnotationId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                Account = 1,
                Appointment = 4201,
                BulkImport = 4407,
                Calendar = 4003,
                Campaign = 4400,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                Case = 112,
                CaseResolution = 4206,
                Commitment = 4215,
                Competitor = 123,
                Contact = 2,
                Contract = 1010,
                ContractLine = 1011,
                Email = 4202,
                FacilityEquipment = 4000,
                Fax = 4204,
                Invoice = 1090,
                Lead = 4,
                Letter = 4207,
                MarketingList = 4300,
                Opportunity = 3,
                OpportunityClose = 4208,
                Order = 1088,
                OrderClose = 4209,
                PhoneCall = 4210,
                Product = 1024,
                Quote = 1084,
                QuoteClose = 4211,
                ResourceSpecification = 4006,
                Service = 4001,
                ServiceActivity = 4214,
                Task = 4212,
                RoutingRule = 8181,
                RoutingRuleItem = 8199
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("annualfiscalcalendar")]
    public class AnnualFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "annualfiscalcalendar";
        public AnnualFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? FiscalPeriodType = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly DateTime? EffectiveOn = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? UserFiscalCalendarId = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("annual")]
        public readonly Money Period1 = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("annual_base")]
        public readonly Money Period1_Base = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference SalesPersonId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appconfig")]
    public class AppConfig : Entity
    {
        public const string EntityLogicalName = "appconfig";
        public AppConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appconfigid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly Guid? AppConfigId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string AppConfigImportXml = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference AppModuleId = null;

        public readonly Guid? AppConfigIdUnique = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appconfiginstance")]
    public class AppConfigInstance : Entity
    {
        public const string EntityLogicalName = "appconfiginstance";
        public AppConfigInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appconfiginstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appconfiginstanceid"] = value;
            }
        }

        public readonly EntityReference AppConfigMasterId = null;

        public readonly string IntroducedVersion = null;

        public readonly EntityReference AppConfigId = null;

        public readonly string ComponentType = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? AppConfigInstanceIdUnique = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string Value = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? ObjectId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? AppConfigIdUnique = null;

        public readonly Guid? AppConfigInstanceId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appconfigmaster")]
    public class AppConfigMaster : Entity
    {
        public const string EntityLogicalName = "appconfigmaster";
        public AppConfigMaster() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appconfigmasterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appconfigmasterid"] = value;
            }
        }

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string DefaultValue = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Guid? AppConfigMasterId = null;

        public readonly int? VersionNumber = null;

        public readonly string ConfigType = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? IsNavigationSetting = null;

        public readonly string ParentAppConfigMasterId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly string Validator = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appelement")]
    public class AppElement : OrganizationEntity
    {
        public const string EntityLogicalName = "appelement";
        public AppElement() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appelementid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appelementid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference CanvasAppId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string PublishConfiguration = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? AppElementId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string UniqueName = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ParentAppModuleId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("applicationfile")]
    public class ApplicationFile : Entity
    {
        public const string EntityLogicalName = "applicationfile";
        public ApplicationFile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fileid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? FileId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Body = null;

        public readonly string Name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("applicationuser")]
    public class ApplicationUser : Entity
    {
        public const string EntityLogicalName = "applicationuser";
        public ApplicationUser() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("applicationuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["applicationuserid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly bool? CanImpersonateAsSystemUser = null;

        public readonly Guid? ApplicationId = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? VersionNumber = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string ApplicationName = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly OptionSetValue ApplicationType = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue statuscode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? ApplicationUserId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ApplicationType
            {
                FirstPartyApplications = 0,
                PlatformApplications = 1,
                ExternalApplications = 2
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("applicationuserprofile")]
    public class applicationuserprofile : Entity
    {
        public const string EntityLogicalName = "applicationuserprofile";
        public applicationuserprofile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("applicationuserprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["applicationuserprofileid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? fieldsecurityprofileid = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? applicationuserid = null;

        public readonly Guid? applicationuserprofileId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("applicationuserrole")]
    public class applicationuserrole : Entity
    {
        public const string EntityLogicalName = "applicationuserrole";
        public applicationuserrole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("applicationuserroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["applicationuserroleid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? roleid = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? applicationuserid = null;

        public readonly Guid? applicationuserroleId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodule")]
    public class AppModule : Entity
    {
        public const string EntityLogicalName = "appmodule";
        public AppModule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmoduleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmoduleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly int? ClientType = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly int? FormFactor = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? AppModuleIdUnique = null;

        public readonly string URL = null;

        public readonly Guid? WelcomePageId = null;

        public readonly string AppModuleVersion = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string OptimizedFor = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string EventHandlers = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string Descriptor = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference PublisherId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? PublishedOn = null;

        public readonly string AppModuleXmlManaged = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string UniqueName = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue NavigationType = null;

        public readonly OptionSetValue statuscode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? AppModuleId = null;

        public readonly Guid? WebResourceId = null;

        public readonly string Description = null;

        public readonly string ConfigXML = null;

        public readonly bool? IsFeatured = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum NavigationType
            {
                SingleSession = 0,
                MultiSession = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2,
                Deleted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodulecomponent")]
    public class AppModuleComponent : Entity
    {
        public const string EntityLogicalName = "appmodulecomponent";
        public AppModuleComponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulecomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulecomponentid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? AppModuleComponentId = null;

        public readonly OptionSetValue ComponentType = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference AppModuleIdUnique = null;

        public readonly Guid? RootAppModuleComponentId = null;

        public readonly Guid? ObjectId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? AppModuleComponentIdUnique = null;

        public readonly bool? IsMetadata = null;

        public readonly OptionSetValue RootComponentBehavior = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ComponentType
            {
                Entities = 1,
                Views = 26,
                BusinessProcessFlows = 29,
                CommandRibbonForFormsGridsSubGrids = 48,
                Charts = 59,
                Forms = 60,
                Sitemap = 62
            }
            public enum RootComponentBehavior
            {
                IncludeSubcomponents = 0,
                DoNotIncludeSubcomponents = 1,
                IncludeAsShellOnly = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodulecomponentedge")]
    public class AppModuleComponentEdge : OrganizationEntity
    {
        public const string EntityLogicalName = "appmodulecomponentedge";
        public AppModuleComponentEdge() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulecomponentedgeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulecomponentedgeid"] = value;
            }
        }

        public readonly EntityReference ComponentNodeFrom = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? AppModuleComponentEdgeId = null;

        public readonly EntityReference ComponentNodeTo = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodulecomponentnode")]
    public class AppModuleComponentNode : OrganizationEntity
    {
        public const string EntityLogicalName = "appmodulecomponentnode";
        public AppModuleComponentNode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulecomponentnodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulecomponentnodeid"] = value;
            }
        }

        public readonly string ValidationResult = null;

        public readonly OptionSetValue ValidationStatus = null;

        public readonly int? ComponentType = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string ComponentObjectId = null;

        public readonly string ComponentDatabaseVersion = null;

        public readonly Guid? AppModuleComponentNodeId = null;

        public readonly int? SnapshotVersionNumber = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum ValidationStatus
            {
                Success = 1,
                Failure = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodulemetadata")]
    public class AppModuleMetadata : Entity
    {
        public const string EntityLogicalName = "appmodulemetadata";
        public AppModuleMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulemetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulemetadataid"] = value;
            }
        }

        public readonly bool? ComponentIsTabletEnabled = null;

        public readonly bool? ComponentIsQuickFindQuery = null;

        public readonly bool? ComponentIsUserView = null;

        public readonly Guid? AppModuleMetadataId = null;

        public readonly Guid? ParentComponentId = null;

        public readonly int? ComponentSubType = null;

        public readonly bool? ComponentIsUserChart = null;

        public readonly int? ComponentVersion = null;

        public readonly int? ComponentStateCode = null;

        public readonly int? State = null;

        public readonly Guid? AppModuleId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? ComponentIsDefault = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? ComponentType = null;

        public readonly Guid? ComponentId = null;

        public readonly bool? ComponentIsUserForm = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodulemetadatadependency")]
    public class AppModuleMetadataDependency : Entity
    {
        public const string EntityLogicalName = "appmodulemetadatadependency";
        public AppModuleMetadataDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulemetadatadependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulemetadatadependencyid"] = value;
            }
        }

        public readonly Guid? DependentComponentId = null;

        public readonly int? RequiredComponentVersion = null;

        public readonly int? RequiredComponentType = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? RequiredComponentId = null;

        public readonly int? State = null;

        public readonly int? RequiredComponentSubType = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string RequiredComponentInternalId = null;

        public readonly Guid? AppModuleMetadataDependencyId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodulemetadataoperationlog")]
    public class AppModuleMetadataOperationLog : Entity
    {
        public const string EntityLogicalName = "appmodulemetadataoperationlog";
        public AppModuleMetadataOperationLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulemetadataoperationlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulemetadataoperationlogid"] = value;
            }
        }

        public readonly Guid? AppModuleMetadataOperationLogId = null;

        public readonly int? RetryCount = null;

        public readonly Guid? AppModuleId = null;

        public readonly int? State = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? StartedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmoduleroles")]
    public class AppModuleRoles : Entity
    {
        public const string EntityLogicalName = "appmoduleroles";
        public AppModuleRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmoduleroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmoduleroleid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? AppModuleRoleId = null;

        public readonly string IntroducedVersion = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference RoleId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference AppModuleId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? AppModuleRoleIdUnique = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appnotification")]
    public class appnotification : UserOrTeamEntity
    {
        public const string EntityLogicalName = "appnotification";
        public appnotification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appnotificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appnotificationid"] = value;
            }
        }

        public readonly OptionSetValue IconType = null;

        public readonly string Data = null;

        public readonly OptionSetValue ToastType = null;

        public readonly Guid? appnotificationId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly OptionSetValue Priority = null;

        public readonly EntityReference AppModuleId = null;

        public readonly string Body = null;

        public readonly DateTime? ExpiresOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum IconType
            {
                Info = 100000000,
                Success = 100000001,
                Failure = 100000002,
                Warning = 100000003,
                Mention = 100000004,
                Custom = 100000005
            }
            public enum ToastType
            {
                Timed = 200000000,
                Hidden = 200000001
            }
            public enum Priority
            {
                Normal = 200000000,
                High = 200000001
            }
            public enum statuscode
            {
                Unread = 1,
                Read = 2,
                Inactive = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appointment")]
    public class Appointment : Entity
    {
        public const string EntityLogicalName = "appointment";
        public Appointment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly bool? IsBilled = null;

        public readonly OptionSetValue InstanceTypeCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly DateTime? OriginalStartDate = null;

        public readonly int? AttachmentCount = null;

        public readonly OptionSetValue AttachmentErrors = null;

        public readonly EntityCollection Organizer = null;

        public readonly Guid? ActivityId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? OnHoldTime = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly DateTime? ActualStart = null;

        public readonly Guid? SubscriptionId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string Subcategory = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string ActivityAdditionalParams = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly OptionSetValue StateCode = null;

        public readonly Guid? SeriesId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly int? VersionNumber = null;

        public readonly int? ActualDurationMinutes = null;

        public readonly string TraversedPath = null;

        public readonly string ActivityTypeCode = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference SLAId = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly int? IsUnsafe = null;

        public readonly Guid? ProcessId = null;

        public readonly string Description = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? IsDraft = null;

        public readonly string Location = null;

        public readonly string GlobalObjectId = null;

        public readonly DateTime? SortDate = null;

        public readonly bool? IsMapiPrivate = null;

        public readonly EntityCollection requiredattendees = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly Guid? StageId = null;

        public readonly EntityCollection OptionalAttendees = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly bool? IsAllDayEvent = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly bool? IsRegularActivity = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly string ModifiedFieldsMask = null;

        public readonly int? OutlookOwnerApptId = null;

        public readonly string Category = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum AttachmentErrors
            {
                None = 0,
                TheAppointmentWasSavedAsAMicrosoftDynamics365AppointmentRecordButNotAllTheAttachmentsCouldBeSavedWithItAnAttachmentCannotBeSavedIfItIsBlockedOrIfItsFileTypeIsInvalid = 1
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum StatusCode
            {
                Free = 1,
                Tentative = 2,
                Completed = 3,
                Canceled = 4,
                Busy = 5,
                OutOfOffice = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appsetting")]
    public class AppSetting : OrganizationEntity
    {
        public const string EntityLogicalName = "appsetting";
        public AppSetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appsettingid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string Description = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string DisplayName = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly string Value = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? AppSettingId = null;

        public readonly EntityReference SettingDefinitionId = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference ParentAppModuleId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string UniqueName = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appusersetting")]
    public class AppUserSetting : OrganizationEntity
    {
        public const string EntityLogicalName = "appusersetting";
        public AppUserSetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appusersettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appusersettingid"] = value;
            }
        }

        public readonly EntityReference SettingDefinitionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string DisplayName = null;

        public readonly EntityReference UserId = null;

        public readonly string Value = null;

        public readonly EntityReference ParentAppModuleId = null;

        public readonly Guid? AppUserSettingId = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("asyncoperation")]
    public class AsyncOperation : Entity
    {
        public const string EntityLogicalName = "asyncoperation";
        public AsyncOperation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("asyncoperationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["asyncoperationid"] = value;
            }
        }

        public readonly Guid? ParentPluginExecutionId = null;

        public readonly double? ExecutionTimeSpan = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Data = null;

        public readonly string MessageName = null;

        public readonly DateTime? StartedOn = null;

        public readonly Guid? AsyncOperationId = null;

        public readonly int? Depth = null;

        public readonly string PrimaryEntityType = null;

        public readonly int? ErrorCode = null;

        public readonly Guid? RequestId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? CompletedOn = null;

        public readonly bool? WorkflowIsBlocked = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string WorkflowState = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly OptionSetValue StateCode = null;

        public readonly bool? RetainJobHistory = null;

        public readonly string WorkflowStageName = null;

        public readonly Guid? BreadcrumbId = null;

        public readonly string HostId = null;

        public readonly DateTime? ExpanderStartTime = null;

        public readonly EntityReference OwningExtensionId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string Workload = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly string Message = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string DependencyToken = null;

        public readonly EntityReference WorkflowActivationId = null;

        public readonly int? Sequence = null;

        public readonly string FriendlyMessage = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? Subtype = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? RecurrenceStartTime = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string CallerOrigin = null;

        public readonly bool? IsWaitingForEvent = null;

        public readonly string RecurrencePattern = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue OperationType = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly string RootExecutionContext = null;

        public readonly int? RetryCount = null;

        public readonly DateTime? PostponeUntil = null;

        public readonly Guid? CorrelationId = null;

        public readonly DateTime? CorrelationUpdatedTime = null;

        public new static class Options
        {
            public enum PrimaryEntityType
            {

            }
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }
            public enum OperationType
            {
                SystemEvent = 1,
                BulkEmail = 2,
                ImportFileParse = 3,
                TransformParseData = 4,
                Import = 5,
                ActivityPropagation = 6,
                DuplicateDetectionRulePublish = 7,
                BulkDuplicateDetection = 8,
                SQMDataCollection = 9,
                Workflow = 10,
                QuickCampaign = 11,
                MatchcodeUpdate = 12,
                BulkDelete = 13,
                DeletionService = 14,
                IndexManagement = 15,
                CollectOrganizationStatistics = 16,
                ImportSubprocess = 17,
                CalculateOrganizationStorageSize = 18,
                CollectOrganizationDatabaseStatistics = 19,
                CollectionOrganizationSizeStatistics = 20,
                DatabaseTuning = 21,
                CalculateOrganizationMaximumStorageSize = 22,
                BulkDeleteSubprocess = 23,
                UpdateStatisticIntervals = 24,
                OrganizationFullTextCatalogIndex = 25,
                DatabaseLogBackup = 26,
                UpdateContractStates = 27,
                DBCCSHRINKDATABASEMaintenanceJob = 28,
                DBCCSHRINKFILEMaintenanceJob = 29,
                ReindexAllIndicesMaintenanceJob = 30,
                StorageLimitNotification = 31,
                CleanupInactiveWorkflowAssemblies = 32,
                RecurringSeriesExpansion = 35,
                ImportSampleData = 38,
                GoalRollUp = 40,
                AuditPartitionCreation = 41,
                CheckForLanguagePackUpdates = 42,
                ProvisionLanguagePack = 43,
                UpdateOrganizationDatabase = 44,
                UpdateSolution = 45,
                RegenerateEntityRowCountSnapshotData = 46,
                RegenerateReadShareSnapshotData = 47,
                OutgoingActivity = 50,
                IncomingEmailProcessing = 51,
                MailboxTestAccess = 52,
                EncryptionHealthCheck = 53,
                ExecuteAsyncRequest = 54,
                PostToYammer = 49,
                UpdateEntitlementStates = 56,
                CalculateRollupField = 57,
                MassCalculateRollupField = 58,
                ImportTranslation = 59,
                ConvertDateAndTimeBehavior = 62,
                EntityKeyIndexCreation = 63,
                UpdateKnowledgeArticleStates = 65,
                ResourceBookingSync = 68,
                RelationshipAssistantCards = 69,
                CleanupSolutionComponents = 71,
                AppModuleMetadataOperation = 72,
                ALMAnomalyDetectionOperation = 73,
                FlowNotification = 75,
                RibbonClientMetadataOperation = 76,
                CallbackRegistrationExpanderOperation = 79,
                CascadeAssign = 90,
                CascadeDelete = 91,
                EventExpanderOperation = 92,
                ImportSolutionMetadata = 93,
                BulkDeleteFileAttachment = 94,
                RefreshBusinessUnitForRecordsOwnedByPrincipal = 95,
                RevokeInheritedAccess = 96,
                ProvisionLanguageForUser = 201,
                CreateOrRefreshVirtualEntity = 98,
                ExportSolutionAsyncOperation = 202,
                ImportSolutionAsyncOperation = 203,
                RefreshRuntimeIntegrationComponentsAsyncOperation = 250,
                CascadeFlowSessionPermissionsAsyncOperation = 100,
                CascadeGrantOrRevokeAccessVersionTrackingAsyncOperation = 12801,
                AIBuilderTrainingEvents = 190690091,
                AIBuilderPredictionEvents = 190690092
            }
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("attachment")]
    public class Attachment : Entity
    {
        public const string EntityLogicalName = "attachment";
        public Attachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("attachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["attachmentid"] = value;
            }
        }

        public readonly string Prefix = null;

        public readonly int? FileSize = null;

        public readonly int? VersionNumber = null;

        public readonly string Subject = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FileName = null;

        public readonly Guid? AttachmentId = null;

        public readonly string Body = null;

        public readonly string StoragePointer = null;

        public readonly string MimeType = null;

        public readonly string FilePointer = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("attribute")]
    public class Attribute : Entity
    {
        public const string EntityLogicalName = "attribute";
        public Attribute() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("attributeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["attributeid"] = value;
            }
        }

        public readonly string LogicalName = null;

        public readonly string ManagedPropertyLogicalName = null;

        public readonly OptionSetValue ComponentState = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? SolutionId = null;

        public readonly string PhysicalName = null;

        public readonly string TableColumnName = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? AttributeId = null;

        public readonly string ExternalName = null;

        public readonly string ManagedPropertyParentAttributeName = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("attributeimageconfig")]
    public class AttributeImageConfig : Entity
    {
        public const string EntityLogicalName = "attributeimageconfig";
        public AttributeImageConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("attributeimageconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["attributeimageconfigid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? SolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string AttributeLogicalName = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? AttributeImageConfigId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string ParentEntityLogicalName = null;

        public readonly bool? CanStoreFullImage = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("attributemap")]
    public class AttributeMap : Entity
    {
        public const string EntityLogicalName = "attributemap";
        public AttributeMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("attributemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["attributemapid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? AttributeMapId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string TargetAttributeName = null;

        public readonly Guid? AttributeMapIdUnique = null;

        public readonly bool? IsSystem = null;

        public readonly EntityReference ParentAttributeMapId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string SourceAttributeName = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference EntityMapId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("audit")]
    public class Audit : Entity
    {
        public const string EntityLogicalName = "audit";
        public Audit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("auditid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["auditid"] = value;
            }
        }

        public readonly string AttributeMask = null;

        public readonly OptionSetValue Operation = null;

        public readonly Guid? TransactionId = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly string UserAdditionalInfo = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference UserId = null;

        public readonly EntityReference ObjectId = null;

        public readonly Guid? AuditId = null;

        public readonly OptionSetValue Action = null;

        public readonly string ChangeData = null;

        public readonly EntityReference CallingUserId = null;

        public new static class Options
        {
            public enum Operation
            {
                Create = 1,
                Update = 2,
                Delete = 3,
                Access = 4
            }
            public enum Action
            {
                Unknown = 0,
                Create = 1,
                Update = 2,
                Delete = 3,
                Activate = 4,
                Deactivate = 5,
                Cascade = 11,
                Merge = 12,
                Assign = 13,
                Share = 14,
                Retrieve = 15,
                Close = 16,
                Cancel = 17,
                Complete = 18,
                Resolve = 20,
                Reopen = 21,
                Fulfill = 22,
                Paid = 23,
                Qualify = 24,
                Disqualify = 25,
                Submit = 26,
                Reject = 27,
                Approve = 28,
                Invoice = 29,
                Hold = 30,
                AddMember = 31,
                RemoveMember = 32,
                AssociateEntities = 33,
                DisassociateEntities = 34,
                AddMembers = 35,
                RemoveMembers = 36,
                AddItem = 37,
                RemoveItem = 38,
                AddSubstitute = 39,
                RemoveSubstitute = 40,
                SetState = 41,
                Renew = 42,
                Revise = 43,
                Win = 44,
                Lose = 45,
                InternalProcessing = 46,
                Reschedule = 47,
                ModifyShare = 48,
                Unshare = 49,
                Book = 50,
                GenerateQuoteFromOpportunity = 51,
                AddToQueue = 52,
                AssignRoleToTeam = 53,
                RemoveRoleFromTeam = 54,
                AssignRoleToUser = 55,
                RemoveRoleFromUser = 56,
                AddPrivilegesToRole = 57,
                RemovePrivilegesFromRole = 58,
                ReplacePrivilegesInRole = 59,
                ImportMappings = 60,
                Clone = 61,
                SendDirectEmail = 62,
                EnabledForOrganization = 63,
                UserAccessViaWeb = 64,
                UserAccessViaWebServices = 65,
                DeleteEntity = 100,
                DeleteAttribute = 101,
                AuditChangeAtEntityLevel = 102,
                AuditChangeAtAttributeLevel = 103,
                AuditChangeAtOrgLevel = 104,
                EntityAuditStarted = 105,
                AttributeAuditStarted = 106,
                AuditEnabled = 107,
                EntityAuditStopped = 108,
                AttributeAuditStopped = 109,
                AuditDisabled = 110,
                AuditLogDeletion = 111,
                UserAccessAuditStarted = 112,
                UserAccessAuditStopped = 113
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("authorizationserver")]
    public class AuthorizationServer : Entity
    {
        public const string EntityLogicalName = "authorizationserver";
        public AuthorizationServer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("authorizationserverid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["authorizationserverid"] = value;
            }
        }

        public readonly Guid? TenantId = null;

        public readonly DateTime? MetadataRefreshedOn = null;

        public readonly Guid? AuthorizationServerId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue AuthorizationServerType = null;

        public readonly EntityReference OrganizationId = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string Realm = null;

        public readonly string Metadata = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string MetadataUrl = null;

        public readonly string PrincipalId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum AuthorizationServerType
            {
                AccessControlService = 0,
                EvolvedSTS = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("azureserviceconnection")]
    public class AzureServiceConnection : Entity
    {
        public const string EntityLogicalName = "azureserviceconnection";
        public AzureServiceConnection() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("azureserviceconnectionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["azureserviceconnectionid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly DateTime? LastConnectionTime = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string AccountKey = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ConnectionType = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly OptionSetValue LastConnectionStatusCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly string ServiceUri = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? AzureServiceConnectionId = null;

        public readonly string Description = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ConnectionType
            {
                Recommendation = 1,
                TextAnalytics = 2
            }
            public enum LastConnectionStatusCode
            {
                Success = 1,
                Failure = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bot")]
    public class bot : UserOrTeamEntity
    {
        public const string EntityLogicalName = "bot";
        public bot() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("botid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["botid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly OptionSetValue authenticationmode = null;

        public readonly EntityReference publishedby = null;

        public readonly string authorizedsecuritygroupids = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly string Configuration = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? botId = null;

        public readonly string SchemaName = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? publishedon = null;

        public readonly OptionSetValue Language = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string iconbase64 = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly string applicationmanifestinformation = null;

        public readonly OptionSetValue accesscontrolpolicy = null;

        public readonly OptionSetValue authenticationtrigger = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum authenticationmode
            {
                Unspecified = 0,
                None = 1,
                Integrated = 2,
                CustomAzureActiveDirectory = 3,
                GenericOAuth2 = 4
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum Language
            {
                English = 1033,
                Spanish = 1034,
                PortugueseBrazilian = 1046,
                French = 1036,
                Dutch = 1043,
                Norwegian = 1044,
                Danish = 1030,
                Swedish = 1053,
                Italian = 1040,
                German = 1031,
                ChineseSimplified = 2052,
                ChineseTraditional = 1028,
                Arabic = 1025,
                Japanese = 1041,
                Korean = 1042,
                Hindi = 1081,
                Indonesian = 1057,
                Russian = 1049,
                Polish = 1045,
                Turkish = 1055
            }
            public enum statuscode
            {
                Provisioned = 1,
                Deprovisioned = 2,
                Provisioning = 3,
                ProvisionFailed = 4,
                MissingLicense = 5
            }
            public enum accesscontrolpolicy
            {
                Any = 0,
                ChatbotReaders = 1,
                GroupMembership = 2
            }
            public enum authenticationtrigger
            {
                AsNeeded = 0,
                Always = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bot_botcomponent")]
    public class bot_botcomponent : Entity
    {
        public const string EntityLogicalName = "bot_botcomponent";
        public bot_botcomponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bot_botcomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bot_botcomponentid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? botcomponentid = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? botid = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? bot_botcomponentId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bot_environmentvariabledefinition")]
    public class bot_environmentvariabledefinition : Entity
    {
        public const string EntityLogicalName = "bot_environmentvariabledefinition";
        public bot_environmentvariabledefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bot_environmentvariabledefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bot_environmentvariabledefinitionid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? environmentvariabledefinitionid = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? botid = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? bot_environmentvariabledefinitionId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("botcomponent")]
    public class botcomponent : UserOrTeamEntity
    {
        public const string EntityLogicalName = "botcomponent";
        public botcomponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("botcomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["botcomponentid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string Content = null;

        public readonly OptionSetValue ComponentType = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference ParentBotComponentId = null;

        public readonly string Category = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string SchemaName = null;

        public readonly OptionSetValue Language = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string Description = null;

        public readonly Guid? SolutionId = null;

        public readonly string Data = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? botcomponentId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentType
            {
                Topic = 0,
                Skill = 1,
                BotVariable = 2,
                BotEntity = 3,
                Dialog = 4,
                LanguageUnderstanding = 6,
                LanguageGeneration = 7,
                Trigger = 5,
                DialogSchema = 8
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum Language
            {
                English = 1033,
                Spanish = 1034,
                PortugueseBrazilian = 1046,
                French = 1036,
                Dutch = 1043,
                Norwegian = 1044,
                Danish = 1030,
                Swedish = 1053,
                Italian = 1040,
                German = 1031,
                ChineseSimplified = 2052,
                ChineseTraditional = 1028,
                Arabic = 1025,
                Japanese = 1041,
                Korean = 1042,
                Hindi = 1081,
                Indonesian = 1057,
                Russian = 1049,
                Polish = 1045,
                Turkish = 1055
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("botcomponent_botcomponent")]
    public class botcomponent_botcomponent : Entity
    {
        public const string EntityLogicalName = "botcomponent_botcomponent";
        public botcomponent_botcomponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("botcomponent_botcomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["botcomponent_botcomponentid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly Guid? botcomponentidOne = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? botcomponent_botcomponentId = null;

        public readonly Guid? botcomponentidTwo = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("botcomponent_environmentvariabledefinition")]
    public class botcomponent_environmentvariabledefinition : Entity
    {
        public const string EntityLogicalName = "botcomponent_environmentvariabledefinition";
        public botcomponent_environmentvariabledefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("botcomponent_environmentvariabledefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["botcomponent_environmentvariabledefinitionid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? environmentvariabledefinitionid = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? botcomponentid = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly Guid? botcomponent_environmentvariabledefinitionId = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("botcomponent_workflow")]
    public class botcomponent_workflow : Entity
    {
        public const string EntityLogicalName = "botcomponent_workflow";
        public botcomponent_workflow() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("botcomponent_workflowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["botcomponent_workflowid"] = value;
            }
        }

        public readonly Guid? botcomponent_workflowId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? botcomponentid = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? workflowid = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bulkdeletefailure")]
    public class BulkDeleteFailure : Entity
    {
        public const string EntityLogicalName = "bulkdeletefailure";
        public BulkDeleteFailure() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bulkdeletefailureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bulkdeletefailureid"] = value;
            }
        }

        public readonly string ErrorDescription = null;

        public readonly EntityReference BulkDeleteOperationId = null;

        public readonly Guid? BulkDeleteFailureId = null;

        public readonly Guid? OwningUser = null;

        public readonly int? OrderedQueryIndex = null;

        public readonly EntityReference AsyncOperationId = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly int? ErrorNumber = null;

        public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bulkdeleteoperation")]
    public class BulkDeleteOperation : Entity
    {
        public const string EntityLogicalName = "bulkdeleteoperation";
        public BulkDeleteOperation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bulkdeleteoperationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bulkdeleteoperationid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? NextRun = null;

        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? BulkDeleteOperationId = null;

        public readonly int? FailureCount = null;

        public readonly int? ProcessingQEIndex = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsRecurring = null;

        public readonly EntityReference AsyncOperationId = null;

        public readonly int? SuccessCount = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string OrderedQuerySetXml = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                Retrying = 11,
                Paused = 12,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessdatalocalizedlabel")]
    public class BusinessDataLocalizedLabel : Entity
    {
        public const string EntityLogicalName = "businessdatalocalizedlabel";
        public BusinessDataLocalizedLabel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessdatalocalizedlabelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessdatalocalizedlabelid"] = value;
            }
        }

        public readonly int? ObjectColumnNumber = null;

        public readonly Guid? BusinessDataLocalizedLabelId = null;

        public readonly int? LanguageId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ObjectId = null;

        public readonly string ObjectColumnName = null;

        public readonly string Label = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessprocessflowinstance")]
    public class BusinessProcessFlowInstance : Entity
    {
        public const string EntityLogicalName = "businessprocessflowinstance";
        public BusinessProcessFlowInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }

        public readonly string TraversedPath = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? Entity2Id = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly Guid? ProcessStageId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Name = null;

        public readonly string Entity1ObjectTypeCode = null;

        public readonly Guid? Entity5Id = null;

        public readonly Guid? Entity3Id = null;

        public readonly string Entity2ObjectTypeCode = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string Entity5ObjectTypeCode = null;

        public readonly EntityReference ProcessId = null;

        public readonly string Entity3ObjectTypeCode = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? Entity1Id = null;

        public readonly Guid? BusinessProcessFlowInstanceId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ActiveStageStartedOn = null;

        public readonly Guid? Entity4Id = null;

        public readonly DateTime? CompletedOn = null;

        public readonly string Entity4ObjectTypeCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessunit")]
    public class BusinessUnit : Entity
    {
        public const string EntityLogicalName = "businessunit";
        public BusinessUnit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly string Address2_Line2 = null;

        public readonly DateTime? CreatedOn = null;

        public readonly double? Address1_Longitude = null;

        public readonly string Address1_County = null;

        public readonly Guid? Address1_AddressId = null;

        public readonly string Address2_Telephone1 = null;

        public readonly string Address2_Telephone2 = null;

        public readonly string Address2_Telephone3 = null;

        public readonly EntityReference ParentBusinessUnitId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? Address2_AddressId = null;

        public readonly int? InheritanceMask = null;

        public readonly string FtpSiteUrl = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly string Address2_Name = null;

        public readonly string WebSiteUrl = null;

        public readonly string Address2_Country = null;

        public readonly string Address1_Line1 = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string Address1_StateOrProvince = null;

        public readonly string Address2_PostalCode = null;

        public readonly string Address2_County = null;

        public readonly string Address1_Country = null;

        public readonly string Address1_PostalCode = null;

        public readonly string Address1_Fax = null;

        public readonly int? UTCOffset = null;

        public readonly string Address1_Line3 = null;

        public readonly int? Address1_UTCOffset = null;

        public readonly bool? WorkflowSuspended = null;

        public readonly string EMailAddress = null;

        public readonly int? Address2_UTCOffset = null;

        public readonly string Address2_Line1 = null;

        public readonly string Address2_UPSZone = null;

        public readonly string Address2_PostOfficeBox = null;

        public readonly string Address1_City = null;

        public readonly string TickerSymbol = null;

        public readonly string Picture = null;

        public readonly string Address1_Telephone1 = null;

        public readonly string Address1_Telephone2 = null;

        public readonly string Address1_Telephone3 = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? UserGroupId = null;

        public readonly string Address2_StateOrProvince = null;

        public readonly string Description = null;

        public readonly OptionSetValue Address2_ShippingMethodCode = null;

        public readonly string Address1_Name = null;

        public readonly string DisabledReason = null;

        public readonly bool? IsDisabled = null;

        public readonly OptionSetValue Address1_ShippingMethodCode = null;

        public readonly OptionSetValue Address2_AddressTypeCode = null;

        public readonly string Address1_Line2 = null;

        public readonly double? Address2_Longitude = null;

        public readonly string Address2_City = null;

        public readonly EntityReference CalendarId = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string Address2_Fax = null;

        public readonly string StockExchange = null;

        public readonly double? CreditLimit = null;

        public readonly OptionSetValue Address1_AddressTypeCode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string DivisionName = null;

        public readonly double? Address1_Latitude = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Address1_UPSZone = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string Address2_Line3 = null;

        public readonly string FileAsName = null;

        public readonly double? Address2_Latitude = null;

        public readonly string CostCenter = null;

        public readonly Guid? BusinessUnitId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string Address1_PostOfficeBox = null;

        public new static class Options
        {
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessunitmap")]
    public class BusinessUnitMap : Entity
    {
        public const string EntityLogicalName = "businessunitmap";
        public BusinessUnitMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitmapid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? BusinessUnitMapId = null;

        public readonly Guid? BusinessId = null;

        public readonly Guid? SubBusinessId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessunitnewsarticle")]
    public class BusinessUnitNewsArticle : Entity
    {
        public const string EntityLogicalName = "businessunitnewsarticle";
        public BusinessUnitNewsArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitnewsarticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitnewsarticleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? ActiveUntil = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly bool? ShowOnHomepage = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly DateTime? ActiveOn = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string NewsArticle = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string ArticleTitle = null;

        public readonly OptionSetValue ArticleTypeCode = null;

        public readonly string ArticleUrl = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly Guid? BusinessUnitNewsArticleId = null;

        public new static class Options
        {
            public enum ArticleTypeCode
            {
                AllUsers = 1,
                SalesUsers = 2,
                ServiceUsers = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("calendar")]
    public class Calendar : Entity
    {
        public const string EntityLogicalName = "calendar";
        public Calendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("calendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["calendarid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference HolidayScheduleCalendarId = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Guid? CalendarId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? IsShared = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? PrimaryUserId = null;

        public readonly OptionSetValue Type = null;

        public new static class Options
        {
            public enum Type
            {
                Default = 0,
                CustomerService = 1,
                HolidaySchedule = 2,
                InnerCalendarType = -1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("calendarrule")]
    public class CalendarRule : Entity
    {
        public const string EntityLogicalName = "calendarrule";
        public CalendarRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("calendarruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["calendarruleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly bool? IsSimple = null;

        public readonly EntityReference CalendarId = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? SubCode = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly DateTime? EffectiveIntervalEnd = null;

        public readonly int? TimeCode = null;

        public readonly Guid? OrganizationId = null;

        public readonly int? Rank = null;

        public readonly Guid? BusinessUnitId = null;

        public readonly Guid? CalendarRuleId = null;

        public readonly int? Duration = null;

        public readonly DateTime? EndTime = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? Offset = null;

        public readonly EntityReference InnerCalendarId = null;

        public readonly DateTime? EffectiveIntervalStart = null;

        public readonly string Pattern = null;

        public readonly bool? IsSelected = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly double? Effort = null;

        public readonly int? ExtentCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? IsVaried = null;

        public readonly string GroupDesignator = null;

        public readonly bool? IsModified = null;

        public readonly int? TimeZoneCode = null;

        public readonly DateTime? StartTime = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("callbackregistration")]
    public class CallbackRegistration : Entity
    {
        public const string EntityLogicalName = "callbackregistration";
        public CallbackRegistration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("callbackregistrationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["callbackregistrationid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string FilterExpression = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue Scope = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Url = null;

        public readonly string FilteringAttributes = null;

        public readonly string EntityName = null;

        public readonly string RuntimeIntegrationProperties = null;

        public readonly OptionSetValue Version = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string PostponeUntil = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly OptionSetValue Message = null;

        public readonly string SdkMessageName = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly OptionSetValue RunAs = null;

        public readonly Guid? CallbackRegistrationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum Scope
            {
                User = 1,
                BusinessUnit = 2,
                ParentChildBusinessUnit = 3,
                Organization = 4
            }
            public enum Version
            {
                V1 = 1,
                V2 = 2,
                V3 = 3
            }
            public enum Message
            {
                Create = 1,
                Delete = 2,
                Update = 3,
                CreateOrUpdate = 4,
                CreateOrDelete = 5,
                UpdateOrDelete = 6,
                CreateOrUpdateOrDelete = 7
            }
            public enum RunAs
            {
                TriggeringUser = 1,
                RecordOwner = 2,
                ProcessOwner = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("canvasapp")]
    public class CanvasApp : Entity
    {
        public const string EntityLogicalName = "canvasapp";
        public CanvasApp() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("canvasappid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["canvasappid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly string ConnectionReferences = null;

        public readonly bool? IsHeroApp = null;

        public readonly string GalleryItemId = null;

        public readonly bool? IsHidden = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? LastPublishTime = null;

        public readonly string AppOpenUri = null;

        public readonly string MinClientVersion = null;

        public readonly bool? IsFeaturedApp = null;

        public readonly string AuthorizationReferences = null;

        public readonly string Tags = null;

        public readonly string IntroducedVersion = null;

        public readonly string CommitMessage = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly bool? IsCustomizable = null;

        public readonly bool? CanConsumeAppPass = null;

        public readonly string Description = null;

        public readonly string AppComponentDependencies = null;

        public readonly string Publisher = null;

        public readonly string CdsDependencies = null;

        public readonly bool? AdminControlBypassConsent = null;

        public readonly bool? IsCdsUpgraded = null;

        public readonly DateTime? LastModifiedTime = null;

        public readonly string EmbeddedApp = null;

        public readonly Guid? CanvasAppId = null;

        public readonly string AppComponents = null;

        public readonly EntityReference OwnerId = null;

        public readonly Guid? CanvasAppRowId = null;

        public readonly string AADCreatedById = null;

        public readonly string AppVersion = null;

        public readonly EntityReference OwningUser = null;

        public readonly string BackgroundColor = null;

        public readonly string Status = null;

        public readonly string AADLastModifiedById = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string DisplayName = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference OwningBusinessUnit = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string DatabaseReferences = null;

        public readonly OptionSetValue CanvasAppType = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? BypassConsent = null;

        public readonly DateTime? CreatedTime = null;

        public readonly string CreatedByClientVersion = null;

        public readonly string AADLastPublishedById = null;

        public new static class Options
        {
            public enum CanvasAppType
            {
                ClassicCanvasApp = 0,
                AppComponentLibrary = 1,
                CustomCanvasPage = 2,
                UnifiedApp = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("canvasappextendedmetadata")]
    public class CanvasAppExtendedMetadata : UserOrTeamEntity
    {
        public const string EntityLogicalName = "canvasappextendedmetadata";
        public CanvasAppExtendedMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("canvasappextendedmetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["canvasappextendedmetadataid"] = value;
            }
        }

        public readonly string CanvasAppUniqueId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference CanvasAppId = null;

        public readonly Guid? CanvasAppExtendedMetadataId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("cardtype")]
    public class CardType : Entity
    {
        public const string EntityLogicalName = "cardtype";
        public CardType() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("cardtypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["cardtypeid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string CardName = null;

        public readonly Guid? CardTypeId = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("cardtype")]
        public readonly int? CardType1 = null;

        public readonly string SoftTitle = null;

        public readonly bool? IsLiveOnly = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? HasSnoozeDismiss = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string AdaptiveCardTemplate = null;

        public readonly DateTime? LastSyncTime = null;

        public readonly string GroupType = null;

        public readonly bool? BoolCardOption = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly OptionSetValue ClientAvailability = null;

        public readonly string CardTypeIcon = null;

        public readonly int? Priority = null;

        public readonly DateTime? ScheduleTime = null;

        public readonly bool? IsPreviewCard = null;

        public readonly string StringCardOption = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly bool? IsEnabled = null;

        public readonly string Actions = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? IntCardOption = null;

        public readonly bool? IsBaseCard = null;

        public readonly string PublisherName = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string SummaryText = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly int? GroupCategory = null;

        public new static class Options
        {
            public enum ClientAvailability
            {
                WebClientOnly = 1,
                MocaOnly = 2,
                MocaAndWeb = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("cascadegrantrevokeaccessrecordstracker")]
    public class cascadegrantrevokeaccessrecordstracker : Entity
    {
        public const string EntityLogicalName = "cascadegrantrevokeaccessrecordstracker";
        public cascadegrantrevokeaccessrecordstracker() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("cascadegrantrevokeaccessrecordstrackerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["cascadegrantrevokeaccessrecordstrackerid"] = value;
            }
        }

        public readonly Guid? cascadegrantrevokeaccessrecordstrackerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly OptionSetValue statuscode = null;

        public readonly string RecordsJson = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? ProcessedRecords = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference SyncTrackerId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? TotalRecords = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("cascadegrantrevokeaccessversiontracker")]
    public class cascadegrantrevokeaccessversiontracker : Entity
    {
        public const string EntityLogicalName = "cascadegrantrevokeaccessversiontracker";
        public cascadegrantrevokeaccessversiontracker() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("cascadegrantrevokeaccessversiontrackerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["cascadegrantrevokeaccessversiontrackerid"] = value;
            }
        }

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly OptionSetValue statuscode = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string MessageName = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly Guid? cascadegrantrevokeaccessversiontrackerId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? ParentObjectTypeCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string ParentEntityId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("catalog")]
    public class Catalog : OrganizationEntity
    {
        public const string EntityLogicalName = "catalog";
        public Catalog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("catalogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["catalogid"] = value;
            }
        }

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? CatalogId = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string UniqueName = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string DisplayName = null;

        public readonly EntityReference ParentCatalogId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("catalogassignment")]
    public class CatalogAssignment : OrganizationEntity
    {
        public const string EntityLogicalName = "catalogassignment";
        public CatalogAssignment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("catalogassignmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["catalogassignmentid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? CatalogAssignmentId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference CatalogId = null;

        public readonly EntityReference Object = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("category")]
    public class Category : Entity
    {
        public const string EntityLogicalName = "category";
        public Category() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("categoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["categoryid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string CategoryNumber = null;

        public readonly Guid? CategoryId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? SequenceNumber = null;

        public readonly EntityReference ParentCategoryId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelaccessprofile")]
    public class ChannelAccessProfile : Entity
    {
        public const string EntityLogicalName = "channelaccessprofile";
        public ChannelAccessProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? HavePrivilegesChanged = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? ChannelAccessProfileIdUnique = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string IntroducedVersion = null;

        public readonly bool? FacebookAccess = null;

        public readonly bool? TwitterAccess = null;

        public readonly bool? PhoneAccess = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly bool? SubmitFeedback = null;

        public readonly bool? WebAccess = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference OwningTeam = null;

        public readonly bool? RateKnowledgeArticles = null;

        public readonly bool? IsGuestProfile = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? ChannelAccessProfileId = null;

        public readonly bool? ViewArticleRating = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly bool? ViewKnowledgeArticles = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly bool? EmailAccess = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelaccessprofileentityaccesslevel")]
    public class ChannelAccessProfileEntityAccessLevel : Entity
    {
        public const string EntityLogicalName = "channelaccessprofileentityaccesslevel";
        public ChannelAccessProfileEntityAccessLevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileentityaccesslevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileentityaccesslevelid"] = value;
            }
        }

        public readonly Guid? ChannelAccessProfileId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? ChannelAccessProfileEntityAccessLevelIdUnique = null;

        public readonly Guid? EntityAccessLevelId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly int? EntityAccessLevelDepthMask = null;

        public readonly Guid? ChannelAccessProfileEntityAccessLevelId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelaccessprofilerule")]
    public class ChannelAccessProfileRule : Entity
    {
        public const string EntityLogicalName = "channelaccessprofilerule";
        public ChannelAccessProfileRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileruleid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? ChannelAccessProfileRuleIdUnique = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference WorkflowId = null;

        public readonly Guid? ChannelAccessProfileRuleId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelaccessprofileruleitem")]
    public class ChannelAccessProfileRuleItem : Entity
    {
        public const string EntityLogicalName = "channelaccessprofileruleitem";
        public ChannelAccessProfileRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileruleitemid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly EntityReference OwningUser = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference AssociatedChannelAccessProfile = null;

        public readonly Guid? ChannelAccessProfileRuleItemIdUnique = null;

        public readonly string ConditionXml = null;

        public readonly int? SequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? ChannelAccessProfileRuleItemId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference ChannelAccessProfileRuleId = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelproperty")]
    public class ChannelProperty : Entity
    {
        public const string EntityLogicalName = "channelproperty";
        public ChannelProperty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelpropertyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelpropertyid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Applicationsource = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly Guid? ChannelPropertyId = null;

        public readonly OptionSetValue DataType = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue statuscode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? ChannelPropertyIdUnique = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum DataType
            {
                FloatingPointNumber = 0,
                SingleLineOfText = 1,
                WholeNumber = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelpropertygroup")]
    public class ChannelPropertyGroup : Entity
    {
        public const string EntityLogicalName = "channelpropertygroup";
        public ChannelPropertyGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelpropertygroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelpropertygroupid"] = value;
            }
        }
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly Guid? ChannelPropertyGroupIdUnique = null;

        public readonly Guid? ChannelPropertyGroupId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue RegardingTypeCode = null;

        public readonly OptionSetValue statuscode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum RegardingTypeCode
            {
                PhoneCall = 4210,
                Email = 4202,
                Appointment = 4201,
                Task = 4212,
                SocialActivity = 4216,
                Donation = 10137
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("clientupdate")]
    public class ClientUpdate : Entity
    {
        public const string EntityLogicalName = "clientupdate";
        public ClientUpdate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("clientupdateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["clientupdateid"] = value;
            }
        }

        public readonly string Description = null;

        public readonly bool? WasExecuted = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ClientUpdateId = null;

        public readonly string SqlScript = null;

        public readonly OptionSetValue WhenExecute = null;

        public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum WhenExecute
            {
                BeforeSchemaChanges = 1,
                AfterSchemaChangesButBeforeDownloadData = 2,
                AfterDownloadData = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("columnmapping")]
    public class ColumnMapping : Entity
    {
        public const string EntityLogicalName = "columnmapping";
        public ColumnMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("columnmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["columnmappingid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? ColumnMappingId = null;

        public readonly string TargetEntityName = null;

        public readonly string TargetAttributeName = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string SourceEntityName = null;

        public readonly OptionSetValue ProcessCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? ColumnMappingIdUnique = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ImportMapId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string SourceAttributeName = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("complexcontrol")]
    public class ComplexControl : Entity
    {
        public const string EntityLogicalName = "complexcontrol";
        public ComplexControl() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("complexcontrolid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["complexcontrolid"] = value;
            }
        }

        public readonly OptionSetValue Type = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string ComplexControlXml = null;

        public readonly string Description = null;

        public readonly int? VersionNumber = null;

        public readonly int? Version = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? ComplexControlIdUnique = null;

        public readonly Guid? ComplexControlId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum Type
            {
                ProcessControl = 0,
                LinkControl = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connection")]
    public class Connection : Entity
    {
        public const string EntityLogicalName = "connection";
        public Connection() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwningTeam = null;

        public readonly OptionSetValue Record2ObjectTypeCode = null;

        public readonly string Description = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly byte[] EntityImage = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly DateTime? EffectiveStart = null;

        public readonly EntityReference Record1RoleId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly DateTime? EffectiveEnd = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? ConnectionId = null;

        public readonly EntityReference RelatedConnectionId = null;

        public readonly EntityReference Record2RoleId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly EntityReference Record2Id = null;

        public readonly bool? IsMaster = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference Record1Id = null;

        public readonly OptionSetValue Record1ObjectTypeCode = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum Record2ObjectTypeCode
            {
                KnowledgeBaseRecord = 9930,
                PhoneCall = 4210,
                ProcessSession = 4710,
                Donation = 10137,
                Challenge = 10140,
                Contact = 2,
                TeamProject = 10143,
                ChannelAccessProfileRule = 9400,
                Product = 10144,
                Territory = 2013,
                Team = 9,
                Account = 1,
                Position = 50,
                Task = 4212,
                Idea = 10142,
                Fundraiser = 10138,
                Goal = 9600,
                Activity = 4200,
                Letter = 4207,
                RecurringAppointment = 4251,
                KnowledgeArticle = 9953,
                User = 8,
                Email = 4202,
                Appointment = 4201,
                SocialProfile = 99,
                SocialActivity = 4216,
                Fax = 4204
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Record1ObjectTypeCode
            {
                Product = 10144,
                Activity = 4200,
                SocialActivity = 4216,
                ProcessSession = 4710,
                Appointment = 4201,
                Letter = 4207,
                SocialProfile = 99,
                Task = 4212,
                Donation = 10137,
                Fundraiser = 10138,
                RecurringAppointment = 4251,
                TeamProject = 10143,
                Contact = 2,
                Fax = 4204,
                Goal = 9600,
                Email = 4202,
                User = 8,
                PhoneCall = 4210,
                Position = 50,
                Challenge = 10140,
                Territory = 2013,
                Team = 9,
                Account = 1,
                KnowledgeArticle = 9953,
                KnowledgeBaseRecord = 9930,
                Idea = 10142,
                ChannelAccessProfileRule = 9400
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connectionreference")]
    public class connectionreference : UserOrTeamEntity
    {
        public const string EntityLogicalName = "connectionreference";
        public connectionreference() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionreferenceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionreferenceid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string Description = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? connectionreferenceId = null;

        public readonly EntityReference CustomConnectorId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string connectionreferencedisplayname = null;

        public readonly Guid? SolutionId = null;

        public readonly string ConnectionId = null;

        public readonly bool? IsManaged = null;

        public readonly string ConnectorId = null;

        public readonly string ConnectionReferenceLogicalName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connectionrole")]
    public class ConnectionRole : Entity
    {
        public const string EntityLogicalName = "connectionrole";
        public ConnectionRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsCustomizable = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue Category = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Guid? ConnectionRoleId = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly Guid? ConnectionRoleIdUnique = null;

        public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum Category
            {
                Business = 1,
                Family = 2,
                Social = 3,
                Sales = 4,
                Other = 5,
                Stakeholder = 1000,
                SalesTeam = 1001,
                Service = 1002
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connectionroleassociation")]
    public class ConnectionRoleAssociation : Entity
    {
        public const string EntityLogicalName = "connectionroleassociation";
        public ConnectionRoleAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleassociationid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? AssociatedConnectionRoleId = null;

        public readonly Guid? ConnectionRoleAssociationId = null;

        public readonly Guid? ConnectionRoleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connectionroleobjecttypecode")]
    public class ConnectionRoleObjectTypeCode : Entity
    {
        public const string EntityLogicalName = "connectionroleobjecttypecode";
        public ConnectionRoleObjectTypeCode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleobjecttypecodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleobjecttypecodeid"] = value;
            }
        }

        public readonly Guid? ConnectionRoleObjectTypeCodeId = null;

        public readonly EntityReference ConnectionRoleId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? OrganizationId = null;

        public readonly string AssociatedObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connector")]
    public class connector : UserOrTeamEntity
    {
        public const string EntityLogicalName = "connector";
        public connector() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectorid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string ConnectionParameters = null;

        public readonly OptionSetValue ConnectorType = null;

        public readonly string OpenApiDefinition = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsCustomizable = null;

        public readonly string DisplayName = null;

        public readonly string IconBrandColor = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? ConnectorIdUnique = null;

        public readonly Guid? IconBlobId = null;

        public readonly bool? IsManaged = null;

        public readonly byte[] IconBlob = null;

        public readonly Guid? connectorId = null;

        public readonly string PolicyTemplateInstances = null;

        public readonly string Description = null;

        public readonly string ConnectorInternalId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ConnectorType
            {
                CustomConnector = 1,
                NotSpecified = 0
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contact")]
    public class Contact : Entity
    {
        public const string EntityLogicalName = "contact";
        public Contact() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactid"] = value;
            }
        }

        public readonly string EMailAddress3 = null;

        public readonly string EMailAddress2 = null;

        public readonly string EMailAddress1 = null;

        public readonly OptionSetValue Address3_AddressTypeCode = null;

        public readonly string Address1_City = null;

        public readonly string Address3_Line1 = null;

        public readonly string Address1_Line1 = null;

        public readonly double? Address1_Longitude = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Money Aging90 = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly string YomiLastName = null;

        public readonly string YomiFirstName = null;

        public readonly bool? DoNotPostalMail = null;

        public readonly string YomiFullName = null;

        public readonly OptionSetValue Address1_AddressTypeCode = null;

        public readonly string Address3_Line2 = null;

        public readonly Money Aging30 = null;

        public readonly OptionSetValue Address1_FreightTermsCode = null;

        public readonly string Address3_Telephone1 = null;

        public readonly EntityReference sample_ContributorsId = null;

        public readonly string Address3_Line3 = null;

        public readonly bool? DoNotSendMM = null;

        public readonly EntityReference CreatedByExternalParty = null;

        public readonly bool? CreditOnHold = null;

        public readonly bool? DoNotBulkPostalMail = null;

        public readonly Money Aging60_Base = null;

        public readonly OptionSetValue Address1_ShippingMethodCode = null;

        public readonly OptionSetValue PaymentTermsCode = null;

        public readonly OptionSetValue GenderCode = null;

        public readonly int? Address3_UTCOffset = null;

        public readonly string ExternalUserIdentifier = null;

        public readonly string Address3_PrimaryContactName = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly OptionSetValue PreferredAppointmentTimeCode = null;

        public readonly string Address2_StateOrProvince = null;

        public readonly string MobilePhone = null;

        public readonly string Address2_Country = null;

        public readonly string Address2_Line2 = null;

        public readonly string Address3_StateOrProvince = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference SLAId = null;

        public readonly string AssistantPhone = null;

        public readonly EntityReference ParentContactId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? OnHoldTime = null;

        public readonly double? Address3_Longitude = null;

        public readonly string Address3_Fax = null;

        public readonly Money CreditLimit = null;

        public readonly DateTime? BirthDate = null;

        public readonly int? Address1_UTCOffset = null;

        public readonly string ManagerPhone = null;

        public readonly string EmployeeId = null;

        public readonly int? VersionNumber = null;

        public readonly string Address3_UPSZone = null;

        public readonly string Telephone1 = null;

        public readonly OptionSetValue CustomerTypeCode = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string Address2_County = null;

        public readonly bool? IsPrivate = null;

        public readonly string Telephone3 = null;

        public readonly OptionSetValue CustomerSizeCode = null;

        public readonly OptionSetValue PreferredContactMethodCode = null;

        public readonly string ChildrensNames = null;

        public readonly double? Address2_Latitude = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? DoNotBulkEMail = null;

        public readonly bool? DoNotFax = null;

        public readonly Money AnnualIncome_Base = null;

        public readonly Money Aging90_Base = null;

        public readonly string Address1_Composite = null;

        public readonly string FirstName = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue Address2_FreightTermsCode = null;

        public readonly string Callback = null;

        public readonly string Address2_PostalCode = null;

        public readonly OptionSetValue EducationCode = null;

        public readonly DateTime? LastUsedInCampaign = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly Guid? ProcessId = null;

        public readonly string GovernmentId = null;

        public readonly bool? IsAutoCreate = null;

        public readonly string Address2_Line3 = null;

        public readonly string Description = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly byte[] EntityImage = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string SpousesName = null;

        public readonly string Address1_County = null;

        public readonly string Home2 = null;

        public readonly bool? DoNotEMail = null;

        public readonly string Address3_County = null;

        public readonly string Pager = null;

        public readonly string Address2_PostOfficeBox = null;

        public readonly string Address2_Telephone1 = null;

        public readonly string Address2_Telephone2 = null;

        public readonly string Address2_Telephone3 = null;

        public readonly Money Aging60 = null;

        public readonly Guid? Address1_AddressId = null;

        public readonly string TraversedPath = null;

        public readonly Money AnnualIncome = null;

        public readonly EntityReference OwningUser = null;

        public readonly string WebSiteUrl = null;

        public readonly string Address2_Name = null;

        public readonly string MiddleName = null;

        public readonly string Address3_Telephone2 = null;

        public readonly OptionSetValue Address3_FreightTermsCode = null;

        public readonly string TimeSpentByMeOnEmailAndMeetings = null;

        public readonly OptionSetValue Address3_ShippingMethodCode = null;

        public readonly string Address2_Composite = null;

        public readonly string Address1_Country = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string Address1_StateOrProvince = null;

        public readonly bool? MarketingOnly = null;

        public readonly string Address1_Line3 = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly string JobTitle = null;

        public readonly string NickName = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string ManagerName = null;

        public readonly string Address1_Telephone1 = null;

        public readonly string Address1_Telephone2 = null;

        public readonly string Address1_Telephone3 = null;

        public readonly bool? IsBackofficeCustomer = null;

        public readonly Guid? ContactId = null;

        public readonly string Suffix = null;

        public readonly string Fax = null;

        public readonly EntityReference MasterId = null;

        public readonly string AssistantName = null;

        public readonly string YomiMiddleName = null;

        public readonly EntityReference OwnerId = null;

        public readonly string Address3_Country = null;

        public readonly int? Address2_UTCOffset = null;

        public readonly bool? ParticipatesInWorkflow = null;

        public readonly Money CreditLimit_Base = null;

        public readonly string Address2_Fax = null;

        public readonly bool? Merged = null;

        public readonly double? Address2_Longitude = null;

        public readonly EntityReference ModifiedByExternalParty = null;

        public readonly OptionSetValue AccountRoleCode = null;

        public readonly EntityReference AccountId = null;

        public readonly double? Address3_Latitude = null;

        public readonly bool? DoNotPhone = null;

        public readonly string Address1_PrimaryContactName = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly string Address1_Line2 = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ParentCustomerId = null;

        public readonly OptionSetValue Address2_AddressTypeCode = null;

        public readonly string Address2_UPSZone = null;

        public readonly bool? FollowEmail = null;

        public readonly string Address3_Name = null;

        public readonly string Address3_Composite = null;

        public readonly string Salutation = null;

        public readonly string Address1_PostalCode = null;

        public readonly string Company = null;

        public readonly Guid? StageId = null;

        public readonly string Address3_Telephone3 = null;

        public readonly string Address3_PostalCode = null;

        public readonly OptionSetValue PreferredAppointmentDayCode = null;

        public readonly Guid? Address2_AddressId = null;

        public readonly DateTime? Anniversary = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string Address2_City = null;

        public readonly OptionSetValue HasChildrenCode = null;

        public readonly string Telephone2 = null;

        public readonly Guid? SubscriptionId = null;

        public readonly OptionSetValue FamilyStatusCode = null;

        public readonly string Department = null;

        public readonly string Address3_City = null;

        public readonly string Business2 = null;

        public readonly EntityReference PreferredSystemUserId = null;

        public readonly Money Aging30_Base = null;

        public readonly string Address1_Name = null;

        public readonly string Address1_Fax = null;

        public readonly double? Address1_Latitude = null;

        public readonly OptionSetValue Address2_ShippingMethodCode = null;

        public readonly string Address3_PostOfficeBox = null;

        public readonly OptionSetValue LeadSourceCode = null;

        public readonly string Address2_Line1 = null;

        public readonly string Address1_UPSZone = null;

        public readonly string LastName = null;

        public readonly OptionSetValue ShippingMethodCode = null;

        public readonly OptionSetValue TerritoryCode = null;

        public readonly string FtpSiteUrl = null;

        public readonly int? NumberOfChildren = null;

        public readonly string Address1_PostOfficeBox = null;

        public readonly string Address2_PrimaryContactName = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FullName = null;

        public readonly Guid? Address3_AddressId = null;

        public new static class Options
        {
            public enum Address3_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }
            public enum Address1_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum Address1_ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum GenderCode
            {
                Male = 1,
                Female = 2
            }
            public enum PreferredAppointmentTimeCode
            {
                Morning = 1,
                Afternoon = 2,
                Evening = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum CustomerTypeCode
            {
                DefaultValue = 1
            }
            public enum CustomerSizeCode
            {
                DefaultValue = 1
            }
            public enum PreferredContactMethodCode
            {
                Any = 1,
                Email = 2,
                Phone = 3,
                Fax = 4,
                Mail = 5
            }
            public enum Address2_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum EducationCode
            {
                DefaultValue = 1
            }
            public enum Address3_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum Address3_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum AccountRoleCode
            {
                DecisionMaker = 1,
                Employee = 2,
                Influencer = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum PreferredAppointmentDayCode
            {
                Sunday = 0,
                Monday = 1,
                Tuesday = 2,
                Wednesday = 3,
                Thursday = 4,
                Friday = 5,
                Saturday = 6
            }
            public enum HasChildrenCode
            {
                DefaultValue = 1
            }
            public enum FamilyStatusCode
            {
                Single = 1,
                Married = 2,
                Divorced = 3,
                Widowed = 4
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum LeadSourceCode
            {
                DefaultValue = 1
            }
            public enum ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum TerritoryCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("conversationtranscript")]
    public class conversationtranscript : UserOrTeamEntity
    {
        public const string EntityLogicalName = "conversationtranscript";
        public conversationtranscript() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("conversationtranscriptid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["conversationtranscriptid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly string Content = null;

        public readonly string SchemaType = null;

        public readonly EntityReference bot_conversationtranscriptId = null;

        public readonly Guid? conversationtranscriptId = null;

        public readonly string metadata = null;

        public readonly DateTime? ConversationStartTime = null;

        public readonly string SchemaVersion = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("convertrule")]
    public class ConvertRule : Entity
    {
        public const string EntityLogicalName = "convertrule";
        public ConvertRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("convertruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["convertruleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwningTeam = null;

        public readonly Guid? SolutionId = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly bool? CheckIfResolved = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference ResponseTemplateId = null;

        public readonly EntityReference OwningUser = null;

        public readonly bool? CheckActiveEntitlement = null;

        public readonly bool? CheckDirectMessages = null;

        public readonly bool? CheckBlockedSocialProfile = null;

        public readonly EntityReference ChannelPropertyGroupId = null;

        public readonly OptionSetValue SourceTypeCode = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly bool? AllowUnknownSender = null;

        public readonly bool? IsManaged = null;

        public readonly int? ResolvedSince = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly bool? SendAutomaticResponse = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference WorkflowId = null;

        public readonly EntityReference QueueId = null;

        public readonly string RecordVersion = null;

        public readonly string SourceChannelTypeCode = null;

        public readonly Guid? ConvertRuleId = null;

        public readonly Guid? ConvertRuleIdUnique = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public new static class Options
        {
            public enum SourceTypeCode
            {
                SocialMonitoring = 1,
                Email = 2
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }
            public enum SourceChannelTypeCode
            {
                PhoneCall = 4210,
                Email = 4202,
                Appointment = 4201,
                Task = 4212,
                SocialActivity = 4216,
                Donation = 10137
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("convertruleitem")]
    public class ConvertRuleItem : Entity
    {
        public const string EntityLogicalName = "convertruleitem";
        public ConvertRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("convertruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["convertruleitemid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference ConditionId = null;

        public readonly string Description = null;

        public readonly EntityReference OwningUser = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference ConvertRuleId = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string ConditionXml = null;

        public readonly int? SequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference QueueId = null;

        public readonly Guid? ConvertRuleItemIdUnique = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference WorkflowId = null;

        public readonly Guid? ConvertRuleItemId = null;

        public readonly string PropertiesXml = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customapi")]
    public class CustomAPI : UserOrTeamEntity
    {
        public const string EntityLogicalName = "customapi";
        public CustomAPI() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customapiid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customapiid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string Description = null;

        public readonly bool? WorkflowSdkStepEnabled = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly bool? IsPrivate = null;

        public readonly Guid? CustomAPIId = null;

        public readonly OptionSetValue AllowedCustomProcessingStepType = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsFunction = null;

        public readonly EntityReference SdkMessageId = null;

        public readonly EntityReference PluginTypeId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string UniqueName = null;

        public readonly Guid? SolutionId = null;

        public readonly string DisplayName = null;

        public readonly OptionSetValue BindingType = null;

        public readonly bool? IsManaged = null;

        public readonly string BoundEntityLogicalName = null;

        public readonly string ExecutePrivilegeName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum AllowedCustomProcessingStepType
            {
                None = 0,
                AsyncOnly = 1,
                SyncAndAsync = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum BindingType
            {
                Global = 0,
                Entity = 1,
                EntityCollection = 2
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customapirequestparameter")]
    public class CustomAPIRequestParameter : UserOrTeamEntity
    {
        public const string EntityLogicalName = "customapirequestparameter";
        public CustomAPIRequestParameter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customapirequestparameterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customapirequestparameterid"] = value;
            }
        }

        public readonly bool? IsOptional = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string Description = null;

        public readonly string LogicalEntityName = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference CustomAPIId = null;

        public readonly string DisplayName = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string UniqueName = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly OptionSetValue Type = null;

        public readonly Guid? CustomAPIRequestParameterId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Type
            {
                Boolean = 0,
                DateTime = 1,
                Decimal = 2,
                Entity = 3,
                EntityCollection = 4,
                EntityReference = 5,
                Float = 6,
                Integer = 7,
                Money = 8,
                Picklist = 9,
                String = 10,
                StringArray = 11,
                Guid = 12
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customapiresponseproperty")]
    public class CustomAPIResponseProperty : UserOrTeamEntity
    {
        public const string EntityLogicalName = "customapiresponseproperty";
        public CustomAPIResponseProperty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customapiresponsepropertyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customapiresponsepropertyid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string Description = null;

        public readonly string LogicalEntityName = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference CustomAPIId = null;

        public readonly string DisplayName = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string UniqueName = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? CustomAPIResponsePropertyId = null;

        public readonly OptionSetValue Type = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Type
            {
                Boolean = 0,
                DateTime = 1,
                Decimal = 2,
                Entity = 3,
                EntityCollection = 4,
                EntityReference = 5,
                Float = 6,
                Integer = 7,
                Money = 8,
                Picklist = 9,
                String = 10,
                StringArray = 11,
                Guid = 12
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customcontrol")]
    public class CustomControl : Entity
    {
        public const string EntityLogicalName = "customcontrol";
        public CustomControl() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontrolid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontrolid"] = value;
            }
        }

        public readonly string AuthoringManifest = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string Manifest = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string Version = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string ClientJson = null;

        public readonly string CompatibleDataTypes = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? CustomControlIdUnique = null;

        public readonly Guid? CustomControlId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customcontroldefaultconfig")]
    public class CustomControlDefaultConfig : Entity
    {
        public const string EntityLogicalName = "customcontroldefaultconfig";
        public CustomControlDefaultConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontroldefaultconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontroldefaultconfigid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string ControlDescriptionJson = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string PrimaryEntityTypeCode = null;

        public readonly bool? IsManaged = null;

        public readonly string EventsXml = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string ControlDescriptionXML = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? CustomControlDefaultConfigId = null;

        public readonly Guid? CustomControlDefaultConfigIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customcontrolresource")]
    public class CustomControlResource : Entity
    {
        public const string EntityLogicalName = "customcontrolresource";
        public CustomControlResource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontrolresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontrolresourceid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? CustomControlResourceId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string VersionRequirement = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string Version = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? CustomControlResourceIdUnique = null;

        public readonly Guid? WebResourceId = null;

        public readonly Guid? CustomControlId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customeraddress")]
    public class CustomerAddress : Entity
    {
        public const string EntityLogicalName = "customeraddress";
        public CustomerAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customeraddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customeraddressid"] = value;
            }
        }

        public readonly int? UTCOffset = null;

        public readonly EntityReference OwningUser = null;

        public readonly OptionSetValue FreightTermsCode = null;

        public readonly double? Latitude = null;

        public readonly string Telephone1 = null;

        public readonly string ObjectTypeCode = null;

        public readonly string Composite = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? CustomerAddressId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string PostOfficeBox = null;

        public readonly string County = null;

        public readonly string Country = null;

        public readonly decimal? ExchangeRate = null;

        public readonly int? AddressNumber = null;

        public readonly string Fax = null;

        public readonly OptionSetValue ShippingMethodCode = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string City = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly double? Longitude = null;

        public readonly string UPSZone = null;

        public readonly string StateOrProvince = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue AddressTypeCode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Telephone3 = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ParentId = null;

        public readonly string PrimaryContactName = null;

        public readonly string PostalCode = null;

        public readonly string Line1 = null;

        public readonly string Line2 = null;

        public readonly string Line3 = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum ObjectTypeCode
            {
                Account = 1,
                Contact = 2
            }
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customerrelationship")]
    public class CustomerRelationship : Entity
    {
        public const string EntityLogicalName = "customerrelationship";
        public CustomerRelationship() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customerrelationshipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customerrelationshipid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? CustomerRelationshipId = null;

        public readonly EntityReference PartnerId = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference ConverseRelationshipId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string CustomerRoleDescription = null;

        public readonly EntityReference CustomerRoleId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CustomerId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference PartnerRoleId = null;

        public readonly Guid? UniqueDscId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string PartnerRoleDescription = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("datalakefolder")]
    public class datalakefolder : UserOrTeamEntity
    {
        public const string EntityLogicalName = "datalakefolder";
        public datalakefolder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("datalakefolderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["datalakefolderid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly bool? isprivate = null;

        public readonly Guid? owningappid = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? datalakefolderId = null;

        public readonly string containerendpoint = null;

        public readonly string path = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string datalakefolder_UniqueName = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? isdeepcopyenabled = null;

        public readonly string extendedproperties = null;

        public readonly bool? IsManaged = null;

        public readonly bool? iscustomercapacity = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("datalakefolderpermission")]
    public class datalakefolderpermission : UserOrTeamEntity
    {
        public const string EntityLogicalName = "datalakefolderpermission";
        public datalakefolderpermission() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("datalakefolderpermissionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["datalakefolderpermissionid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference folderid = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly bool? canexecute = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? canwrite = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? appid = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly bool? canread = null;

        public readonly Guid? datalakefolderpermissionId = null;

        public readonly string datalakefolderpermission_UniqueName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("datalakeworkspace")]
    public class datalakeworkspace : OrganizationEntity
    {
        public const string EntityLogicalName = "datalakeworkspace";
        public datalakeworkspace() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("datalakeworkspaceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["datalakeworkspaceid"] = value;
            }
        }

        public readonly Guid? tenantid = null;

        public readonly Guid? datalakeworkspaceId = null;

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly bool? isprivate = null;

        public readonly Guid? owningappid = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string containerendpoint = null;

        public readonly bool? IsManaged = null;

        public readonly string datalakeworkspace_UniqueName = null;

        public readonly string path = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? isdeepcopyenabled = null;

        public readonly Guid? whitelistedappid = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? iscustomercapacity = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("datalakeworkspacepermission")]
    public class datalakeworkspacepermission : OrganizationEntity
    {
        public const string EntityLogicalName = "datalakeworkspacepermission";
        public datalakeworkspacepermission() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("datalakeworkspacepermissionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["datalakeworkspacepermissionid"] = value;
            }
        }

        public readonly Guid? appid = null;

        public readonly Guid? tenantid = null;

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? datalakeworkspacepermissionId = null;

        public readonly bool? IsManaged = null;

        public readonly bool? canwrite = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? whitelistedappid = null;

        public readonly EntityReference workspaceid = null;

        public readonly bool? canexecute = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? canread = null;

        public readonly string datalakeworkspacepermission_UniqueName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dataperformance")]
    public class DataPerformance : Entity
    {
        public const string EntityLogicalName = "dataperformance";
        public DataPerformance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dataperformanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dataperformanceid"] = value;
            }
        }

        public readonly decimal? Weight = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string Operation = null;

        public readonly string RealizedOptimizationImpact = null;

        public readonly decimal? OptimizationStorage = null;

        public readonly decimal? MaxTime = null;

        public readonly string ExecutionPeriod = null;

        public readonly decimal? MedianTime = null;

        public readonly Guid? DataPerformanceId = null;

        public readonly string LastActionResult = null;

        public readonly decimal? EstimatedOptimizationImpact = null;

        public readonly int? Count = null;

        public readonly string Solution = null;

        public readonly string Component = null;

        public readonly bool? AnyOptimizationApplied = null;

        public readonly string Entity = null;

        public readonly DateTime? LastOptimizationDate = null;

        public readonly string OptimizationStatus = null;

        public readonly bool? AnyOptimizationAvailable = null;

        public readonly decimal? MinTime = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("delveactionhub")]
    public class DelveActionHub : Entity
    {
        public const string EntityLogicalName = "delveactionhub";
        public DelveActionHub() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("delveactionhubid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["delveactionhubid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Sender = null;

        public readonly OptionSetValue CardType = null;

        public readonly string Description = null;

        public readonly string RelatedMailIds = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly string IconClassName = null;

        public readonly string MessageId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? SenderEntityObjectTypeCode = null;

        public readonly OptionSetValue StateCode = null;

        public readonly DateTime? CreatedTime = null;

        public readonly string SenderImageUrl = null;

        public readonly EntityReference RecordId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Guid? SenderEntityId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? ModifiedTime = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? MessageTime = null;

        public readonly Guid? DelveActionHubId = null;

        public readonly string MailWebLink = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum CardType
            {
                Default = 0,
                SendContentRequest = 1,
                YesNo = 2,
                MeetingRequest = 3
            }
            public enum StateCode
            {
                Pending = 0,
                Completed = 1,
                Dismiss = 2
            }
            public enum StatusCode
            {
                Pending = 1,
                Completed = 2,
                Dismiss = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dependency")]
    public class Dependency : Entity
    {
        public const string EntityLogicalName = "dependency";
        public Dependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencyid"] = value;
            }
        }

        public readonly Guid? DependentComponentParentId = null;

        public readonly int? VersionNumber = null;

        public readonly OptionSetValue DependentComponentType = null;

        public readonly Guid? DependencyId = null;

        public readonly Guid? RequiredComponentBaseSolutionId = null;

        public readonly double? RequiredComponentIntroducedVersion = null;

        public readonly Guid? RequiredComponentParentId = null;

        public readonly EntityReference RequiredComponentNodeId = null;

        public readonly Guid? DependentComponentObjectId = null;

        public readonly Guid? DependentComponentBaseSolutionId = null;

        public readonly EntityReference DependentComponentNodeId = null;

        public readonly OptionSetValue DependencyType = null;

        public readonly OptionSetValue RequiredComponentType = null;

        public readonly Guid? RequiredComponentObjectId = null;

        public new static class Options
        {
            public enum DependentComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402,
                EntityAnalyticsConfiguration = 430,
                AttributeImageConfiguration = 431,
                EntityImageConfiguration = 432
            }
            public enum DependencyType
            {
                None = 0,
                SolutionInternal = 1,
                Published = 2,
                Unpublished = 4
            }
            public enum RequiredComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402,
                EntityAnalyticsConfiguration = 430,
                AttributeImageConfiguration = 431,
                EntityImageConfiguration = 432
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dependencyfeature")]
    public class DependencyFeature : Entity
    {
        public const string EntityLogicalName = "dependencyfeature";
        public DependencyFeature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencyfeatureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencyfeatureid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? DependencyFeatureId = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? DependencyFeatureIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dependencynode")]
    public class DependencyNode : Entity
    {
        public const string EntityLogicalName = "dependencynode";
        public DependencyNode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencynodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencynodeid"] = value;
            }
        }

        public readonly EntityReference TopSolutionId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference BaseSolutionId = null;

        public readonly Guid? ObjectId = null;

        public readonly Guid? DependencyNodeId = null;

        public readonly OptionSetValue ComponentType = null;

        public readonly double? IntroducedVersion = null;

        public readonly Guid? ParentId = null;

        public readonly bool? IsSharedComponent = null;

        public new static class Options
        {
            public enum ComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402,
                EntityAnalyticsConfiguration = 430,
                AttributeImageConfiguration = 431,
                EntityImageConfiguration = 432
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("displaystring")]
    public class DisplayString : Entity
    {
        public const string EntityLogicalName = "displaystring";
        public DisplayString() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("displaystringid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["displaystringid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? LanguageCode = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string CustomComment = null;

        public readonly Guid? DisplayStringId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? DisplayStringIdUnique = null;

        public readonly Guid? SolutionId = null;

        public readonly string CustomDisplayString = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? FormatParameters = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string DisplayStringKey = null;

        public readonly string PublishedDisplayString = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("displaystringmap")]
    public class DisplayStringMap : Entity
    {
        public const string EntityLogicalName = "displaystringmap";
        public DisplayStringMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("displaystringmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["displaystringmapid"] = value;
            }
        }

        public readonly Guid? DisplayStringId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? DisplayStringMapId = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string ObjectTypeCode = null;

        public readonly Guid? DisplayStringMapIdUnique = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("documentindex")]
    public class DocumentIndex : Entity
    {
        public const string EntityLogicalName = "documentindex";
        public DocumentIndex() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("documentindexid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["documentindexid"] = value;
            }
        }

        public readonly string KeyWords = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string Number = null;

        public readonly bool? IsLatestVersion = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? DocumentIndexId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference SubjectId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly OptionSetValue DocumentTypeCode = null;

        public readonly EntityReference DocumentId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? IsPublished = null;

        public readonly string SearchText = null;

        public readonly string Location = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum DocumentTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("documenttemplate")]
    public class DocumentTemplate : Entity
    {
        public const string EntityLogicalName = "documenttemplate";
        public DocumentTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("documenttemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["documenttemplateid"] = value;
            }
        }

        public readonly bool? Status = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string AssociatedEntityTypeCode = null;

        public readonly int? LanguageCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? VersionNumber = null;

        public readonly OptionSetValue DocumentType = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string ClientData = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Content = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? DocumentTemplateId = null;

        public readonly string Description = null;

        public new static class Options
        {
            public enum AssociatedEntityTypeCode
            {

            }
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("duplicaterecord")]
    public class DuplicateRecord : Entity
    {
        public const string EntityLogicalName = "duplicaterecord";
        public DuplicateRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateid"] = value;
            }
        }

        public readonly Guid? DuplicateId = null;

        public readonly EntityReference DuplicateRecordId = null;

        public readonly EntityReference AsyncOperationId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly Guid? OwningUser = null;

        public readonly EntityReference DuplicateRuleId = null;

        public readonly EntityReference BaseRecordId = null;

        public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("duplicaterule")]
    public class DuplicateRule : Entity
    {
        public const string EntityLogicalName = "duplicaterule";
        public DuplicateRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateruleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string MatchingEntityMatchCodeTable = null;

        public readonly string Description = null;

        public readonly string BaseEntityName = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string MatchingEntityName = null;

        public readonly Guid? DuplicateRuleId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly string BaseEntityMatchCodeTable = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsCaseSensitive = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue BaseEntityTypeCode = null;

        public readonly bool? ExcludeInactiveRecords = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly OptionSetValue MatchingEntityTypeCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Inactive = 0,
                Active = 1
            }
            public enum BaseEntityTypeCode
            {
                QueueMemberCount = 2024,
                DocumentSuggestions = 1189,
                RecurrenceRule = 4250,
                Queue = 2020,
                QueueItem = 2029,
                QueueItemCount = 2023,
                RecurringAppointment = 4251,
                RelationshipRoleMap = 4501,
                ReplicationBacklog = 1140,
                Report = 9100,
                RelationshipEntity = 9813,
                RelationshipAttribute = 9814,
                RelationshipRole = 4500,
                QuarterlyFiscalCalendar = 2002,
                PrincipalSyncAttributeMap = 1404,
                Privilege = 1023,
                PrivilegeObjectTypeCode = 31,
                PostRegarding = 8002,
                PostRole = 8001,
                FieldSharing = 44,
                ProcessSession = 4710,
                ProvisionLanguageForUser = 10013,
                Publisher = 7101,
                PublisherAddress = 7102,
                ProcessStage = 4724,
                ProcessStageParameter = 10035,
                ProcessTrigger = 4712,
                RollupProperties = 9510,
                RoutingRuleSet = 8181,
                RuleItem = 8199,
                RoleTemplate = 1037,
                RollupField = 9604,
                RollupJob = 9511,
                RuntimeDependency = 7200,
                Fundraiser = 10138,
                Idea = 10142,
                Product = 10144,
                Challenge = 10140,
                ChallengeManagementProcess = 10141,
                Donation = 10137,
                SecurityRole = 1036,
                ReportVisibility = 9103,
                RevokeInheritedAccessRecordsTracker = 90001,
                RibbonClientMetadata = 4579,
                ReportRelatedCategory = 9102,
                ReportRelatedEntity = 9101,
                ReportLink = 9104,
                RibbonCommand = 1116,
                RibbonMetadataToProcess = 9880,
                RibbonRule = 1117,
                RibbonTabToCommandMapping = 1113,
                RibbonContextGroup = 1115,
                ApplicationRibbons = 1120,
                RibbonDifference = 1130,
                NavigationSetting = 9900,
                Autonumber = 10105,
                IdeaToProjectBusinessProcess = 10139,
                BotContent = 10040,
                MultiEntitySearch = 9910,
                MultiSelectOptionValue = 9912,
                CustomOrder = 10103,
                Notification = 4110,
                OfficeDocument = 4490,
                OfficeGraphDocument = 9950,
                CustomOrderDetails = 10152,
                CustomOrderSummary = 10154,
                NewProcess = 950,
                Tour = 10039,
                RichTextAttachment = 10078,
                ServiceConfiguration = 10051,
                SLAKPI = 10052,
                OnlineShopperIntention = 10151,
                PMInferredTask = 10093,
                PMRecording = 10094,
                SolutionComponentDataSource = 10012,
                SolutionHealthRuleSet = 10101,
                SolutionHistory = 10003,
                SolutionHistoryDataSource = 10004,
                SolutionComponentSummary = 10011,
                SolutionHealthRule = 10099,
                SolutionHealthRuleArgument = 10100,
                ListValueMapping = 4418,
                PlugInAssembly = 4605,
                PlugInTraceLog = 4619,
                PDFSetting = 10049,
                PersonalDocumentTemplate = 9941,
                PhoneCall = 4210,
                PlugInType = 4602,
                Comment = 8005,
                Follow = 8003,
                Like = 8006,
                PlugInTypeStatistic = 4603,
                Position = 50,
                Post = 8000,
                PartnerApplication = 1095,
                OrganizationDataSyncSubscription = 10075,
                OrganizationDataSyncSubscriptionEntity = 10076,
                OrganizationSetting = 10029,
                OfflineCommandDefinition = 9870,
                OptionSet = 9809,
                Organization = 1019,
                OrganizationStatistic = 4708,
                Owner = 7,
                OwnerMapping = 4420,
                Package = 10007,
                OrganizationUI = 1021,
                OrganizationInsightsMetric = 9699,
                OrganizationInsightsNotification = 9690,
                Territory = 2013,
                TextAnalyticsEntityMapping = 9945,
                Theme = 2015,
                TeamSyncAttributeMappingProfiles = 1403,
                TeamTemplate = 92,
                EmailTemplate = 2010,
                TimeStampDateMapping = 9932,
                TraceAssociation = 8051,
                Trace = 8050,
                TraceRegarding = 8052,
                TimeZoneDefinition = 4810,
                TimeZoneLocalizedName = 4812,
                TimeZoneRule = 4811,
                TeamProfiles = 1203,
                SystemApplicationMetadata = 7000,
                SystemForm = 1030,
                User = 8,
                SyncAttributeMapping = 1401,
                SyncAttributeMappingProfile = 1400,
                SyncError = 9869,
                SystemUserAuthorizationChangeTracker = 60,
                Task = 4212,
                Team = 9,
                TeamMobileOfflineProfileMembership = 10073,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserManagerMap = 51,
                SystemUserPrincipal = 14,
                VirtualEntityMetadata = 10072,
                WebResource = 9333,
                WebWizard = 4800,
                UserChart = 1112,
                UserSearchFacet = 52,
                UserSettings = 150,
                WebWizardAccessPrivilege = 4803,
                ProcessDependency = 4704,
                ProcessLog = 4706,
                WorkflowWaitSubscription = 4702,
                WizardPage = 4802,
                Process = 4703,
                WorkflowBinary = 10036,
                SavedView = 4230,
                TranslationProcess = 951,
                UnresolvedAddress = 2012,
                UntrackedEmail = 4220,
                Currency = 9105,
                TransformationMapping = 4426,
                TransformationParameterMapping = 4427,
                UserApplicationMetadata = 7001,
                UserDashboard = 1031,
                UserMapping = 2016,
                UserMobileOfflineProfileMembership = 10074,
                UserEntityInstanceData = 2501,
                UserEntityUISettings = 2500,
                UserFiscalCalendar = 1086,
                SemiannualFiscalCalendar = 2001,
                ServiceEndpoint = 4618,
                ServicePlan = 101,
                SdkMessageResponse = 4610,
                SdkMessageResponseField = 4611,
                SearchTelemetry = 10080,
                SettingDefinition = 10030,
                SharePointSite = 9502,
                SimilarityRule = 9951,
                SiteMap = 4709,
                SharePointData = 9509,
                SharepointDocument = 9507,
                DocumentLocation = 9508,
                SdkMessageRequestField = 4614,
                SavedOrganizationInsightsConfiguration = 1309,
                View = 1039,
                SystemChart = 1111,
                Reservation = 10147,
                Review = 10148,
                TeamProject = 10143,
                SdkMessage = 4606,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequest = 4609,
                SdkMessageFilter = 4607,
                SdkMessagePair = 4613,
                SdkMessageProcessingStep = 4608,
                Subscription = 29,
                SubscriptionClients = 1072,
                SubscriptionManuallyTrackedObject = 37,
                StatusMap = 1075,
                StringMap = 1043,
                Subject = 129,
                SubscriptionStatisticOffline = 45,
                SubscriptionSynchronizationInformation = 33,
                TrackingInformationForDeletedEntities = 35,
                SuggestionCardTemplate = 1190,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionSyncEntryOutlook = 48,
                StageSolutionUpload = 10009,
                SocialActivity = 4216,
                SocialInsightsConfiguration = 1300,
                SocialProfile = 99,
                SLA = 9750,
                SLAItem = 9751,
                SLAKPIInstance = 9752,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                SolutionComponentRelationshipConfiguration = 10002,
                SolutionHistoryData = 9890,
                SolutionComponent = 7103,
                SolutionComponentAttributeConfiguration = 10000,
                SolutionComponentConfiguration = 10001,
                Contact = 2,
                ConversationTranscript = 10041,
                RecordCreationAndUpdateRule = 9300,
                ConnectionRole = 3231,
                ConnectionRoleObjectTypeCode = 3233,
                Connector = 372,
                RecordCreationAndUpdateRuleItem = 9301,
                CustomControl = 9753,
                CustomControlDefaultConfig = 9755,
                CustomControlResource = 9754,
                CustomAPI = 10069,
                CustomAPIRequestParameter = 10070,
                CustomAPIResponseProperty = 10071,
                ConnectionReference = 10037,
                Category = 9959,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRule = 9400,
                CascadeGrantRevokeAccessVersionTracker = 10019,
                Catalog = 10066,
                CatalogAssignment = 10067,
                ChannelAccessProfileRuleItem = 9401,
                ColumnMapping = 4417,
                ProcessConfiguration = 9650,
                Connection = 3234,
                ChannelProperty = 1236,
                ChannelPropertyGroup = 1234,
                ClientUpdate = 36,
                DuplicateRuleCondition = 4416,
                Email = 4202,
                EmailHash = 4023,
                DocumentTemplate = 9940,
                DuplicateRecord = 4415,
                DuplicateDetectionRule = 4414,
                EmailSearch = 4299,
                EntityAnalyticsConfig = 430,
                VirtualEntityDataProvider = 78,
                VirtualEntityDataSource = 85,
                EmailServerProfile = 9605,
                EmailSignature = 9997,
                Entity = 9800,
                IndexedArticle = 126,
                DataLakeFolderPermission = 10015,
                DataLakeWorkspace = 10016,
                DataLakeWorkspacePermission = 10017,
                Address = 1071,
                CustomerRelationship = 4502,
                DataLakeFolder = 10014,
                DataPerformanceDashboard = 4450,
                DependencyNode = 7106,
                DisplayString = 4102,
                DisplayStringMap = 4101,
                DelveActionHub = 9961,
                Dependency = 7105,
                DependencyFeature = 7108,
                ApplicationUser = 10021,
                ModelDrivenApp = 9006,
                AppModuleComponent = 9007,
                AppConfigMaster = 9011,
                ModelDrivenAppElement = 10024,
                ApplicationFile = 4707,
                ModelDrivenAppComponentNodeSEdge = 10025,
                AppModuleMetadataAsyncOperation = 8702,
                AppModuleRoles = 9009,
                Notification1 = 10077,
                ModelDrivenAppComponentNode = 10026,
                AppModuleMetadata = 8700,
                AppModuleMetadataDependency = 8701,
                AppConfigurationInstance = 9013,
                ActionCardUserSettings = 9973,
                ActionCardUserState = 9968,
                ActivityFileAttachment = 10050,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCard = 9962,
                Attachment = 1001,
                Note = 5,
                AnnualFiscalCalendar = 2000,
                AppConfiguration = 9012,
                ActivityParty = 135,
                Activity = 4200,
                AdvancedSimilarityRule = 9949,
                BusinessUnit = 10,
                BusinessUnitMap = 6,
                Announcement = 132,
                BulkDeleteOperation = 4424,
                BusinessDataLocalizedLabel = 4232,
                BusinessProcessFlowInstance = 4725,
                Calendar = 4003,
                CanvasAppExtendedMetadata = 10031,
                ActionCardType = 9983,
                CascadeGrantRevokeAccessRecordsTracker = 10018,
                CalendarRule = 4004,
                CallbackRegistration = 301,
                CanvasApp = 300,
                BulkDeleteFailure = 4425,
                SystemJob = 4700,
                Attachment1 = 1002,
                Attribute = 9808,
                Appointment = 4201,
                ModelDrivenAppSetting = 10027,
                ModelDrivenAppUserSetting = 10028,
                ImageAttributeConfiguration = 431,
                AzureServiceConnection = 9936,
                Chatbot = 10042,
                ChatbotSubcomponent = 10043,
                AttributeMap = 4601,
                Auditing = 4567,
                AuthorizationServer = 1094,
                AIBuilderDataset = 10081,
                AIBuilderDatasetFile = 10082,
                AIBuilderDatasetRecord = 10083,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfileItemAssociation = 9868,
                MonthlyFiscalCalendar = 2003,
                AIBuilderDatasetsContainer = 10084,
                AIFormProcessingDocument = 10087,
                AIModel = 401,
                AIObjectDetectionImage = 10088,
                AIBuilderFile = 10085,
                AIBuilderFileAttachedData = 10086,
                AIConfiguration = 402,
                MobileOfflineProfile = 9866,
                LookupMapping = 4419,
                Mailbox = 9606,
                MailboxStatistics = 9607,
                Letter = 4207,
                License = 2027,
                LocalConfigStore = 9201,
                MailboxTrackingCategory = 9609,
                ManagedProperty = 9812,
                MetadataDifference = 4231,
                GoalMetric = 9603,
                MailboxAutoTrackingFolder = 9608,
                MailMergeTemplate = 9106,
                ManagedIdentity = 10065,
                KnowledgePersonalization = 10060,
                KnowledgeArticleImage = 10056,
                KnowledgeArticleTemplate = 10061,
                HelpPage = 10038,
                KnowledgeArticleLanguageSetting = 10059,
                SearchProvider = 10055,
                KnowledgeInteractionInsight = 10057,
                NonRelationalDataSource = 10079,
                ObjectDetectionProduct = 10150,
                ODataV4DataSource = 10032,
                KnowledgeSearchPersonalFilterConfig = 10062,
                KnowledgeSearchFilter = 10063,
                KnowledgeSearchInsight = 10058,
                HealthcareFeedback = 10149,
                AITemplate = 400,
                AnalysisComponent = 10095,
                AnalysisJob = 10096,
                AIObjectDetectionLabel = 10089,
                AIObjectDetectionBoundingBox = 10090,
                AIObjectDetectionImageMapping = 10091,
                AnalysisResult = 10097,
                Dataflow = 418,
                KnowledgeFederatedArticle = 10053,
                KnowledgeFederatedArticleIncident = 10054,
                AnalysisResultDetail = 10098,
                ComponentLayer = 10005,
                ComponentLayerDataSource = 10006,
                FilterTemplate = 30,
                FixedMonthlyFiscalCalendar = 2004,
                FlowMachine = 10033,
                FieldPermission = 1201,
                FieldSecurityProfile = 1200,
                FileAttachment = 55,
                FlowMachineGroup = 10034,
                RollupQuery = 9602,
                HierarchyRule = 8840,
                HierarchySecurityConfiguration = 9919,
                FlowSession = 4720,
                GlobalSearchConfiguration = 54,
                Goal = 9600,
                Feedback = 9958,
                EntityRelationship = 9811,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                EntityImageConfiguration = 432,
                EntityKey = 9810,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                ExternalParty = 3008,
                ExternalPartyItem = 9987,
                Fax = 4204,
                ExpanderEvent = 4711,
                ExpiredProcess = 955,
                ExportSolutionUpload = 10010,
                ArticleComment = 1082,
                ArticleTemplate = 1016,
                KeyVaultReference = 10064,
                InvalidDependency = 7107,
                ISVConfig = 4705,
                Article = 127,
                KnowledgeArticle = 9953,
                KnowledgeSearchModel = 9947,
                Language = 9957,
                LanguageProvisioningState = 9875,
                KnowledgeArticleCategory = 9960,
                KnowledgeArticleViews = 9955,
                KnowledgeBaseRecord = 9930,
                InterProcessLock = 4011,
                ImportData = 4413,
                ImportEntityMapping = 4428,
                ImportSourceFile = 4412,
                HolidayWrapper = 9996,
                ImageDescriptor = 1007,
                DataImport = 4410,
                ImportJob = 9107,
                InteractionForEmail = 9986,
                InternalAddress = 1003,
                InternalCatalogAssignment = 10068,
                ImportLog = 4423,
                DataMap = 4411,
                IntegrationStatus = 3000
            }
            public enum StatusCode
            {
                Unpublished = 0,
                Publishing = 1,
                Published = 2
            }
            public enum MatchingEntityTypeCode
            {
                QueueMemberCount = 2024,
                DocumentSuggestions = 1189,
                RecurrenceRule = 4250,
                Queue = 2020,
                QueueItem = 2029,
                QueueItemCount = 2023,
                RecurringAppointment = 4251,
                RelationshipRoleMap = 4501,
                ReplicationBacklog = 1140,
                Report = 9100,
                RelationshipEntity = 9813,
                RelationshipAttribute = 9814,
                RelationshipRole = 4500,
                QuarterlyFiscalCalendar = 2002,
                PrincipalSyncAttributeMap = 1404,
                Privilege = 1023,
                PrivilegeObjectTypeCode = 31,
                PostRegarding = 8002,
                PostRole = 8001,
                FieldSharing = 44,
                ProcessSession = 4710,
                ProvisionLanguageForUser = 10013,
                Publisher = 7101,
                PublisherAddress = 7102,
                ProcessStage = 4724,
                ProcessStageParameter = 10035,
                ProcessTrigger = 4712,
                RollupProperties = 9510,
                RoutingRuleSet = 8181,
                RuleItem = 8199,
                RoleTemplate = 1037,
                RollupField = 9604,
                RollupJob = 9511,
                RuntimeDependency = 7200,
                Fundraiser = 10138,
                Idea = 10142,
                Product = 10144,
                Challenge = 10140,
                ChallengeManagementProcess = 10141,
                Donation = 10137,
                SecurityRole = 1036,
                ReportVisibility = 9103,
                RevokeInheritedAccessRecordsTracker = 90001,
                RibbonClientMetadata = 4579,
                ReportRelatedCategory = 9102,
                ReportRelatedEntity = 9101,
                ReportLink = 9104,
                RibbonCommand = 1116,
                RibbonMetadataToProcess = 9880,
                RibbonRule = 1117,
                RibbonTabToCommandMapping = 1113,
                RibbonContextGroup = 1115,
                ApplicationRibbons = 1120,
                RibbonDifference = 1130,
                NavigationSetting = 9900,
                Autonumber = 10105,
                IdeaToProjectBusinessProcess = 10139,
                BotContent = 10040,
                MultiEntitySearch = 9910,
                MultiSelectOptionValue = 9912,
                CustomOrder = 10103,
                Notification = 4110,
                OfficeDocument = 4490,
                OfficeGraphDocument = 9950,
                CustomOrderDetails = 10152,
                CustomOrderSummary = 10154,
                NewProcess = 950,
                Tour = 10039,
                RichTextAttachment = 10078,
                ServiceConfiguration = 10051,
                SLAKPI = 10052,
                OnlineShopperIntention = 10151,
                PMInferredTask = 10093,
                PMRecording = 10094,
                SolutionComponentDataSource = 10012,
                SolutionHealthRuleSet = 10101,
                SolutionHistory = 10003,
                SolutionHistoryDataSource = 10004,
                SolutionComponentSummary = 10011,
                SolutionHealthRule = 10099,
                SolutionHealthRuleArgument = 10100,
                ListValueMapping = 4418,
                PlugInAssembly = 4605,
                PlugInTraceLog = 4619,
                PDFSetting = 10049,
                PersonalDocumentTemplate = 9941,
                PhoneCall = 4210,
                PlugInType = 4602,
                Comment = 8005,
                Follow = 8003,
                Like = 8006,
                PlugInTypeStatistic = 4603,
                Position = 50,
                Post = 8000,
                PartnerApplication = 1095,
                OrganizationDataSyncSubscription = 10075,
                OrganizationDataSyncSubscriptionEntity = 10076,
                OrganizationSetting = 10029,
                OfflineCommandDefinition = 9870,
                OptionSet = 9809,
                Organization = 1019,
                OrganizationStatistic = 4708,
                Owner = 7,
                OwnerMapping = 4420,
                Package = 10007,
                OrganizationUI = 1021,
                OrganizationInsightsMetric = 9699,
                OrganizationInsightsNotification = 9690,
                Territory = 2013,
                TextAnalyticsEntityMapping = 9945,
                Theme = 2015,
                TeamSyncAttributeMappingProfiles = 1403,
                TeamTemplate = 92,
                EmailTemplate = 2010,
                TimeStampDateMapping = 9932,
                TraceAssociation = 8051,
                Trace = 8050,
                TraceRegarding = 8052,
                TimeZoneDefinition = 4810,
                TimeZoneLocalizedName = 4812,
                TimeZoneRule = 4811,
                TeamProfiles = 1203,
                SystemApplicationMetadata = 7000,
                SystemForm = 1030,
                User = 8,
                SyncAttributeMapping = 1401,
                SyncAttributeMappingProfile = 1400,
                SyncError = 9869,
                SystemUserAuthorizationChangeTracker = 60,
                Task = 4212,
                Team = 9,
                TeamMobileOfflineProfileMembership = 10073,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserManagerMap = 51,
                SystemUserPrincipal = 14,
                VirtualEntityMetadata = 10072,
                WebResource = 9333,
                WebWizard = 4800,
                UserChart = 1112,
                UserSearchFacet = 52,
                UserSettings = 150,
                WebWizardAccessPrivilege = 4803,
                ProcessDependency = 4704,
                ProcessLog = 4706,
                WorkflowWaitSubscription = 4702,
                WizardPage = 4802,
                Process = 4703,
                WorkflowBinary = 10036,
                SavedView = 4230,
                TranslationProcess = 951,
                UnresolvedAddress = 2012,
                UntrackedEmail = 4220,
                Currency = 9105,
                TransformationMapping = 4426,
                TransformationParameterMapping = 4427,
                UserApplicationMetadata = 7001,
                UserDashboard = 1031,
                UserMapping = 2016,
                UserMobileOfflineProfileMembership = 10074,
                UserEntityInstanceData = 2501,
                UserEntityUISettings = 2500,
                UserFiscalCalendar = 1086,
                SemiannualFiscalCalendar = 2001,
                ServiceEndpoint = 4618,
                ServicePlan = 101,
                SdkMessageResponse = 4610,
                SdkMessageResponseField = 4611,
                SearchTelemetry = 10080,
                SettingDefinition = 10030,
                SharePointSite = 9502,
                SimilarityRule = 9951,
                SiteMap = 4709,
                SharePointData = 9509,
                SharepointDocument = 9507,
                DocumentLocation = 9508,
                SdkMessageRequestField = 4614,
                SavedOrganizationInsightsConfiguration = 1309,
                View = 1039,
                SystemChart = 1111,
                Reservation = 10147,
                Review = 10148,
                TeamProject = 10143,
                SdkMessage = 4606,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequest = 4609,
                SdkMessageFilter = 4607,
                SdkMessagePair = 4613,
                SdkMessageProcessingStep = 4608,
                Subscription = 29,
                SubscriptionClients = 1072,
                SubscriptionManuallyTrackedObject = 37,
                StatusMap = 1075,
                StringMap = 1043,
                Subject = 129,
                SubscriptionStatisticOffline = 45,
                SubscriptionSynchronizationInformation = 33,
                TrackingInformationForDeletedEntities = 35,
                SuggestionCardTemplate = 1190,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionSyncEntryOutlook = 48,
                StageSolutionUpload = 10009,
                SocialActivity = 4216,
                SocialInsightsConfiguration = 1300,
                SocialProfile = 99,
                SLA = 9750,
                SLAItem = 9751,
                SLAKPIInstance = 9752,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                SolutionComponentRelationshipConfiguration = 10002,
                SolutionHistoryData = 9890,
                SolutionComponent = 7103,
                SolutionComponentAttributeConfiguration = 10000,
                SolutionComponentConfiguration = 10001,
                Contact = 2,
                ConversationTranscript = 10041,
                RecordCreationAndUpdateRule = 9300,
                ConnectionRole = 3231,
                ConnectionRoleObjectTypeCode = 3233,
                Connector = 372,
                RecordCreationAndUpdateRuleItem = 9301,
                CustomControl = 9753,
                CustomControlDefaultConfig = 9755,
                CustomControlResource = 9754,
                CustomAPI = 10069,
                CustomAPIRequestParameter = 10070,
                CustomAPIResponseProperty = 10071,
                ConnectionReference = 10037,
                Category = 9959,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRule = 9400,
                CascadeGrantRevokeAccessVersionTracker = 10019,
                Catalog = 10066,
                CatalogAssignment = 10067,
                ChannelAccessProfileRuleItem = 9401,
                ColumnMapping = 4417,
                ProcessConfiguration = 9650,
                Connection = 3234,
                ChannelProperty = 1236,
                ChannelPropertyGroup = 1234,
                ClientUpdate = 36,
                DuplicateRuleCondition = 4416,
                Email = 4202,
                EmailHash = 4023,
                DocumentTemplate = 9940,
                DuplicateRecord = 4415,
                DuplicateDetectionRule = 4414,
                EmailSearch = 4299,
                EntityAnalyticsConfig = 430,
                VirtualEntityDataProvider = 78,
                VirtualEntityDataSource = 85,
                EmailServerProfile = 9605,
                EmailSignature = 9997,
                Entity = 9800,
                IndexedArticle = 126,
                DataLakeFolderPermission = 10015,
                DataLakeWorkspace = 10016,
                DataLakeWorkspacePermission = 10017,
                Address = 1071,
                CustomerRelationship = 4502,
                DataLakeFolder = 10014,
                DataPerformanceDashboard = 4450,
                DependencyNode = 7106,
                DisplayString = 4102,
                DisplayStringMap = 4101,
                DelveActionHub = 9961,
                Dependency = 7105,
                DependencyFeature = 7108,
                ApplicationUser = 10021,
                ModelDrivenApp = 9006,
                AppModuleComponent = 9007,
                AppConfigMaster = 9011,
                ModelDrivenAppElement = 10024,
                ApplicationFile = 4707,
                ModelDrivenAppComponentNodeSEdge = 10025,
                AppModuleMetadataAsyncOperation = 8702,
                AppModuleRoles = 9009,
                Notification1 = 10077,
                ModelDrivenAppComponentNode = 10026,
                AppModuleMetadata = 8700,
                AppModuleMetadataDependency = 8701,
                AppConfigurationInstance = 9013,
                ActionCardUserSettings = 9973,
                ActionCardUserState = 9968,
                ActivityFileAttachment = 10050,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCard = 9962,
                Attachment = 1001,
                Note = 5,
                AnnualFiscalCalendar = 2000,
                AppConfiguration = 9012,
                ActivityParty = 135,
                Activity = 4200,
                AdvancedSimilarityRule = 9949,
                BusinessUnit = 10,
                BusinessUnitMap = 6,
                Announcement = 132,
                BulkDeleteOperation = 4424,
                BusinessDataLocalizedLabel = 4232,
                BusinessProcessFlowInstance = 4725,
                Calendar = 4003,
                CanvasAppExtendedMetadata = 10031,
                ActionCardType = 9983,
                CascadeGrantRevokeAccessRecordsTracker = 10018,
                CalendarRule = 4004,
                CallbackRegistration = 301,
                CanvasApp = 300,
                BulkDeleteFailure = 4425,
                SystemJob = 4700,
                Attachment1 = 1002,
                Attribute = 9808,
                Appointment = 4201,
                ModelDrivenAppSetting = 10027,
                ModelDrivenAppUserSetting = 10028,
                ImageAttributeConfiguration = 431,
                AzureServiceConnection = 9936,
                Chatbot = 10042,
                ChatbotSubcomponent = 10043,
                AttributeMap = 4601,
                Auditing = 4567,
                AuthorizationServer = 1094,
                AIBuilderDataset = 10081,
                AIBuilderDatasetFile = 10082,
                AIBuilderDatasetRecord = 10083,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfileItemAssociation = 9868,
                MonthlyFiscalCalendar = 2003,
                AIBuilderDatasetsContainer = 10084,
                AIFormProcessingDocument = 10087,
                AIModel = 401,
                AIObjectDetectionImage = 10088,
                AIBuilderFile = 10085,
                AIBuilderFileAttachedData = 10086,
                AIConfiguration = 402,
                MobileOfflineProfile = 9866,
                LookupMapping = 4419,
                Mailbox = 9606,
                MailboxStatistics = 9607,
                Letter = 4207,
                License = 2027,
                LocalConfigStore = 9201,
                MailboxTrackingCategory = 9609,
                ManagedProperty = 9812,
                MetadataDifference = 4231,
                GoalMetric = 9603,
                MailboxAutoTrackingFolder = 9608,
                MailMergeTemplate = 9106,
                ManagedIdentity = 10065,
                KnowledgePersonalization = 10060,
                KnowledgeArticleImage = 10056,
                KnowledgeArticleTemplate = 10061,
                HelpPage = 10038,
                KnowledgeArticleLanguageSetting = 10059,
                SearchProvider = 10055,
                KnowledgeInteractionInsight = 10057,
                NonRelationalDataSource = 10079,
                ObjectDetectionProduct = 10150,
                ODataV4DataSource = 10032,
                KnowledgeSearchPersonalFilterConfig = 10062,
                KnowledgeSearchFilter = 10063,
                KnowledgeSearchInsight = 10058,
                HealthcareFeedback = 10149,
                AITemplate = 400,
                AnalysisComponent = 10095,
                AnalysisJob = 10096,
                AIObjectDetectionLabel = 10089,
                AIObjectDetectionBoundingBox = 10090,
                AIObjectDetectionImageMapping = 10091,
                AnalysisResult = 10097,
                Dataflow = 418,
                KnowledgeFederatedArticle = 10053,
                KnowledgeFederatedArticleIncident = 10054,
                AnalysisResultDetail = 10098,
                ComponentLayer = 10005,
                ComponentLayerDataSource = 10006,
                FilterTemplate = 30,
                FixedMonthlyFiscalCalendar = 2004,
                FlowMachine = 10033,
                FieldPermission = 1201,
                FieldSecurityProfile = 1200,
                FileAttachment = 55,
                FlowMachineGroup = 10034,
                RollupQuery = 9602,
                HierarchyRule = 8840,
                HierarchySecurityConfiguration = 9919,
                FlowSession = 4720,
                GlobalSearchConfiguration = 54,
                Goal = 9600,
                Feedback = 9958,
                EntityRelationship = 9811,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                EntityImageConfiguration = 432,
                EntityKey = 9810,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                ExternalParty = 3008,
                ExternalPartyItem = 9987,
                Fax = 4204,
                ExpanderEvent = 4711,
                ExpiredProcess = 955,
                ExportSolutionUpload = 10010,
                ArticleComment = 1082,
                ArticleTemplate = 1016,
                KeyVaultReference = 10064,
                InvalidDependency = 7107,
                ISVConfig = 4705,
                Article = 127,
                KnowledgeArticle = 9953,
                KnowledgeSearchModel = 9947,
                Language = 9957,
                LanguageProvisioningState = 9875,
                KnowledgeArticleCategory = 9960,
                KnowledgeArticleViews = 9955,
                KnowledgeBaseRecord = 9930,
                InterProcessLock = 4011,
                ImportData = 4413,
                ImportEntityMapping = 4428,
                ImportSourceFile = 4412,
                HolidayWrapper = 9996,
                ImageDescriptor = 1007,
                DataImport = 4410,
                ImportJob = 9107,
                InteractionForEmail = 9986,
                InternalAddress = 1003,
                InternalCatalogAssignment = 10068,
                ImportLog = 4423,
                DataMap = 4411,
                IntegrationStatus = 3000
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("duplicaterulecondition")]
    public class DuplicateRuleCondition : Entity
    {
        public const string EntityLogicalName = "duplicaterulecondition";
        public DuplicateRuleCondition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateruleconditionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateruleconditionid"] = value;
            }
        }

        public readonly Guid? OwningUser = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly bool? IgnoreBlankValues = null;

        public readonly string BaseAttributeName = null;

        public readonly string MatchingAttributeName = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? OperatorParam = null;

        public readonly Guid? DuplicateRuleConditionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly OptionSetValue OperatorCode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum OperatorCode
            {
                ExactMatch = 0,
                SameFirstCharacters = 1,
                SameLastCharacters = 2,
                SameDate = 3,
                SameDateAndTime = 4,
                ExactMatchPickListLabel = 5,
                ExactMatchPickListValue = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("email")]
    public class Email : Entity
    {
        public const string EntityLogicalName = "email";
        public Email() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly string ReservedForInternalUse = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly EntityReference SLAId = null;

        public readonly EntityReference ParentActivityId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly DateTime? SentOn = null;

        public readonly string ActivityAdditionalParams = null;

        public readonly EntityReference ReceivingMailboxId = null;

        public readonly string MimeType = null;

        public readonly DateTime? DelayedEmailSendTime = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? ActivityId = null;

        public readonly EntityReference EmailSender = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly string SubmittedBy = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? LinksClickedCount = null;

        public readonly EntityCollection to = null;

        public readonly OptionSetValue Notifications = null;

        public readonly string TrackingToken = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly bool? IsEmailReminderSet = null;

        public readonly EntityCollection bcc = null;

        public readonly bool? ReadReceiptRequested = null;

        public readonly EntityReference SendersAccount = null;

        public readonly DateTime? LastOpenedTime = null;

        public readonly int? AttachmentCount = null;

        public readonly decimal? ExchangeRate = null;

        public readonly int? BaseConversationIndexHash = null;

        public readonly Guid? ConversationTrackingId = null;

        public readonly EntityReference SenderMailboxId = null;

        public readonly Guid? MessageIdDupCheck = null;

        public readonly bool? IsBilled = null;

        public readonly DateTime? CreatedOn = null;

        public readonly OptionSetValue EmailReminderStatus = null;

        public readonly EntityReference TemplateId = null;

        public readonly bool? IsEmailFollowed = null;

        public readonly string Category = null;

        public readonly int? ReplyCount = null;

        public readonly DateTime? ActualStart = null;

        public readonly OptionSetValue EmailReminderType = null;

        public readonly int? OnHoldTime = null;

        public readonly string Description = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly bool? IsRegularActivity = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Sender = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string TraversedPath = null;

        public readonly DateTime? SortDate = null;

        public readonly EntityReference OwningUser = null;

        public readonly int? OpenCount = null;

        public readonly Guid? ReminderActionCardId = null;

        public readonly int? IsUnsafe = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityCollection from = null;

        public readonly bool? DeliveryReceiptRequested = null;

        public readonly Guid? ProcessId = null;

        public readonly OptionSetValue DeliveryPriorityCode = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string ActivityTypeCode = null;

        public readonly DateTime? PostponeEmailProcessingUntil = null;

        public readonly DateTime? EmailReminderExpiryTime = null;

        public readonly string EmailReminderText = null;

        public readonly EntityReference OwnerId = null;

        public readonly string InReplyTo = null;

        public readonly bool? Compressed = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly string ConversationIndex = null;

        public readonly Guid? EmailTrackingId = null;

        public readonly int? ActualDurationMinutes = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string Subcategory = null;

        public readonly string MessageId = null;

        public readonly bool? FollowEmailUserPreference = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly Guid? StageId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly int? AttachmentOpenCount = null;

        public readonly EntityReference CorrelatedActivityId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? DeliveryAttempts = null;

        public readonly string ToRecipients = null;

        public readonly int? VersionNumber = null;

        public readonly EntityCollection cc = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly bool? DirectionCode = null;

        public readonly EntityReference AcceptingEntityId = null;

        public readonly OptionSetValue CorrelationMethod = null;

        public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum Notifications
            {
                None = 0,
                TheMessageWasSavedAsAMicrosoftDynamics365EmailRecordButNotAllTheAttachmentsCouldBeSavedWithItAnAttachmentCannotBeSavedIfItIsBlockedOrIfItsFileTypeIsInvalid = 1,
                TruncatedBody = 2
            }
            public enum StatusCode
            {
                Draft = 1,
                Completed = 2,
                Sent = 3,
                Received = 4,
                Canceled = 5,
                PendingSend = 6,
                Sending = 7,
                Failed = 8
            }
            public enum EmailReminderStatus
            {
                NotSet = 0,
                ReminderSet = 1,
                ReminderExpired = 2,
                ReminderInvalid = 3
            }
            public enum EmailReminderType
            {
                IfIDoNotReceiveAReplyBy = 0,
                IfTheEmailIsNotOpenedBy = 1,
                RemindMeAnywaysAt = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum CorrelationMethod
            {
                None = 0,
                Skipped = 1,
                XHeader = 2,
                InReplyTo = 3,
                TrackingToken = 4,
                ConversationIndex = 5,
                SmartMatching = 6,
                CustomCorrelation = 7
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("emailhash")]
    public class EmailHash : Entity
    {
        public const string EntityLogicalName = "emailhash";
        public EmailHash() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailhashid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailhashid"] = value;
            }
        }

        public readonly int? Hash = null;

        public readonly Guid? OwningUser = null;

        public readonly EntityReference ActivityId = null;

        public readonly Guid? EmailHashId = null;

        public readonly int? VersionNumber = null;

        public readonly int? HashType = null;

        public readonly EntityReference OwnerId = null;

        public readonly Guid? OwningBusinessUnit = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("emailsearch")]
    public class EmailSearch : Entity
    {
        public const string EntityLogicalName = "emailsearch";
        public EmailSearch() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailsearchid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailsearchid"] = value;
            }
        }

        public readonly string EmailAddress = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ParentObjectId = null;

        public readonly Guid? EmailSearchId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("emailserverprofile")]
    public class EmailServerProfile : Entity
    {
        public const string EntityLogicalName = "emailserverprofile";
        public EmailServerProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailserverprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailserverprofileid"] = value;
            }
        }

        public readonly OptionSetValue LastAuthorizationStatus = null;

        public readonly bool? UseAutoDiscover = null;

        public readonly bool? IncomingUseSSL = null;

        public readonly int? IncomingPortNumber = null;

        public readonly OptionSetValue ServerType = null;

        public readonly string IncomingPassword = null;

        public readonly int? OutgoingPortNumber = null;

        public readonly string OutgoingUsername = null;

        public readonly OptionSetValue LastTestValidationStatus = null;

        public readonly string DefaultServerLocation = null;

        public readonly OptionSetValue LastTestExecutionStatus = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string IncomingServerLocation = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue OutgoingCredentialRetrieval = null;

        public readonly string OwnerEmailAddress = null;

        public readonly EntityReference keyvaultreferenceid = null;

        public readonly bool? OutgoingAutoGrantDelegateAccess = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsOauthClientSecretSet = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? EmailServerProfileId = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string Description = null;

        public readonly string LastTestResponse = null;

        public readonly bool? OutgoingUseSSL = null;

        public readonly EntityReference managedidentityid = null;

        public readonly bool? UseSameSettingsForOutgoingConnections = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string OauthClientId = null;

        public readonly string ExchangeOnlineTenantId = null;

        public readonly int? TimeoutMailboxConnectionAfterAmount = null;

        public readonly OptionSetValue IncomingAuthenticationProtocol = null;

        public readonly string OauthClientSecret = null;

        public readonly DateTime? LastTestStartTime = null;

        public readonly int? VersionNumber = null;

        public readonly string IncomingUserName = null;

        public readonly string LastCrmMessage = null;

        public readonly EntityReference IncomingPartnerApplication = null;

        public readonly int? MinPollingIntervalInMinutes = null;

        public readonly EntityReference OutgoingPartnerApplication = null;

        public readonly int? MaxConcurrentConnections = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly OptionSetValue ExchangeVersion = null;

        public readonly string OutgoingPassword = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? ProcessEmailsReceivedAfter = null;

        public readonly string EncodingCodePage = null;

        public readonly string EmailServerTypeName = null;

        public readonly int? LastTestTotalExecutionTime = null;

        public readonly string OutgoingServerLocation = null;

        public readonly bool? IsIncomingPasswordSet = null;

        public readonly OptionSetValue OutgoingAuthenticationProtocol = null;

        public readonly byte[] EntityImage = null;

        public readonly bool? MoveUndeliveredEmails = null;

        public readonly bool? OutgoingUseImpersonation = null;

        public readonly bool? TimeoutMailboxConnection = null;

        public readonly string AadResourceId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly bool? SendEmailAlert = null;

        public readonly bool? IncomingUseImpersonation = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly bool? IsOutgoingPasswordSet = null;

        public readonly bool? UseDefaultTenantId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue IncomingCredentialRetrieval = null;

        public readonly string LastTestRequest = null;

        public new static class Options
        {
            public enum LastAuthorizationStatus
            {
                Failure = 0,
                Success = 1
            }
            public enum ServerType
            {
                ExchangeServer = 0,
                OtherPOP3SMTP = 1,
                ExchangeServerHybrid = 2,
                ExchangeOnlineHybrid = 3,
                IMAPSMTP = 4
            }
            public enum LastTestValidationStatus
            {
                Failure = 0,
                Success = 1
            }
            public enum LastTestExecutionStatus
            {
                Failure = 0,
                Success = 1,
                Warning = 2
            }
            public enum OutgoingCredentialRetrieval
            {
                CredentialsSpecifiedByAUserOrQueue = 0,
                CredentialsSpecifiedInEmailServerProfile = 1,
                ServerToServerAuthentication = 2,
                WindowsIntegratedAuthentication = 3,
                WithoutCredentialsAnonymous = 4,
                GmailOAuth = 5,
                ExchangeHybridModernAuthHMA = 6,
                AzureActiveDirectoryOAuth = 7
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum IncomingAuthenticationProtocol
            {
                AutoDetect = 0,
                Negotiate = 1,
                NTLM = 2,
                Basic = 3,
                OAuth = 4
            }
            public enum ExchangeVersion
            {
                Exchange2007 = 0,
                Exchange2007SP1 = 1,
                Exchange2010 = 2,
                Exchange2010SP1 = 3,
                Exchange2010SP2 = 4,
                Exchange2013 = 5
            }
            public enum OutgoingAuthenticationProtocol
            {
                AutoDetect = 0,
                Negotiate = 1,
                NTLM = 2,
                Basic = 3,
                OAuth = 4
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum IncomingCredentialRetrieval
            {
                CredentialsSpecifiedByAUserOrQueue = 0,
                CredentialsSpecifiedInEmailServerProfile = 1,
                ServerToServerAuthentication = 2,
                WindowsIntegratedAuthentication = 3,
                WithoutCredentialsAnonymous = 4,
                GmailOAuth = 5,
                ExchangeHybridModernAuthHMA = 6,
                AzureActiveDirectoryOAuth = 7
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("emailsignature")]
    public class EmailSignature : Entity
    {
        public const string EntityLogicalName = "emailsignature";
        public EmailSignature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailsignatureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailsignatureid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwningUser = null;

        public readonly string SafeHtml = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly bool? IsCustomizable = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsPersonal = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string MimeType = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string Body = null;

        public readonly string PresentationXml = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly Guid? EmailSignatureId = null;

        public readonly int? GenerationTypeCode = null;

        public readonly int? LanguageCode = null;

        public readonly string Description = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }

    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entityanalyticsconfig")]
    public class EntityAnalyticsConfig : Entity
    {
        public const string EntityLogicalName = "entityanalyticsconfig";
        public EntityAnalyticsConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entityanalyticsconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entityanalyticsconfigid"] = value;
            }
        }

        public readonly Guid? EntityAnalyticsConfigId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference ParentEntityId = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? IsEnabledForTimeSeries = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsEnabledForADLS = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string ParentEntityLogicalName = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitydataprovider")]
    public class EntityDataProvider : Entity
    {
        public const string EntityLogicalName = "entitydataprovider";
        public EntityDataProvider() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitydataproviderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitydataproviderid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? OrganizationId = null;

        public readonly Guid? DeletePlugin = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? CreatePlugin = null;

        public readonly string DataSourceLogicalName = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsCustomizable = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? CreateMultiplePlugin = null;

        public readonly Guid? RetrieveEntityChangesPlugin = null;

        public readonly Guid? UpsertMultiplePlugin = null;

        public readonly Guid? UpdatePlugin = null;

        public readonly Guid? RetrieveMultiplePlugin = null;

        public readonly Guid? RetrievePlugin = null;

        public readonly Guid? UpsertPlugin = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? UpdateMultiplePlugin = null;

        public readonly string Description = null;

        public readonly Guid? EntityDataProviderId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? EntityDataProviderIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitydatasource")]
    public class EntityDataSource : Entity
    {
        public const string EntityLogicalName = "entitydatasource";
        public EntityDataSource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitydatasourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitydatasourceid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? OrganizationId = null;

        public readonly string IntroducedVersion = null;

        public readonly string ConnectionDefinitionSecrets = null;

        public readonly Guid? EntityDataSourceIdUnique = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string Description = null;

        public readonly string EntityName = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string ConnectionDefinition = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? EntityDataSourceId = null;

        public readonly EntityReference EntityDataProviderId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entityimageconfig")]
    public class EntityImageConfig : Entity
    {
        public const string EntityLogicalName = "entityimageconfig";
        public EntityImageConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entityimageconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entityimageconfigid"] = value;
            }
        }

        public readonly string PrimaryImageAttribute = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsManaged = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly Guid? EntityImageConfigId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string ParentEntityLogicalName = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitykey")]
    public class EntityKey : Entity
    {
        public const string EntityLogicalName = "entitykey";
        public EntityKey() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitykeyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitykeyid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string LogicalName = null;

        public readonly bool? IsSecondaryKey = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string Name = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? EntityKeyId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitymap")]
    public class EntityMap : Entity
    {
        public const string EntityLogicalName = "entitymap";
        public EntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitymapid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string SourceEntityName = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? EntityMapId = null;

        public readonly string TargetEntityName = null;

        public readonly Guid? EntityMapIdUnique = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entityrelationship")]
    public class EntityRelationship : Entity
    {
        public const string EntityLogicalName = "entityrelationship";
        public EntityRelationship() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entityrelationshipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entityrelationshipid"] = value;
            }
        }

        public readonly DateTime? OverwriteTime = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? EntityRelationshipId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string SchemaName = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("environmentvariabledefinition")]
    public class EnvironmentVariableDefinition : UserOrTeamEntity
    {
        public const string EntityLogicalName = "environmentvariabledefinition";
        public EnvironmentVariableDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("environmentvariabledefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["environmentvariabledefinitionid"] = value;
            }
        }

        public readonly string ApiId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string DefaultValue = null;

        public readonly string Description = null;

        public readonly bool? IsCustomizable = null;

        public readonly string IntroducedVersion = null;

        public readonly string ValueSchema = null;

        public readonly EntityReference ConnectionReferenceId = null;

        public readonly string DisplayName = null;

        public readonly bool? IsRequired = null;

        public readonly EntityReference ParentDefinitionId = null;

        public readonly Guid? EnvironmentVariableDefinitionIdUnique = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string SchemaName = null;

        public readonly Guid? EnvironmentVariableDefinitionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string ParameterKey = null;

        public readonly bool? IsManaged = null;

        public readonly string Hint = null;

        public readonly OptionSetValue Type = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Type
            {
                String = 100000000,
                Number = 100000001,
                Boolean = 100000002,
                JSON = 100000003,
                DataSource = 100000004
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("environmentvariablevalue")]
    public class EnvironmentVariableValue : UserOrTeamEntity
    {
        public const string EntityLogicalName = "environmentvariablevalue";
        public EnvironmentVariableValue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("environmentvariablevalueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["environmentvariablevalueid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsCustomizable = null;

        public readonly string IntroducedVersion = null;

        public readonly string Value = null;

        public readonly OptionSetValue ComponentState = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string SchemaName = null;

        public readonly EntityReference EnvironmentVariableDefinitionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? EnvironmentVariableValueIdUnique = null;

        public readonly Guid? EnvironmentVariableValueId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("exchangesyncidmapping")]
    public class ExchangeSyncIdMapping : Entity
    {
        public const string EntityLogicalName = "exchangesyncidmapping";
        public ExchangeSyncIdMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("exchangesyncidmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["exchangesyncidmappingid"] = value;
            }
        }

        public readonly int? FromCrmChangeType = null;

        public readonly string ExchangeEntryId = null;

        public readonly Guid? ObjectId = null;

        public readonly EntityReference OwningTeam = null;

        public readonly bool? IsDeletedInExchange = null;

        public readonly int? VersionNumber = null;

        public readonly string LastSyncError = null;

        public readonly int? ToCrmChangeType = null;

        public readonly Guid? ExchangeSyncIdmappingId = null;

        public readonly string ItemSubject = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? IsUnlinkedInCRM = null;

        public readonly DateTime? LastSyncErrorOccurredOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? UserDecision = null;

        public readonly int? ObjectTypeCode = null;

        public readonly EntityReference OwningUser = null;

        public readonly int? LastSyncErrorCode = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? Retries = null;

        public readonly DateTime? ModifiedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("expanderevent")]
    public class ExpanderEvent : Entity
    {
        public const string EntityLogicalName = "expanderevent";
        public ExpanderEvent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("expandereventid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["expandereventid"] = value;
            }
        }

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? CorrelationId = null;

        public readonly string ContextUri = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? ExpanderEventId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Registrations = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("expiredprocess")]
    public class ExpiredProcess : Entity
    {
        public const string EntityLogicalName = "expiredprocess";
        public ExpiredProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }

        public readonly EntityReference ActiveStageId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string TraversedPath = null;

        public readonly EntityReference KnowledgeArticleId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly int? Duration = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ProcessId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? BusinessProcessFlowInstanceId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? ActiveStageStartedOn = null;

        public readonly DateTime? CompletedOn = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("exportsolutionupload")]
    public class ExportSolutionUpload : UserOrTeamEntity
    {
        public const string EntityLogicalName = "exportsolutionupload";
        public ExportSolutionUpload() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("exportsolutionuploadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["exportsolutionuploadid"] = value;
            }
        }

        public readonly Guid? ExportSolutionUploadId = null;

        public readonly string SolutionFileName = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly string SolutionUniqueName = null;

        public readonly EntityReference AsyncOperationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("externalparty")]
    public class ExternalParty : Entity
    {
        public const string EntityLogicalName = "externalparty";
        public ExternalParty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("externalpartyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["externalpartyid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FullName = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwningTeam = null;

        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? LastEnabledOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string YomiFirstName = null;

        public readonly EntityReference OwningUser = null;

        public readonly string YomiFullName = null;

        public readonly Guid? ExternalPartyId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string MiddleName = null;

        public readonly string EmailAddress = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly Guid? ExternalPartyIdUnique = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string LastName = null;

        public readonly string YomiMiddleName = null;

        public readonly string CorrelationKey = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string YomiLastName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string FirstName = null;

        public readonly string Type = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? LastDisabledOn = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("externalpartyitem")]
    public class ExternalPartyItem : Entity
    {
        public const string EntityLogicalName = "externalpartyitem";
        public ExternalPartyItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("externalpartyitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["externalpartyitemid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly Guid? ExternalPartyItemId = null;

        public readonly DateTime? LastDisabledOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference RegardingObjectId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference ExternalPartyId = null;

        public readonly OptionSetValue StateCode = null;

        public readonly string IntroducedVersion = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ChannelAccessProfileId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? LastEnabledOn = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fax")]
    public class Fax : Entity
    {
        public const string EntityLogicalName = "fax";
        public Fax() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly DateTime? ActualStart = null;

        public readonly bool? IsBilled = null;

        public readonly int? VersionNumber = null;

        public readonly string BillingCode = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly EntityCollection from = null;

        public readonly Guid? ActivityId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? OnHoldTime = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly Guid? SubscriptionId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string Subcategory = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityCollection to = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly OptionSetValue StateCode = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly bool? DirectionCode = null;

        public readonly string TraversedPath = null;

        public readonly string ActivityTypeCode = null;

        public readonly int? ActualDurationMinutes = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference SLAId = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly Guid? ProcessId = null;

        public readonly DateTime? SortDate = null;

        public readonly string Description = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string CoverPageName = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly Guid? StageId = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? NumberOfPages = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string FaxNumber = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsRegularActivity = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly string Category = null;

        public readonly string Tsid = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Sent = 3,
                Received = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("feedback")]
    public class Feedback : Entity
    {
        public const string EntityLogicalName = "feedback";
        public Feedback() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("feedbackid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["feedbackid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? Rating = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly decimal? NormalizedRating = null;

        public readonly EntityReference CreatedOnBehalfByContact = null;

        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference ClosedBy = null;

        public readonly string Comments = null;

        public readonly EntityReference CreatedByContact = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? ClosedOn = null;

        public readonly int? MaxRating = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly int? MinRating = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? FeedbackId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference msdyn_ContextObjectId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly OptionSetValue Source = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Open = 0,
                Closed = 1
            }
            public enum StatusCode
            {
                Proposed = 1,
                Accepted = 2,
                Closed = 3,
                Rejected = 4
            }
            public enum Source
            {
                Internal = 0,
                Portal = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fieldpermission")]
    public class FieldPermission : Entity
    {
        public const string EntityLogicalName = "fieldpermission";
        public FieldPermission() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fieldpermissionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fieldpermissionid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string AttributeLogicalName = null;

        public readonly Guid? FieldPermissionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly OptionSetValue CanUpdate = null;

        public readonly int? VersionNumber = null;

        public readonly string EntityName = null;

        public readonly Guid? FieldPermissionIdUnique = null;

        public readonly OptionSetValue CanRead = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference FieldSecurityProfileId = null;

        public readonly OptionSetValue CanCreate = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum CanUpdate
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum CanRead
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum CanCreate
            {
                NotAllowed = 0,
                Allowed = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fieldsecurityprofile")]
    public class FieldSecurityProfile : Entity
    {
        public const string EntityLogicalName = "fieldsecurityprofile";
        public FieldSecurityProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fieldsecurityprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fieldsecurityprofileid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Guid? FieldSecurityProfileIdUnique = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? FieldSecurityProfileId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fileattachment")]
    public class FileAttachment : Entity
    {
        public const string EntityLogicalName = "fileattachment";
        public FileAttachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fileattachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fileattachmentid"] = value;
            }
        }

        public readonly int? FileSizeInBytes = null;

        public readonly EntityReference ObjectId = null;

        public readonly string Body = null;

        public readonly string RegardingFieldName = null;

        public readonly int? VersionNumber = null;

        public readonly string Prefix = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string FilePointer = null;

        public readonly string StoragePointer = null;

        public readonly string ObjectTypeCode = null;

        public readonly Guid? FileAttachmentId = null;

        public readonly string MimeType = null;

        public readonly bool? IsCommitted = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FileName = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                Account = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("filtertemplate")]
    public class FilterTemplate : Entity
    {
        public const string EntityLogicalName = "filtertemplate";
        public FilterTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("filtertemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["filtertemplateid"] = value;
            }
        }

        public readonly string Description = null;

        public readonly Guid? FilterTemplateId = null;

        public readonly int? QueryType = null;

        public readonly string ReturnedTypeCode = null;

        public readonly string FetchXml = null;

        public readonly string Name = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fixedmonthlyfiscalcalendar")]
    public class FixedMonthlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "fixedmonthlyfiscalcalendar";
        public FixedMonthlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }

        public readonly Money Period12 = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Money Period7 = null;

        public readonly Money Period12_Base = null;

        public readonly Money Period8 = null;

        public readonly Money Period5_Base = null;

        public readonly Money Period11 = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Money Period2_Base = null;

        public readonly Money Period3_Base = null;

        public readonly Money Period10 = null;

        public readonly int? FiscalPeriodType = null;

        public readonly Money Period11_Base = null;

        public readonly Money Period8_Base = null;

        public readonly Money Period6_Base = null;

        public readonly Money Period5 = null;

        public readonly Money Period3 = null;

        public readonly Money Period2 = null;

        public readonly Money Period1 = null;

        public readonly Money Period9_Base = null;

        public readonly DateTime? EffectiveOn = null;

        public readonly Money Period9 = null;

        public readonly Money Period13_Base = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly Money Period1_Base = null;

        public readonly Money Period10_Base = null;

        public readonly decimal? ExchangeRate = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Money Period13 = null;

        public readonly Guid? UserFiscalCalendarId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Money Period4_Base = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Money Period6 = null;

        public readonly Money Period7_Base = null;

        public readonly EntityReference SalesPersonId = null;

        public readonly Money Period4 = null;

        public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("flowmachine")]
    public class flowmachine : UserOrTeamEntity
    {
        public const string EntityLogicalName = "flowmachine";
        public flowmachine() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("flowmachineid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["flowmachineid"] = value;
            }
        }

        public readonly string Description = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly EntityReference FlowMachineGroupId = null;

        public readonly string MachineMetadata = null;

        public readonly string ConnectivityConfiguration = null;

        public readonly int? SessionCapacity = null;

        public readonly Guid? flowmachineId = null;

        public readonly string AgentVersion = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("flowmachinegroup")]
    public class flowmachinegroup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "flowmachinegroup";
        public flowmachinegroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("flowmachinegroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["flowmachinegroupid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string Description = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly string SecondaryKeyPackage = null;

        public readonly Guid? flowmachinegroupId = null;

        public readonly string GroupMetadata = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue FlowGroupType = null;

        public readonly string PrimaryKeyPackage = null;

        public readonly bool? IsManaged = null;

        public readonly string PrimaryPublicKey = null;

        public readonly string SecondaryPublicKey = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum FlowGroupType
            {
                Keyless = 545940000,
                Standard = 545940001,
                Default = 545940002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("flowsession")]
    public class flowsession : UserOrTeamEntity
    {
        public const string EntityLogicalName = "flowsession";
        public flowsession() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("flowsessionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["flowsessionid"] = value;
            }
        }

        public readonly EntityReference RegardingObjectId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Context = null;

        public readonly EntityReference MachineGroupId = null;

        public readonly string ProcessVersion = null;

        public readonly string ErrorCode = null;

        public readonly EntityReference MachineId = null;

        public readonly Guid? flowsessionId = null;

        public readonly DateTime? CompletedOn = null;

        public readonly string ErrorMessage = null;

        public readonly string Gateway = null;

        public readonly DateTime? StartedOn = null;

        public readonly string CorrelationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                NotSpecified = 0,
                Paused = 1,
                Running = 2,
                Waiting = 3,
                Succeeded = 4,
                Skipped = 5,
                Suspended = 6,
                Cancelled = 7,
                Failed = 8,
                Faulted = 9,
                TimedOut = 10,
                Aborted = 11,
                Ignored = 12,
                Deleted = 13,
                Terminated = 14
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("globalsearchconfiguration")]
    public class GlobalSearchConfiguration : Entity
    {
        public const string EntityLogicalName = "globalsearchconfiguration";
        public GlobalSearchConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("globalsearchconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["globalsearchconfigurationid"] = value;
            }
        }

        public readonly Guid? GlobalSearchConfigurationId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? SolutionId = null;

        public readonly string SearchProviderName = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsLocalized = null;

        public readonly Guid? GlobalSearchConfigurationidUnique = null;

        public readonly bool? IsSearchBoxVisible = null;

        public readonly string SearchProviderResultsPage = null;

        public readonly bool? IsEnabled = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("goal")]
    public class Goal : Entity
    {
        public const string EntityLogicalName = "goal";
        public Goal() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("goalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["goalid"] = value;
            }
        }

        public readonly string TargetString = null;

        public readonly DateTime? CreatedOn = null;

        public readonly decimal? Percentage = null;

        public readonly int? ActualInteger = null;

        public readonly EntityReference ParentGoalId = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly Guid? TreeId = null;

        public readonly Guid? GoalId = null;

        public readonly int? Depth = null;

        public readonly int? StretchTargetInteger = null;

        public readonly DateTime? LastRolledupDate = null;

        public readonly EntityReference RollUpQueryActualDecimalId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly Money ActualMoney_Base = null;

        public readonly Money CustomRollupFieldMoney_Base = null;

        public readonly EntityReference GoalWithErrorId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly EntityReference CreatedBy = null;

        public readonly decimal? CustomRollupFieldDecimal = null;

        public readonly int? ComputedTargetAsOfTodayInteger = null;

        public readonly EntityReference RollUpQueryCustomMoneyId = null;

        public readonly EntityReference RollUpQueryCustomDecimalId = null;

        public readonly EntityReference MetricId = null;

        public readonly EntityReference GoalOwnerId = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference RollupQueryActualIntegerId = null;

        public readonly int? InProgressInteger = null;

        public readonly decimal? TargetDecimal = null;

        public readonly OptionSetValue AmountDataType = null;

        public readonly Money ActualMoney = null;

        public readonly string CustomRollupFieldString = null;

        public readonly string ActualString = null;

        public readonly EntityReference RollUpQueryInprogressIntegerId = null;

        public readonly bool? ConsiderOnlyGoalOwnersRecords = null;

        public readonly EntityReference RollUpQueryInprogressDecimalId = null;

        public readonly bool? IsFiscalPeriodGoal = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? RollupErrorCode = null;

        public readonly Money ComputedTargetAsOfTodayMoney = null;

        public readonly bool? IsOverride = null;

        public readonly Money StretchTargetMoney_Base = null;

        public readonly EntityReference RollUpQueryInprogressMoneyId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Money TargetMoney_Base = null;

        public readonly Money CustomRollupFieldMoney = null;

        public readonly decimal? ComputedTargetAsOfTodayDecimal = null;

        public readonly OptionSetValue FiscalPeriod = null;

        public readonly EntityReference RollUpQueryCustomIntegerId = null;

        public readonly decimal? InProgressDecimal = null;

        public readonly int? VersionNumber = null;

        public readonly Money StretchTargetMoney = null;

        public readonly OptionSetValue FiscalYear = null;

        public readonly Money InProgressMoney = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? TargetInteger = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly decimal? ActualDecimal = null;

        public readonly decimal? StretchTargetDecimal = null;

        public readonly EntityReference RollUpQueryActualMoneyId = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly DateTime? GoalEndDate = null;

        public readonly string InProgressString = null;

        public readonly bool? RollupOnlyFromChildGoals = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly bool? IsOverridden = null;

        public readonly Money ComputedTargetAsOfTodayMoney_Base = null;

        public readonly byte[] EntityImage = null;

        public readonly Money InProgressMoney_Base = null;

        public readonly decimal? ComputedTargetAsOfTodayPercentageAchieved = null;

        public readonly bool? IsAmount = null;

        public readonly string StretchTargetString = null;

        public readonly int? CustomRollupFieldInteger = null;

        public readonly DateTime? GoalStartDate = null;

        public readonly Money TargetMoney = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum AmountDataType
            {
                Money = 0,
                Decimal = 1,
                Integer = 2
            }
            public enum FiscalPeriod
            {
                Quarter1 = 1,
                Quarter2 = 2,
                Quarter3 = 3,
                Quarter4 = 4,
                January = 101,
                February = 102,
                March = 103,
                April = 104,
                May = 105,
                June = 106,
                July = 107,
                August = 108,
                September = 109,
                October = 110,
                November = 111,
                December = 112,
                Semester1 = 201,
                Semester2 = 202,
                Annual = 301,
                P1 = 401,
                P2 = 402,
                P3 = 403,
                P4 = 404,
                P5 = 405,
                P6 = 406,
                P7 = 407,
                P8 = 408,
                P9 = 409,
                P10 = 410,
                P11 = 411,
                P12 = 412,
                P13 = 413
            }
            public enum FiscalYear
            {
                FY2038 = 2038,
                FY2037 = 2037,
                FY2036 = 2036,
                FY2035 = 2035,
                FY2034 = 2034,
                FY2033 = 2033,
                FY2032 = 2032,
                FY2031 = 2031,
                FY2030 = 2030,
                FY2029 = 2029,
                FY2028 = 2028,
                FY2027 = 2027,
                FY2026 = 2026,
                FY2025 = 2025,
                FY2024 = 2024,
                FY2023 = 2023,
                FY2022 = 2022,
                FY2021 = 2021,
                FY2020 = 2020,
                FY2019 = 2019,
                FY2018 = 2018,
                FY2017 = 2017,
                FY2016 = 2016,
                FY2015 = 2015,
                FY2014 = 2014,
                FY2013 = 2013,
                FY2012 = 2012,
                FY2011 = 2011,
                FY2010 = 2010,
                FY2009 = 2009,
                FY2008 = 2008,
                FY2007 = 2007,
                FY2006 = 2006,
                FY2005 = 2005,
                FY2004 = 2004,
                FY2003 = 2003,
                FY2002 = 2002,
                FY2001 = 2001,
                FY2000 = 2000,
                FY1999 = 1999,
                FY1998 = 1998,
                FY1997 = 1997,
                FY1996 = 1996,
                FY1995 = 1995,
                FY1994 = 1994,
                FY1993 = 1993,
                FY1992 = 1992,
                FY1991 = 1991,
                FY1990 = 1990,
                FY1989 = 1989,
                FY1988 = 1988,
                FY1987 = 1987,
                FY1986 = 1986,
                FY1985 = 1985,
                FY1984 = 1984,
                FY1983 = 1983,
                FY1982 = 1982,
                FY1981 = 1981,
                FY1980 = 1980,
                FY1979 = 1979,
                FY1978 = 1978,
                FY1977 = 1977,
                FY1976 = 1976,
                FY1975 = 1975,
                FY1974 = 1974,
                FY1973 = 1973,
                FY1972 = 1972,
                FY1971 = 1971,
                FY1970 = 1970
            }
            public enum StatusCode
            {
                Open = 0,
                Closed = 1,
                Discarded = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("goalrollupquery")]
    public class GoalRollupQuery : Entity
    {
        public const string EntityLogicalName = "goalrollupquery";
        public GoalRollupQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("goalrollupqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["goalrollupqueryid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly Guid? GoalRollupQueryId = null;

        public readonly string FetchXml = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string QueryEntityType = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum QueryEntityType
            {

            }
            public enum StatusCode
            {
                Open = 0,
                Closed = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("hierarchyrule")]
    public class HierarchyRule : Entity
    {
        public const string EntityLogicalName = "hierarchyrule";
        public HierarchyRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("hierarchyruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["hierarchyruleid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string IntroducedVersion = null;

        public readonly DateTime? OverwriteTime = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? VersionNumber = null;

        public readonly string PrimaryEntityLogicalName = null;

        public readonly Guid? RelatedEntityFormId = null;

        public readonly bool? IsCustomizable = null;

        public readonly bool? ShowDisabled = null;

        public readonly Guid? PrimaryEntityFormID = null;

        public readonly string RelatedEntityLogicalName = null;

        public readonly Guid? HierarchyRuleID = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly DateTime? PublishedOn = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? SortBy = null;

        public readonly string Description = null;

        public readonly Guid? HierarchyRuleIDUnique = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("hierarchysecurityconfiguration")]
    public class HierarchySecurityConfiguration : Entity
    {
        public const string EntityLogicalName = "hierarchysecurityconfiguration";
        public HierarchySecurityConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("hierarchysecuritymodelingsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["hierarchysecuritymodelingsettingid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly string ObjectTypeCode = null;

        public readonly string EntityName = null;

        public readonly Guid? HierarchySecurityModelingSettingId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("holidaywrapper")]
    public class holidaywrapper : Entity
    {
        public const string EntityLogicalName = "holidaywrapper";
        public holidaywrapper() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("holidaywrapperid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["holidaywrapperid"] = value;
            }
        }

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly string CalendarId = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? SelectedYear = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Duration = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly Guid? holidaywrapperId = null;

        public readonly DateTime? EndTime = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly DateTime? StartTime = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("imagedescriptor")]
    public class ImageDescriptor : Entity
    {
        public const string EntityLogicalName = "imagedescriptor";
        public ImageDescriptor() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("imagedescriptorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["imagedescriptorid"] = value;
            }
        }

        public readonly int? versionnumber = null;

        public readonly string ImageDescription = null;

        public readonly int? FileSizeBytes = null;

        public readonly int? Size = null;

        public readonly int? ImagePixelHeight = null;

        public readonly string FileType = null;

        public readonly Guid? ObjectId = null;

        public readonly string FileLocation = null;

        public readonly string ImageURL = null;

        public readonly string Title = null;

        public readonly string FileName = null;

        public readonly int? ImageTimestamp = null;

        public readonly byte[] FullImageData = null;

        public readonly int? ImagePixelWidth = null;

        public readonly Guid? ImageDescriptorId = null;

        public readonly byte[] ImageData = null;

        public readonly string ObjectTypeCode = null;

        public readonly string ImageTags = null;

        public readonly string MimeType = null;

        public readonly string FullImageURL = null;

        public readonly int? ColorDepthBits = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("import")]
    public class Import : Entity
    {
        public const string EntityLogicalName = "import";
        public Import() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ImportId = null;

        public readonly string EMailAddress = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsImport = null;

        public readonly int? Sequence = null;

        public readonly OptionSetValue ModeCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? SendNotification = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ModeCode
            {
                Create = 0,
                Update = 1
            }
            public enum StatusCode
            {
                Submitted = 0,
                Parsing = 1,
                Transforming = 2,
                Importing = 3,
                Completed = 4,
                Failed = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importdata")]
    public class ImportData : Entity
    {
        public const string EntityLogicalName = "importdata";
        public ImportData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importdataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importdataid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Data = null;

        public readonly Guid? ImportDataId = null;

        public readonly int? LineNumber = null;

        public readonly Guid? RecordId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? HasError = null;

        public readonly OptionSetValue ErrorType = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference ImportFileId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ErrorType
            {
                Create = 0,
                Update = 1
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importentitymapping")]
    public class ImportEntityMapping : Entity
    {
        public const string EntityLogicalName = "importentitymapping";
        public ImportEntityMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importentitymappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importentitymappingid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? ImportEntityMappingId = null;

        public readonly EntityReference ImportMapId = null;

        public readonly OptionSetValue DeDupe = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly OptionSetValue ProcessCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? ImportEntityMappingIdUnique = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string SourceEntityName = null;

        public readonly string TargetEntityName = null;

        public new static class Options
        {
            public enum DeDupe
            {
                Ignore = 1,
                Eliminate = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StateCode
            {
                Active = 0
            }
            public enum StatusCode
            {
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importfile")]
    public class ImportFile : Entity
    {
        public const string EntityLogicalName = "importfile";
        public ImportFile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importfileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importfileid"] = value;
            }
        }

        public readonly OptionSetValue ProcessCode = null;

        public readonly bool? IsFirstRowHeader = null;

        public readonly EntityReference RecordsOwnerId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? SuccessCount = null;

        public readonly string ParsedTableColumnPrefix = null;

        public readonly int? TotalCount = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? CompletedOn = null;

        public readonly OptionSetValue FileTypeCode = null;

        public readonly OptionSetValue FieldDelimiterCode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwningTeam = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string HeaderRow = null;

        public readonly string Source = null;

        public readonly bool? EnableDuplicateDetection = null;

        public readonly string Size = null;

        public readonly int? ParsedTableColumnsNumber = null;

        public readonly string SourceEntityName = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly OptionSetValue DataDelimiterCode = null;

        public readonly OptionSetValue UpsertModeCode = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? ProgressCounter = null;

        public readonly Guid? ImportFileId = null;

        public readonly OptionSetValue ProcessingStatus = null;

        public readonly int? PartialFailureCount = null;

        public readonly bool? UseSystemMap = null;

        public readonly string RelatedEntityColumns = null;

        public readonly string ParsedTableName = null;

        public readonly EntityReference ImportMapId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string TargetEntityName = null;

        public readonly string AdditionalHeaderRow = null;

        public readonly EntityReference OwningUser = null;

        public readonly int? FailureCount = null;

        public readonly Guid? EntityKeyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Content = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference ImportId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public new static class Options
        {
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum FileTypeCode
            {
                CSV = 0,
                XMLSpreadsheet2003 = 1,
                Attachment = 2,
                XLSX = 3
            }
            public enum FieldDelimiterCode
            {
                Colon = 1,
                Comma = 2,
                Tab = 3,
                Semicolon = 4
            }
            public enum StateCode
            {
                Active = 0
            }
            public enum DataDelimiterCode
            {
                DoubleQuote = 1,
                None = 2,
                SingleQuote = 3
            }
            public enum UpsertModeCode
            {
                Create = 0,
                Update = 1,
                Ignore = 2
            }
            public enum ProcessingStatus
            {
                NotStarted = 1,
                Parsing = 2,
                ParsingComplete = 3,
                ComplexTransformation = 4,
                LookupTransformation = 5,
                PicklistTransformation = 6,
                OwnerTransformation = 7,
                TransformationComplete = 8,
                ImportPass1 = 9,
                ImportPass2 = 10,
                ImportComplete = 11,
                PrimaryKeyTransformation = 12
            }
            public enum StatusCode
            {
                Submitted = 0,
                Parsing = 1,
                Transforming = 2,
                Importing = 3,
                Completed = 4,
                Failed = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importjob")]
    public class ImportJob : Entity
    {
        public const string EntityLogicalName = "importjob";
        public ImportJob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importjobid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string ImportContext = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Name = null;

        public readonly Guid? SolutionId = null;

        public readonly string Data = null;

        public readonly string SolutionName = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly double? Progress = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string OperationContext = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? ImportJobId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? CompletedOn = null;

        public readonly DateTime? StartedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importlog")]
    public class ImportLog : Entity
    {
        public const string EntityLogicalName = "importlog";
        public ImportLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importlogid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly string AdditionalInfo = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly Guid? ImportLogId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly OptionSetValue LogPhaseCode = null;

        public readonly string ColumnValue = null;

        public readonly EntityReference ImportDataId = null;

        public readonly int? LineNumber = null;

        public readonly int? SequenceNumber = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string HeaderColumn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string ErrorDescription = null;

        public readonly EntityReference ImportFileId = null;

        public readonly int? ErrorNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum LogPhaseCode
            {
                Parse = 0,
                Transform = 1,
                ImportCreate = 2,
                ImportUpdate = 3
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importmap")]
    public class ImportMap : Entity
    {
        public const string EntityLogicalName = "importmap";
        public ImportMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importmapid"] = value;
            }
        }

        public readonly OptionSetValue TargetEntity = null;

        public readonly EntityReference OwningUser = null;

        public readonly string IntroducedVersion = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string MapCustomizations = null;

        public readonly string Description = null;

        public readonly string TargetUserIdentifierForSourceCRMUserLink = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? IsWizardCreated = null;

        public readonly string Source = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly OptionSetValue SourceType = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly Guid? ImportMapIdUnique = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string SourceUserIdentifierForSourceDataSourceUserLink = null;

        public readonly bool? IsManaged = null;

        public readonly OptionSetValue EntitiesPerFile = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? ImportMapId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsValidForImport = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly OptionSetValue ImportMapType = null;

        public readonly EntityReference OwnerId = null;

        public readonly string SourceUserIdentifierForSourceCRMUserLink = null;

        public new static class Options
        {
            public enum TargetEntity
            {
                QueueMemberCount = 2024,
                DocumentSuggestions = 1189,
                RecurrenceRule = 4250,
                Queue = 2020,
                QueueItem = 2029,
                QueueItemCount = 2023,
                RecurringAppointment = 4251,
                RelationshipRoleMap = 4501,
                ReplicationBacklog = 1140,
                Report = 9100,
                RelationshipEntity = 9813,
                RelationshipAttribute = 9814,
                RelationshipRole = 4500,
                QuarterlyFiscalCalendar = 2002,
                PrincipalSyncAttributeMap = 1404,
                Privilege = 1023,
                PrivilegeObjectTypeCode = 31,
                PostRegarding = 8002,
                PostRole = 8001,
                FieldSharing = 44,
                ProcessSession = 4710,
                ProvisionLanguageForUser = 10013,
                Publisher = 7101,
                PublisherAddress = 7102,
                ProcessStage = 4724,
                ProcessStageParameter = 10035,
                ProcessTrigger = 4712,
                RollupProperties = 9510,
                RoutingRuleSet = 8181,
                RuleItem = 8199,
                RoleTemplate = 1037,
                RollupField = 9604,
                RollupJob = 9511,
                RuntimeDependency = 7200,
                Fundraiser = 10138,
                Idea = 10142,
                Product = 10144,
                Challenge = 10140,
                ChallengeManagementProcess = 10141,
                Donation = 10137,
                SecurityRole = 1036,
                ReportVisibility = 9103,
                RevokeInheritedAccessRecordsTracker = 90001,
                RibbonClientMetadata = 4579,
                ReportRelatedCategory = 9102,
                ReportRelatedEntity = 9101,
                ReportLink = 9104,
                RibbonCommand = 1116,
                RibbonMetadataToProcess = 9880,
                RibbonRule = 1117,
                RibbonTabToCommandMapping = 1113,
                RibbonContextGroup = 1115,
                ApplicationRibbons = 1120,
                RibbonDifference = 1130,
                NavigationSetting = 9900,
                Autonumber = 10105,
                IdeaToProjectBusinessProcess = 10139,
                BotContent = 10040,
                MultiEntitySearch = 9910,
                MultiSelectOptionValue = 9912,
                CustomOrder = 10103,
                Notification = 4110,
                OfficeDocument = 4490,
                OfficeGraphDocument = 9950,
                CustomOrderDetails = 10152,
                CustomOrderSummary = 10154,
                NewProcess = 950,
                Tour = 10039,
                RichTextAttachment = 10078,
                ServiceConfiguration = 10051,
                SLAKPI = 10052,
                OnlineShopperIntention = 10151,
                PMInferredTask = 10093,
                PMRecording = 10094,
                SolutionComponentDataSource = 10012,
                SolutionHealthRuleSet = 10101,
                SolutionHistory = 10003,
                SolutionHistoryDataSource = 10004,
                SolutionComponentSummary = 10011,
                SolutionHealthRule = 10099,
                SolutionHealthRuleArgument = 10100,
                ListValueMapping = 4418,
                PlugInAssembly = 4605,
                PlugInTraceLog = 4619,
                PDFSetting = 10049,
                PersonalDocumentTemplate = 9941,
                PhoneCall = 4210,
                PlugInType = 4602,
                Comment = 8005,
                Follow = 8003,
                Like = 8006,
                PlugInTypeStatistic = 4603,
                Position = 50,
                Post = 8000,
                PartnerApplication = 1095,
                OrganizationDataSyncSubscription = 10075,
                OrganizationDataSyncSubscriptionEntity = 10076,
                OrganizationSetting = 10029,
                OfflineCommandDefinition = 9870,
                OptionSet = 9809,
                Organization = 1019,
                OrganizationStatistic = 4708,
                Owner = 7,
                OwnerMapping = 4420,
                Package = 10007,
                OrganizationUI = 1021,
                OrganizationInsightsMetric = 9699,
                OrganizationInsightsNotification = 9690,
                Territory = 2013,
                TextAnalyticsEntityMapping = 9945,
                Theme = 2015,
                TeamSyncAttributeMappingProfiles = 1403,
                TeamTemplate = 92,
                EmailTemplate = 2010,
                TimeStampDateMapping = 9932,
                TraceAssociation = 8051,
                Trace = 8050,
                TraceRegarding = 8052,
                TimeZoneDefinition = 4810,
                TimeZoneLocalizedName = 4812,
                TimeZoneRule = 4811,
                TeamProfiles = 1203,
                SystemApplicationMetadata = 7000,
                SystemForm = 1030,
                User = 8,
                SyncAttributeMapping = 1401,
                SyncAttributeMappingProfile = 1400,
                SyncError = 9869,
                SystemUserAuthorizationChangeTracker = 60,
                Task = 4212,
                Team = 9,
                TeamMobileOfflineProfileMembership = 10073,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserManagerMap = 51,
                SystemUserPrincipal = 14,
                VirtualEntityMetadata = 10072,
                WebResource = 9333,
                WebWizard = 4800,
                UserChart = 1112,
                UserSearchFacet = 52,
                UserSettings = 150,
                WebWizardAccessPrivilege = 4803,
                ProcessDependency = 4704,
                ProcessLog = 4706,
                WorkflowWaitSubscription = 4702,
                WizardPage = 4802,
                Process = 4703,
                WorkflowBinary = 10036,
                SavedView = 4230,
                TranslationProcess = 951,
                UnresolvedAddress = 2012,
                UntrackedEmail = 4220,
                Currency = 9105,
                TransformationMapping = 4426,
                TransformationParameterMapping = 4427,
                UserApplicationMetadata = 7001,
                UserDashboard = 1031,
                UserMapping = 2016,
                UserMobileOfflineProfileMembership = 10074,
                UserEntityInstanceData = 2501,
                UserEntityUISettings = 2500,
                UserFiscalCalendar = 1086,
                SemiannualFiscalCalendar = 2001,
                ServiceEndpoint = 4618,
                ServicePlan = 101,
                SdkMessageResponse = 4610,
                SdkMessageResponseField = 4611,
                SearchTelemetry = 10080,
                SettingDefinition = 10030,
                SharePointSite = 9502,
                SimilarityRule = 9951,
                SiteMap = 4709,
                SharePointData = 9509,
                SharepointDocument = 9507,
                DocumentLocation = 9508,
                SdkMessageRequestField = 4614,
                SavedOrganizationInsightsConfiguration = 1309,
                View = 1039,
                SystemChart = 1111,
                Reservation = 10147,
                Review = 10148,
                TeamProject = 10143,
                SdkMessage = 4606,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequest = 4609,
                SdkMessageFilter = 4607,
                SdkMessagePair = 4613,
                SdkMessageProcessingStep = 4608,
                Subscription = 29,
                SubscriptionClients = 1072,
                SubscriptionManuallyTrackedObject = 37,
                StatusMap = 1075,
                StringMap = 1043,
                Subject = 129,
                SubscriptionStatisticOffline = 45,
                SubscriptionSynchronizationInformation = 33,
                TrackingInformationForDeletedEntities = 35,
                SuggestionCardTemplate = 1190,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionSyncEntryOutlook = 48,
                StageSolutionUpload = 10009,
                SocialActivity = 4216,
                SocialInsightsConfiguration = 1300,
                SocialProfile = 99,
                SLA = 9750,
                SLAItem = 9751,
                SLAKPIInstance = 9752,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                SolutionComponentRelationshipConfiguration = 10002,
                SolutionHistoryData = 9890,
                SolutionComponent = 7103,
                SolutionComponentAttributeConfiguration = 10000,
                SolutionComponentConfiguration = 10001,
                Contact = 2,
                ConversationTranscript = 10041,
                RecordCreationAndUpdateRule = 9300,
                ConnectionRole = 3231,
                ConnectionRoleObjectTypeCode = 3233,
                Connector = 372,
                RecordCreationAndUpdateRuleItem = 9301,
                CustomControl = 9753,
                CustomControlDefaultConfig = 9755,
                CustomControlResource = 9754,
                CustomAPI = 10069,
                CustomAPIRequestParameter = 10070,
                CustomAPIResponseProperty = 10071,
                ConnectionReference = 10037,
                Category = 9959,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRule = 9400,
                CascadeGrantRevokeAccessVersionTracker = 10019,
                Catalog = 10066,
                CatalogAssignment = 10067,
                ChannelAccessProfileRuleItem = 9401,
                ColumnMapping = 4417,
                ProcessConfiguration = 9650,
                Connection = 3234,
                ChannelProperty = 1236,
                ChannelPropertyGroup = 1234,
                ClientUpdate = 36,
                DuplicateRuleCondition = 4416,
                Email = 4202,
                EmailHash = 4023,
                DocumentTemplate = 9940,
                DuplicateRecord = 4415,
                DuplicateDetectionRule = 4414,
                EmailSearch = 4299,
                EntityAnalyticsConfig = 430,
                VirtualEntityDataProvider = 78,
                VirtualEntityDataSource = 85,
                EmailServerProfile = 9605,
                EmailSignature = 9997,
                Entity = 9800,
                IndexedArticle = 126,
                DataLakeFolderPermission = 10015,
                DataLakeWorkspace = 10016,
                DataLakeWorkspacePermission = 10017,
                Address = 1071,
                CustomerRelationship = 4502,
                DataLakeFolder = 10014,
                DataPerformanceDashboard = 4450,
                DependencyNode = 7106,
                DisplayString = 4102,
                DisplayStringMap = 4101,
                DelveActionHub = 9961,
                Dependency = 7105,
                DependencyFeature = 7108,
                ApplicationUser = 10021,
                ModelDrivenApp = 9006,
                AppModuleComponent = 9007,
                AppConfigMaster = 9011,
                ModelDrivenAppElement = 10024,
                ApplicationFile = 4707,
                ModelDrivenAppComponentNodeSEdge = 10025,
                AppModuleMetadataAsyncOperation = 8702,
                AppModuleRoles = 9009,
                Notification1 = 10077,
                ModelDrivenAppComponentNode = 10026,
                AppModuleMetadata = 8700,
                AppModuleMetadataDependency = 8701,
                AppConfigurationInstance = 9013,
                ActionCardUserSettings = 9973,
                ActionCardUserState = 9968,
                ActivityFileAttachment = 10050,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCard = 9962,
                Attachment = 1001,
                Note = 5,
                AnnualFiscalCalendar = 2000,
                AppConfiguration = 9012,
                ActivityParty = 135,
                Activity = 4200,
                AdvancedSimilarityRule = 9949,
                BusinessUnit = 10,
                BusinessUnitMap = 6,
                Announcement = 132,
                BulkDeleteOperation = 4424,
                BusinessDataLocalizedLabel = 4232,
                BusinessProcessFlowInstance = 4725,
                Calendar = 4003,
                CanvasAppExtendedMetadata = 10031,
                ActionCardType = 9983,
                CascadeGrantRevokeAccessRecordsTracker = 10018,
                CalendarRule = 4004,
                CallbackRegistration = 301,
                CanvasApp = 300,
                BulkDeleteFailure = 4425,
                SystemJob = 4700,
                Attachment1 = 1002,
                Attribute = 9808,
                Appointment = 4201,
                ModelDrivenAppSetting = 10027,
                ModelDrivenAppUserSetting = 10028,
                ImageAttributeConfiguration = 431,
                AzureServiceConnection = 9936,
                Chatbot = 10042,
                ChatbotSubcomponent = 10043,
                AttributeMap = 4601,
                Auditing = 4567,
                AuthorizationServer = 1094,
                AIBuilderDataset = 10081,
                AIBuilderDatasetFile = 10082,
                AIBuilderDatasetRecord = 10083,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfileItemAssociation = 9868,
                MonthlyFiscalCalendar = 2003,
                AIBuilderDatasetsContainer = 10084,
                AIFormProcessingDocument = 10087,
                AIModel = 401,
                AIObjectDetectionImage = 10088,
                AIBuilderFile = 10085,
                AIBuilderFileAttachedData = 10086,
                AIConfiguration = 402,
                MobileOfflineProfile = 9866,
                LookupMapping = 4419,
                Mailbox = 9606,
                MailboxStatistics = 9607,
                Letter = 4207,
                License = 2027,
                LocalConfigStore = 9201,
                MailboxTrackingCategory = 9609,
                ManagedProperty = 9812,
                MetadataDifference = 4231,
                GoalMetric = 9603,
                MailboxAutoTrackingFolder = 9608,
                MailMergeTemplate = 9106,
                ManagedIdentity = 10065,
                KnowledgePersonalization = 10060,
                KnowledgeArticleImage = 10056,
                KnowledgeArticleTemplate = 10061,
                HelpPage = 10038,
                KnowledgeArticleLanguageSetting = 10059,
                SearchProvider = 10055,
                KnowledgeInteractionInsight = 10057,
                NonRelationalDataSource = 10079,
                ObjectDetectionProduct = 10150,
                ODataV4DataSource = 10032,
                KnowledgeSearchPersonalFilterConfig = 10062,
                KnowledgeSearchFilter = 10063,
                KnowledgeSearchInsight = 10058,
                HealthcareFeedback = 10149,
                AITemplate = 400,
                AnalysisComponent = 10095,
                AnalysisJob = 10096,
                AIObjectDetectionLabel = 10089,
                AIObjectDetectionBoundingBox = 10090,
                AIObjectDetectionImageMapping = 10091,
                AnalysisResult = 10097,
                Dataflow = 418,
                KnowledgeFederatedArticle = 10053,
                KnowledgeFederatedArticleIncident = 10054,
                AnalysisResultDetail = 10098,
                ComponentLayer = 10005,
                ComponentLayerDataSource = 10006,
                FilterTemplate = 30,
                FixedMonthlyFiscalCalendar = 2004,
                FlowMachine = 10033,
                FieldPermission = 1201,
                FieldSecurityProfile = 1200,
                FileAttachment = 55,
                FlowMachineGroup = 10034,
                RollupQuery = 9602,
                HierarchyRule = 8840,
                HierarchySecurityConfiguration = 9919,
                FlowSession = 4720,
                GlobalSearchConfiguration = 54,
                Goal = 9600,
                Feedback = 9958,
                EntityRelationship = 9811,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                EntityImageConfiguration = 432,
                EntityKey = 9810,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                ExternalParty = 3008,
                ExternalPartyItem = 9987,
                Fax = 4204,
                ExpanderEvent = 4711,
                ExpiredProcess = 955,
                ExportSolutionUpload = 10010,
                ArticleComment = 1082,
                ArticleTemplate = 1016,
                KeyVaultReference = 10064,
                InvalidDependency = 7107,
                ISVConfig = 4705,
                Article = 127,
                KnowledgeArticle = 9953,
                KnowledgeSearchModel = 9947,
                Language = 9957,
                LanguageProvisioningState = 9875,
                KnowledgeArticleCategory = 9960,
                KnowledgeArticleViews = 9955,
                KnowledgeBaseRecord = 9930,
                InterProcessLock = 4011,
                ImportData = 4413,
                ImportEntityMapping = 4428,
                ImportSourceFile = 4412,
                HolidayWrapper = 9996,
                ImageDescriptor = 1007,
                DataImport = 4410,
                ImportJob = 9107,
                InteractionForEmail = 9986,
                InternalAddress = 1003,
                InternalCatalogAssignment = 10068,
                ImportLog = 4423,
                DataMap = 4411,
                IntegrationStatus = 3000
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SourceType
            {
                MapForSalesForceComFullDataExport = 1,
                MapForSalesForceComReportExport = 2,
                MapForSalesForceComContactAndAccountReportExport = 3,
                MicrosoftOfficeOutlook2010WithBusinessContactManager = 4,
                GenericMapForContactAndAccount = 5
            }
            public enum EntitiesPerFile
            {
                SingleEntityPerFile = 1,
                MultipleEntitiesPerFile = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ImportMapType
            {
                Standard = 1,
                OutOfBox = 2,
                InProcess = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("integrationstatus")]
    public class IntegrationStatus : Entity
    {
        public const string EntityLogicalName = "integrationstatus";
        public IntegrationStatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("integrationentryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["integrationentryid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? IntegrationEntryId = null;

        public readonly Guid? ObjectId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string StatusDescription = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string SystemName = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? OrganizationId = null;

        public readonly string StateDescription = null;

        public readonly string ObjectTypeCode = null;

        public new static class Options
        {
            public enum StateCode
            {

            }
            public enum StatusCode
            {

            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("interactionforemail")]
    public class InteractionForEmail : Entity
    {
        public const string EntityLogicalName = "interactionforemail";
        public InteractionForEmail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("interactionforemailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["interactionforemailid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly int? InteractionPartyTypecode = null;

        public readonly Guid? InteractionForEmailId = null;

        public readonly OptionSetValue statuscode = null;

        public readonly string InteractionRepliedBy = null;

        public readonly DateTime? EmailInteractionTime = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string InteractionLocation = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string InteractionUserAgent = null;

        public readonly OptionSetValue InteractionType = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly Guid? EmailActivityId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwnerId = null;

        public readonly string InteractedComponentText = null;

        public readonly Guid? EmailInteractionReplyId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string EmailAddress = null;

        public readonly Guid? InteractionPartyId = null;

        public readonly string InteractionReplyId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum InteractionType
            {
                EmailOpen = 0,
                LinkOpen = 1,
                AttachmentOpen = 2,
                EmailReply = 3
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("internaladdress")]
    public class InternalAddress : Entity
    {
        public const string EntityLogicalName = "internaladdress";
        public InternalAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("internaladdressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["internaladdressid"] = value;
            }
        }

        public readonly int? UTCOffset = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly double? Latitude = null;

        public readonly string ObjectTypeCode = null;

        public readonly string Composite = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Name = null;

        public readonly Guid? InternalAddressId = null;

        public readonly string PostOfficeBox = null;

        public readonly string County = null;

        public readonly string Country = null;

        public readonly Guid? BusinessUnitId = null;

        public readonly int? AddressNumber = null;

        public readonly string Fax = null;

        public readonly OptionSetValue ShippingMethodCode = null;

        public readonly string City = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly double? Longitude = null;

        public readonly string UPSZone = null;

        public readonly string StateOrProvince = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue AddressTypeCode = null;

        public readonly string Telephone3 = null;

        public readonly string Line1 = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? OrganizationId = null;

        public readonly Guid? ParentId = null;

        public readonly string PostalCode = null;

        public readonly int? VersionNumber = null;

        public readonly string Line2 = null;

        public readonly string Line3 = null;

        public readonly string Telephone1 = null;

        public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }
            public enum ShippingMethodCode
            {

            }
            public enum AddressTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("internalcatalogassignment")]
    public class InternalCatalogAssignment : OrganizationEntity
    {
        public const string EntityLogicalName = "internalcatalogassignment";
        public InternalCatalogAssignment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("internalcatalogassignmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["internalcatalogassignmentid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? InternalCatalogAssignmentId = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference CatalogId = null;

        public readonly EntityReference Object = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("interprocesslock")]
    public class InterProcessLock : Entity
    {
        public const string EntityLogicalName = "interprocesslock";
        public InterProcessLock() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("interprocesslockid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["interprocesslockid"] = value;
            }
        }

        public readonly Guid? Token = null;

        public readonly Guid? InterProcessLockId = null;

        public readonly DateTime? ModifiedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("invaliddependency")]
    public class InvalidDependency : Entity
    {
        public const string EntityLogicalName = "invaliddependency";
        public InvalidDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("invaliddependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["invaliddependencyid"] = value;
            }
        }

        public readonly int? MissingComponentLookupType = null;

        public readonly Guid? ExistingComponentId = null;

        public readonly OptionSetValue ExistingDependencyType = null;

        public readonly OptionSetValue MissingComponentType = null;

        public readonly Guid? InvalidDependencyId = null;

        public readonly OptionSetValue ExistingComponentType = null;

        public readonly bool? IsExistingNodeRequiredComponent = null;

        public readonly string MissingComponentInfo = null;

        public readonly Guid? MissingComponentId = null;

        public new static class Options
        {
            public enum ExistingDependencyType
            {
                None = 0,
                SolutionInternal = 1,
                Published = 2,
                Unpublished = 4
            }
            public enum MissingComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402,
                EntityAnalyticsConfiguration = 430,
                AttributeImageConfiguration = 431,
                EntityImageConfiguration = 432
            }
            public enum ExistingComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402,
                EntityAnalyticsConfiguration = 430,
                AttributeImageConfiguration = 431,
                EntityImageConfiguration = 432
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("isvconfig")]
    public class IsvConfig : Entity
    {
        public const string EntityLogicalName = "isvconfig";
        public IsvConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("isvconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["isvconfigid"] = value;
            }
        }

        public readonly Guid? OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? VersionNumber = null;

        public readonly string ConfigXML = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? IsvConfigId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("kbarticle")]
    public class KbArticle : Entity
    {
        public const string EntityLogicalName = "kbarticle";
        public KbArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly OptionSetValue StateCode = null;

        public readonly int? LanguageCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly byte[] EntityImage = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference KbArticleTemplateId = null;

        public readonly EntityReference SubjectId = null;

        public readonly string Comments = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly string KeyWords = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string ArticleXml = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? KbArticleId = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly string Content = null;

        public readonly string Number = null;

        public readonly string Description = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 1,
                Unapproved = 2,
                Published = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Unapproved = 2,
                Published = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("kbarticlecomment")]
    public class KbArticleComment : Entity
    {
        public const string EntityLogicalName = "kbarticlecomment";
        public KbArticleComment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticlecommentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticlecommentid"] = value;
            }
        }

        public readonly Guid? OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string CommentText = null;

        public readonly Guid? KbArticleCommentId = null;

        public readonly EntityReference KbArticleId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("kbarticletemplate")]
    public class KbArticleTemplate : Entity
    {
        public const string EntityLogicalName = "kbarticletemplate";
        public KbArticleTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticletemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticletemplateid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly int? LanguageCode = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? KbArticleTemplateIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly string StructureXml = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly Guid? KbArticleTemplateId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string FormatXml = null;

        public readonly bool? IsManaged = null;

        public readonly bool? IsActive = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("keyvaultreference")]
    public class KeyVaultReference : UserOrTeamEntity
    {
        public const string EntityLogicalName = "keyvaultreference";
        public KeyVaultReference() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("keyvaultreferenceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["keyvaultreferenceid"] = value;
            }
        }

        public readonly bool? IsValidated = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference ManagedIdentityId = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string KeyVaultUri = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string KeyName = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly OptionSetValue PreAuthorizedApplicationType = null;

        public readonly Guid? KeyVaultReferenceId = null;

        public readonly OptionSetValue KeyType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum PreAuthorizedApplicationType
            {
                MicrosoftDataverseFirstParty = 0,
                Other = 1
            }
            public enum KeyType
            {
                Secret = 0,
                Certificate = 1,
                CertificateWithX5c = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgearticle")]
    public class KnowledgeArticle : Entity
    {
        public const string EntityLogicalName = "knowledgearticle";
        public KnowledgeArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticleid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Keywords = null;

        public readonly decimal? Rating_Sum = null;

        public readonly bool? msdyn_isingestedarticle = null;

        public readonly int? KnowledgeArticleViews_State = null;

        public readonly int? Rating_Count = null;

        public readonly decimal? Rating = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? MajorVersionNumber = null;

        public readonly int? Rating_State = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly DateTime? PublishOn = null;

        public readonly bool? IsPrimary = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly bool? IsRootArticle = null;

        public readonly string msdyn_ingestedarticleurl = null;

        public readonly EntityReference OwningTeam = null;

        public readonly OptionSetValue StateCode = null;

        public readonly int? PublishStatusId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? ExpirationStateId = null;

        public readonly int? ExpirationStatusId = null;

        public readonly string traversedpath = null;

        public readonly bool? IsLatestVersion = null;

        public readonly Guid? knowledgearticleId = null;

        public readonly DateTime? KnowledgeArticleViews_Date = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly OptionSetValue ExpiredReviewOptions = null;

        public readonly bool? IsInternal = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly bool? SetCategoryAssociations = null;

        public readonly EntityReference primaryauthorid = null;

        public readonly Guid? processid = null;

        public readonly string Description = null;

        public readonly bool? ReadyForReview = null;

        public readonly EntityReference PreviousArticleContentId = null;

        public readonly Guid? stageid = null;

        public readonly int? KnowledgeArticleViews = null;

        public readonly EntityReference RootArticleId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly OptionSetValue Review = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? ScheduledStatusId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly bool? UpdateContent = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? Rating_Date = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string ArticlePublicNumber = null;

        public readonly EntityReference ParentArticleContentId = null;

        public readonly string Content = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference LanguageLocaleId = null;

        public readonly DateTime? ExpirationDate = null;

        public readonly EntityReference SubjectId = null;

        public readonly int? MinorVersionNumber = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Approved = 1,
                Scheduled = 2,
                Published = 3,
                Expired = 4,
                Archived = 5,
                Discarded = 6
            }
            public enum ExpiredReviewOptions
            {
                NeedsUpdating = 0,
                Republish = 1,
                Archive = 2
            }
            public enum Review
            {
                Approved = 0,
                Rejected = 1
            }
            public enum StatusCode
            {
                Proposed = 1,
                Draft = 2,
                NeedsReview = 3,
                InReview = 4,
                Approved = 5,
                Scheduled = 6,
                Published = 7,
                NeedsReview1 = 8,
                Updating = 9,
                Expired = 10,
                Rejected = 11,
                Archived = 12,
                Discarded = 13,
                Rejected1 = 14
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgearticlescategories")]
    public class KnowledgeArticlesCategories : Entity
    {
        public const string EntityLogicalName = "knowledgearticlescategories";
        public KnowledgeArticlesCategories() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticlecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticlecategoryid"] = value;
            }
        }

        public readonly Guid? CategoryId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? KnowledgeArticleCategoryId = null;

        public readonly Guid? KnowledgeArticleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgearticleviews")]
    public class KnowledgeArticleViews : Entity
    {
        public const string EntityLogicalName = "knowledgearticleviews";
        public KnowledgeArticleViews() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticleviewsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticleviewsid"] = value;
            }
        }

        public readonly Guid? KnowledgeArticleViewsId = null;

        public readonly Guid? OwningUser = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly EntityReference KnowledgeArticleId = null;

        public readonly OptionSetValue statuscode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly DateTime? ViewDate = null;

        public readonly OptionSetValue Location = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? KnowledgeArticleView = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Location
            {
                Internal = 1,
                Web = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgebaserecord")]
    public class KnowledgeBaseRecord : Entity
    {
        public const string EntityLogicalName = "knowledgebaserecord";
        public KnowledgeBaseRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgebaserecordid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgebaserecordid"] = value;
            }
        }

        public readonly string PublicUrl = null;

        public readonly EntityReference OrganizationId = null;

        public readonly decimal? ExchangeRate = null;

        public readonly int? TimeZoneRuleVersionNumber = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly int? VersionNumber = null;

        public readonly string PrivateUrl = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string UniqueId = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Guid? KnowledgeBaseRecordId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgesearchmodel")]
    public class KnowledgeSearchModel : Entity
    {
        public const string EntityLogicalName = "knowledgesearchmodel";
        public KnowledgeSearchModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgesearchmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgesearchmodelid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string Description = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly string FetchXmlList = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? NgramSize = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string Entity = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? KnowledgeSearchModelIdUnique = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string SourceEntity = null;

        public readonly EntityReference AzureServiceConnectionId = null;

        public readonly Guid? KnowledgeSearchModelId = null;

        public readonly int? MaxKeyWords = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SourceEntity
            {
                Case = 112
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("languagelocale")]
    public class LanguageLocale : Entity
    {
        public const string EntityLogicalName = "languagelocale";
        public LanguageLocale() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("languagelocaleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["languagelocaleid"] = value;
            }
        }
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly int? LocaleId = null;

        public readonly OptionSetValue statuscode = null;

        public readonly string Code = null;

        public readonly int? VersionNumber = null;

        public readonly string Region = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? LanguageLocaleId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Language = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("languageprovisioningstate")]
    public class LanguageProvisioningState : Entity
    {
        public const string EntityLogicalName = "languageprovisioningstate";
        public LanguageProvisioningState() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("languageprovisioningstateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["languageprovisioningstateid"] = value;
            }
        }

        public readonly OptionSetValue ProvisioningStage = null;

        public readonly int? LanguageId = null;

        public readonly Guid? LanguageProvisioningStateId = null;

        public readonly string SolutionFileVersion = null;

        public readonly string ApplicationVersion = null;

        public readonly string SolutionUniqueName = null;

        public new static class Options
        {
            public enum ProvisioningStage
            {
                FileBased = 1,
                MetadataHelperDependent = 2,
                SystemOnly = 3,
                Other = 4,
                Ribbon = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("letter")]
    public class Letter : Entity
    {
        public const string EntityLogicalName = "letter";
        public Letter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly bool? IsBilled = null;

        public readonly int? VersionNumber = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityCollection from = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly DateTime? ActualStart = null;

        public readonly Guid? SubscriptionId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly bool? IsRegularActivity = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityCollection to = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly OptionSetValue StateCode = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly EntityCollection bcc = null;

        public readonly EntityCollection cc = null;

        public readonly bool? DirectionCode = null;

        public readonly string TraversedPath = null;

        public readonly string ActivityTypeCode = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference SLAId = null;

        public readonly EntityReference OwnerId = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string Subcategory = null;

        public readonly string Category = null;

        public readonly Guid? ProcessId = null;

        public readonly string Description = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? SortDate = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly Guid? StageId = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly string Address = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly Guid? ActivityId = null;

        public readonly int? OnHoldTime = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? ActualDurationMinutes = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum StatusCode
            {
                Open = 1,
                Draft = 2,
                Received = 3,
                Sent = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("license")]
    public class License : Entity
    {
        public const string EntityLogicalName = "license";
        public License() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("licenseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["licenseid"] = value;
            }
        }

        public readonly Guid? LicenseType = null;

        public readonly string LicenseKey = null;

        public readonly Guid? LicenseId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? InstalledOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("localconfigstore")]
    public class LocalConfigStore : Entity
    {
        public const string EntityLogicalName = "localconfigstore";
        public LocalConfigStore() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("id")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["id"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.Schema.Column("id")]
        public readonly Guid? Id1 = null;

        public readonly string AssemblyName = null;

        public readonly bool? IsValueSet = null;

        public readonly string Value = null;

        public readonly string KeyName = null;

        public readonly string PublicToken = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("lookupmapping")]
    public class LookUpMapping : Entity
    {
        public const string EntityLogicalName = "lookupmapping";
        public LookUpMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("lookupmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["lookupmappingid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue LookUpSourceCode = null;

        public readonly EntityReference ColumnMappingId = null;

        public readonly Guid? LookUpMappingId = null;

        public readonly string IntroducedVersion = null;

        public readonly string LookUpEntityName = null;

        public readonly OptionSetValue ProcessCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string LookUpAttributeName = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? LookUpMappingIdUnique = null;

        public readonly EntityReference TransformationParameterMappingId = null;

        public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum StatusCode
            {
                Active = 0
            }
            public enum LookUpSourceCode
            {
                Source = 0,
                System = 1
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailbox")]
    public class Mailbox : Entity
    {
        public const string EntityLogicalName = "mailbox";
        public Mailbox() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxid"] = value;
            }
        }

        public readonly OptionSetValue IncomingEmailStatus = null;

        public readonly string Username = null;

        public readonly int? VersionNumber = null;

        public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? OauthTokenExpiresOn = null;

        public readonly string HostId = null;

        public readonly bool? TestEmailConfigurationScheduled = null;

        public readonly bool? IsOauthAccessTokenSet = null;

        public readonly string LastMessageId = null;

        public readonly DateTime? PostponeSendingUntil = null;

        public readonly bool? EnabledForIncomingEmail = null;

        public readonly DateTime? LastSuccessfulSyncCompletedOn = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly OptionSetValue OutgoingEmailStatus = null;

        public readonly string OfficeAppsDeploymentError = null;

        public readonly int? NextScheduledACTSyncInSeconds = null;

        public readonly string OauthRefreshToken = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? ProcessingLastAttemptedOn = null;

        public readonly bool? EnabledForACT = null;

        public readonly OptionSetValue ACTStatus = null;

        public readonly EntityReference OwningTeam = null;

        public readonly DateTime? ReceivingPostponedUntil = null;

        public readonly OptionSetValue OfficeAppsDeploymentStatus = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly bool? IsForwardMailbox = null;

        public readonly bool? OrgMarkedAsPrimaryForExchangeSync = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly bool? OfficeAppsDeploymentScheduled = null;

        public readonly bool? IsACTSyncOrgFlagSet = null;

        public readonly string LastTaggedMessageId = null;

        public readonly OptionSetValue ExchangeContactsImportStatus = null;

        public readonly bool? ProcessAndDeleteEmails = null;

        public readonly int? NoACTCount = null;

        public readonly int? NoEmailCount = null;

        public readonly string OauthAccessToken = null;

        public readonly int? LastSyncErrorCode = null;

        public readonly string EmailAddress = null;

        public readonly int? LastSyncErrorCount = null;

        public readonly bool? IsOauthRefreshTokenSet = null;

        public readonly bool? IsPasswordSet = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? ProcessedTimes = null;

        public readonly OptionSetValue EmailRouterAccessApproval = null;

        public readonly DateTime? PostponeMailboxProcessingUntil = null;

        public readonly bool? IsEmailAddressApprovedByO365Admin = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly string LastSyncError = null;

        public readonly string UndeliverableFolder = null;

        public readonly DateTime? ReceivingPostponedUntilForACT = null;

        public readonly DateTime? LastActiveOn = null;

        public readonly int? LastDuration = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? PostponeOfficeAppsDeploymentUntil = null;

        public readonly int? TransientFailureCount = null;

        public readonly string ExchangeSyncStateXml = null;

        public readonly DateTime? TestMailboxAccessCompletedOn = null;

        public readonly DateTime? PostponeTestEmailConfigurationUntil = null;

        public readonly DateTime? TagEmailsAfter = null;

        public readonly int? ItemsProcessedForLastSync = null;

        public readonly DateTime? LastMailboxForcedUnlockOccurredOn = null;

        public readonly DateTime? OfficeAppsDeploymentCompleteOn = null;

        public readonly string Password = null;

        public readonly byte[] EntityImage = null;

        public readonly DateTime? ExchangeContactsImportCompletedOn = null;

        public readonly int? TestEmailConfigurationRetryCount = null;

        public readonly bool? EnabledForOutgoingEmail = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly OptionSetValue MailboxStatus = null;

        public readonly OptionSetValue IncomingEmailDeliveryMethod = null;

        public readonly int? ForcedUnlockCount = null;

        public readonly EntityReference OwningUser = null;

        public readonly int? ProcessingStateCode = null;

        public readonly OptionSetValue ACTDeliveryMethod = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? ItemsFailedForLastSync = null;

        public readonly string LastSyncErrorMachineName = null;

        public readonly bool? IsServiceAccount = null;

        public readonly string FolderHierarchy = null;

        public readonly DateTime? LastAutoDiscoveredOn = null;

        public readonly DateTime? LastSyncErrorOccurredOn = null;

        public readonly int? AverageTotalDuration = null;

        public readonly EntityReference EmailServerProfile = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly bool? IsExchangeContactsImportScheduled = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? VerboseLoggingEnabled = null;

        public readonly DateTime? ProcessEmailReceivedAfter = null;

        public readonly DateTime? LastSyncStartedOn = null;

        public readonly Guid? MailboxId = null;

        public readonly int? MailboxProcessingContext = null;

        public readonly bool? AllowEmailConnectorToUseCredentials = null;

        public readonly string EWSURL = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public new static class Options
        {
            public enum IncomingEmailStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum OutgoingEmailStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum ACTStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum OfficeAppsDeploymentStatus
            {
                NotInstalled = 0,
                Installed = 1,
                InstallFailed = 2,
                UninstallFailed = 3,
                UpgradeRequired = 4
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ExchangeContactsImportStatus
            {
                NotImported = 0,
                Imported = 1,
                ImportFailed = 2
            }
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum MailboxStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum ACTDeliveryMethod
            {
                MicrosoftDynamics365ForOutlook = 0,
                ServerSideSynchronization = 1,
                None = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailboxstatistics")]
    public class MailboxStatistics : Entity
    {
        public const string EntityLogicalName = "mailboxstatistics";
        public MailboxStatistics() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxstatisticsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxstatisticsid"] = value;
            }
        }

        public readonly Guid? MailboxStatisticsId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CrmItemsBacklog = null;

        public readonly int? ItemsProcessed = null;

        public readonly int? ScheduledTimeIntervalInMinutes = null;

        public readonly DateTime? MailboxProcessStartedOn = null;

        public readonly string IndividualStepDurations = null;

        public readonly Guid? AsyncEventId = null;

        public readonly DateTime? MailboxProcessScheduledOn = null;

        public readonly int? ItemsFailed = null;

        public readonly string MachineName = null;

        public readonly bool? ProcessResult = null;

        public readonly OptionSetValue OperationTypeId = null;

        public readonly EntityReference MailboxId = null;

        public readonly DateTime? MailboxProcessCompletedOn = null;

        public readonly int? ProcessTimeIntervalInMinutes = null;

        public new static class Options
        {
            public enum OperationTypeId
            {
                IncomingEmail = 0,
                OutgoingEmail = 1,
                ACT = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailboxtrackingcategory")]
    public class MailboxTrackingCategory : Entity
    {
        public const string EntityLogicalName = "mailboxtrackingcategory";
        public MailboxTrackingCategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxtrackingcategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxtrackingcategoryid"] = value;
            }
        }

        public readonly Guid? MailboxTrackingCategoryId = null;

        public readonly EntityReference OwningTeam = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningUser = null;

        public readonly int? ExchangeCategoryColor = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? CategoryOnboardingStatus = null;

        public readonly EntityReference MailboxId = null;

        public readonly Guid? ExchangeCategoryId = null;

        public readonly EntityReference OwnerId = null;

        public readonly string ExchangeCategoryName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailboxtrackingfolder")]
    public class MailboxTrackingFolder : Entity
    {
        public const string EntityLogicalName = "mailboxtrackingfolder";
        public MailboxTrackingFolder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxtrackingfolderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxtrackingfolderid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string ExchangeFolderId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly int? FolderOnboardingStatus = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? MailboxTrackingFolderId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string ExchangeFolderName = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference MailboxId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailmergetemplate")]
    public class MailMergeTemplate : Entity
    {
        public const string EntityLogicalName = "mailmergetemplate";
        public MailMergeTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailmergetemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailmergetemplateid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string IntroducedVersion = null;

        public readonly int? LanguageCode = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsCustomizable = null;

        public readonly string FileName = null;

        public readonly int? FileSize = null;

        public readonly string TemplateTypeCode = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly OptionSetValue DocumentFormat = null;

        public readonly bool? IsPersonal = null;

        public readonly Guid? MailMergeTemplateIdUnique = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string MimeType = null;

        public readonly Guid? MailMergeTemplateId = null;

        public readonly string DefaultFilter = null;

        public readonly string ParameterXml = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly bool? IsManaged = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Body = null;

        public readonly OptionSetValue MailMergeType = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum TemplateTypeCode
            {

            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum DocumentFormat
            {
                _2003 = 1,
                _2007 = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum MailMergeType
            {
                Letter = 1,
                EmailMessage = 2,
                Envelope = 3,
                Labels = 4,
                Quotes = 5,
                Fax = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("managedidentity")]
    public class ManagedIdentity : UserOrTeamEntity
    {
        public const string EntityLogicalName = "managedidentity";
        public ManagedIdentity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("managedidentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["managedidentityid"] = value;
            }
        }

        public readonly OptionSetValue CredentialSource = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? ManagedIdentityId = null;

        public readonly Guid? ObjectId = null;

        public readonly Guid? TenantId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? ApplicationId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string ClientSecret = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference KeyVaultReferenceId = null;

        public new static class Options
        {
            public enum CredentialSource
            {
                ClientSecret = 0,
                KeyVault = 1,
                IsManaged = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("managedproperty")]
    public class ManagedProperty : Entity
    {
        public const string EntityLogicalName = "managedproperty";
        public ManagedProperty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("managedpropertyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["managedpropertyid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string LogicalName = null;

        public readonly string EnablesAttributeName = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? ManagedPropertyRowId = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string EnablesEntityName = null;

        public readonly Guid? ManagedPropertyId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("metadatadifference")]
    public class MetadataDifference : Entity
    {
        public const string EntityLogicalName = "metadatadifference";
        public MetadataDifference() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("metadatadifferenceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["metadatadifferenceid"] = value;
            }
        }

        public readonly string IntroducedVersionString = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? MetadataDifferenceId = null;

        public readonly string DifferenceXml = null;

        public readonly double? IntroducedVersion = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("metric")]
    public class Metric : Entity
    {
        public const string EntityLogicalName = "metric";
        public Metric() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("metricid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["metricid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string Description = null;

        public readonly OptionSetValue StatusCode = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly Guid? MetricId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsStretchTracked = null;

        public readonly bool? IsAmount = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue AmountDataType = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Open = 0,
                Closed = 1
            }
            public enum AmountDataType
            {
                Money = 0,
                Decimal = 1,
                Integer = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mobileofflineprofile")]
    public class MobileOfflineProfile : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofile";
        public MobileOfflineProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileid"] = value;
            }
        }

        public readonly bool? IsValidated = null;

        public readonly string TraversedPath = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? StageId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? MobileOfflineProfileIdUnique = null;

        public readonly int? VersionNumber = null;

        public readonly string SelectedEntityMetadata = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? PublishedOn = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? ProcessId = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? MobileOfflineProfileId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mobileofflineprofileitem")]
    public class MobileOfflineProfileItem : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofileitem";
        public MobileOfflineProfileItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileitemid"] = value;
            }
        }

        public readonly bool? IsValidated = null;

        public readonly string TraversedPath = null;

        public readonly bool? CanBeFollowed = null;

        public readonly string IntroducedVersion = null;

        public readonly bool? RecordsOwnedByMyBusinessUnit = null;

        public readonly string RelationshipData = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly string ProfileItemEntityFilter = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? StageId = null;

        public readonly int? EntityObjectTypeCode = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string ViewQuery = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly bool? GetRelatedEntityRecords = null;

        public readonly bool? IsVisibleInGrid = null;

        public readonly bool? RecordsOwnedByMe = null;

        public readonly DateTime? PublishedOn = null;

        public readonly bool? IsManaged = null;

        public readonly string SelectedEntityMetadata = null;

        public readonly Guid? ProcessId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? MobileOfflineProfileItemId = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? MobileOfflineProfileItemIdUnique = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string SelectedEntityTypeCode = null;

        public readonly bool? RecordsOwnedByMyTeam = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? SyncIntervalInMinutes = null;

        public readonly EntityReference ProfileItemRule = null;

        public readonly OptionSetValue RecordDistributionCriteria = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SelectedEntityTypeCode
            {
                Account = 1,
                Contact = 2,
                Note = 5,
                User = 8,
                Team = 9,
                Attachment = 1001,
                Queue = 2020,
                QueueItem = 2029,
                Appointment = 4201,
                Email = 4202,
                Task = 4212,
                SLAKPIInstance = 9752,
                ActivityFileAttachment = 10050,
                ImageDescriptor = 1007,
                IdeaToProjectBusinessProcess = 10139,
                ChallengeManagementProcess = 10141
            }
            public enum RecordDistributionCriteria
            {
                DownloadRelatedDataOnly = 0,
                AllRecords = 1,
                OtherDataFilter = 2,
                CustomDataFilter = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mobileofflineprofileitemassociation")]
    public class MobileOfflineProfileItemAssociation : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofileitemassociation";
        public MobileOfflineProfileItemAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileitemassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileitemassociationid"] = value;
            }
        }

        public readonly bool? IsValidated = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string TraversedPath = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue SelectedRelationShipsSchema = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? RelationshipId = null;

        public readonly Guid? StageId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? PublishedOn = null;

        public readonly Guid? MobileOfflineProfileItemAssociationId = null;

        public readonly Guid? MobileOfflineProfileItemAssociationIdUnique = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? ProcessId = null;

        public readonly Guid? SolutionId = null;

        public readonly string RelationshipDisplayName = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference MobileOfflineProfileItemId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string RelationshipData = null;

        public readonly string RelationshipName = null;

        public readonly string ProfileItemAssociationEntityFilter = null;

        public new static class Options
        {
            public enum SelectedRelationShipsSchema
            {

            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("monthlyfiscalcalendar")]
    public class MonthlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "monthlyfiscalcalendar";
        public MonthlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month5")]
        public readonly Money Period5 = null;

        public readonly DateTime? CreatedOn = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month10_base")]
        public readonly Money Period10_Base = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month3_base")]
        public readonly Money Period3_Base = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month11")]
        public readonly Money Period11 = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month10")]
        public readonly Money Period10 = null;

        public readonly int? FiscalPeriodType = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month12")]
        public readonly Money Period12 = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month7")]
        public readonly Money Period7 = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month6")]
        public readonly Money Period6 = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month9")]
        public readonly Money Period9 = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month8")]
        public readonly Money Period8 = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month4_base")]
        public readonly Money Period4_Base = null;

        public readonly EntityReference BusinessUnitId = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month7_base")]
        public readonly Money Period7_Base = null;

        public readonly DateTime? EffectiveOn = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month1_base")]
        public readonly Money Period1_Base = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month1")]
        public readonly Money Period1 = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month4")]
        public readonly Money Period4 = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month9_base")]
        public readonly Money Period9_Base = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month2")]
        public readonly Money Period2 = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month12_base")]
        public readonly Money Period12_Base = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month11_base")]
        public readonly Money Period11_Base = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month2_base")]
        public readonly Money Period2_Base = null;

        public readonly Guid? UserFiscalCalendarId = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month3")]
        public readonly Money Period3 = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month8_base")]
        public readonly Money Period8_Base = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month6_base")]
        public readonly Money Period6_Base = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("month5_base")]
        public readonly Money Period5_Base = null;

        public readonly EntityReference SalesPersonId = null;

        public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aibdataset")]
    public class msdyn_AIBDataset : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aibdataset";
        public msdyn_AIBDataset() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aibdatasetid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aibdatasetid"] = value;
            }
        }

        public readonly string msdyn_Metadata = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly EntityReference msdyn_AIBDatasetsContainerId = null;

        public readonly Guid? msdyn_AIBDatasetId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aibdatasetfile")]
    public class msdyn_AIBDatasetFile : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aibdatasetfile";
        public msdyn_AIBDatasetFile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aibdatasetfileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aibdatasetfileid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly EntityReference msdyn_AIBFileId = null;

        public readonly DateTime? msdyn_LastModifiedDate = null;

        public readonly Guid? msdyn_AIBDatasetFileId = null;

        public readonly EntityReference msdyn_AIBDatasetId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aibdatasetrecord")]
    public class msdyn_AIBDatasetRecord : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aibdatasetrecord";
        public msdyn_AIBDatasetRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aibdatasetrecordid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aibdatasetrecordid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly Guid? msdyn_AIBDatasetRecordId = null;

        public readonly EntityReference msdyn_AIBDatasetsId = null;

        public readonly string msdyn_Data = null;

        public readonly OptionSetValue msdyn_RecordType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_RecordType
            {
                EeInputRow = 190691000,
                EeNamedEntity = 190691001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aibdatasetscontainer")]
    public class msdyn_AIBDatasetsContainer : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aibdatasetscontainer";
        public msdyn_AIBDatasetsContainer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aibdatasetscontainerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aibdatasetscontainerid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly Guid? msdyn_AIBDatasetsContainerId = null;

        public readonly EntityReference msdyn_AIModelId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aibfile")]
    public class msdyn_AIBFile : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aibfile";
        public msdyn_AIBFile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aibfileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aibfileid"] = value;
            }
        }

        public readonly Guid? msdyn_ImageId = null;

        public readonly string msdyn_Checksum = null;

        public readonly byte[] msdyn_Image = null;

        public readonly int? msdyn_Size = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly Guid? msdyn_AIBFileId = null;

        public readonly EntityReference msdyn_AIBDatasetsContainerId = null;

        public readonly string msdyn_ImportMetadata = null;

        public readonly string msdyn_MimeType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aibfileattacheddata")]
    public class msdyn_AIBFileAttachedData : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aibfileattacheddata";
        public msdyn_AIBFileAttachedData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aibfileattacheddataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aibfileattacheddataid"] = value;
            }
        }

        public readonly Guid? msdyn_AIBFileAttachedDataId = null;

        public readonly string msdyn_Type = null;

        public readonly EntityReference msdyn_AIBDatasetFileId = null;

        public readonly string msdyn_Data = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Key = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aiconfiguration")]
    public class msdyn_AIConfiguration : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aiconfiguration";
        public msdyn_AIConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aiconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aiconfigurationid"] = value;
            }
        }

        public readonly string msdyn_RunConfiguration = null;

        public readonly string msdyn_SchedulingOptions = null;

        public readonly string msdyn_ModelPerformance = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue msdyn_Type = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly bool? IsCustomizable = null;

        public readonly string msdyn_CustomConfiguration = null;

        public readonly string msdyn_ModelProvisioningStatus = null;

        public readonly EntityReference msdyn_TrainedModelAIConfigurationPareId = null;

        public readonly string msdyn_ResourceInfo = null;

        public readonly DateTime? msdyn_lasttrainorrundate = null;

        public readonly string msdyn_ModelRunDataSpecification = null;

        public readonly string msdyn_DataBinding = null;

        public readonly int? msdyn_TemplateVersion = null;

        public readonly EntityReference msdyn_CreatedFromConfigurationId = null;

        public readonly string msdyn_ModelData = null;

        public readonly string msdyn_lasterrors = null;

        public readonly int? msdyn_MinorIterationNumber = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly Guid? msdyn_AIConfigurationIdUnique = null;

        public readonly int? msdyn_MajorIterationNumber = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? msdyn_AIConfigurationId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string msdyn_modelglobalexplainability = null;

        public readonly EntityReference msdyn_AIModelId = null;

        public readonly string msdyn_ModelProvisioningMetadata = null;

        public new static class Options
        {
            public enum msdyn_Type
            {
                TrainingConfiguration = 190690000,
                RunConfiguration = 190690001
            }
            public enum statecode
            {
                Draft = 0,
                InProgress = 1,
                Done = 2,
                Failed = 3
            }
            public enum statuscode
            {
                Draft = 0,
                Training = 1,
                Cancelling = 2,
                Publishing = 3,
                Unpublishing = 4,
                Deleting = 5,
                Trained = 6,
                Published = 7,
                Scheduled = 8,
                TrainFailed = 9,
                PublishFailed = 10,
                UnpublishFailed = 11,
                CancelFailed = 12,
                DeleteFailed = 13,
                UnsuccessfulTraining = 14
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aifptrainingdocument")]
    public class msdyn_AIFpTrainingDocument : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aifptrainingdocument";
        public msdyn_AIFpTrainingDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aifptrainingdocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aifptrainingdocumentid"] = value;
            }
        }

        public readonly string msdyn_Checksum = null;

        public readonly string msdyn_Metadata = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly Guid? msdyn_AIFpTrainingDocumentId = null;

        public readonly EntityReference msdyn_AIConfigurationId = null;

        public readonly string msdyn_SourceType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aimodel")]
    public class msdyn_AIModel : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aimodel";
        public msdyn_AIModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aimodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aimodelid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? msdyn_AIModelIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly string IntroducedVersion = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly EntityReference msdyn_TemplateId = null;

        public readonly EntityReference msdyn_RetrainWorkflowId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference msdyn_ScheduleInferenceWorkflowId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string msdyn_ModelCreationContext = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference msdyn_ActiveRunConfigurationId = null;

        public readonly Guid? msdyn_AIModelId = null;

        public readonly bool? msdyn_ShareWithOrganizationOnCreate = null;

        public new static class Options
        {
            public enum statecode
            {
                Inactive = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Inactive = 0,
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aiodimage")]
    public class msdyn_AIOdImage : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aiodimage";
        public msdyn_AIOdImage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aiodimageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aiodimageid"] = value;
            }
        }

        public readonly string msdyn_Checksum = null;

        public readonly string msdyn_Metadata = null;

        public readonly byte[] EntityImage = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly Guid? msdyn_AIOdImageId = null;

        public readonly string msdyn_Description = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aiodlabel")]
    public class msdyn_AIOdLabel : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aiodlabel";
        public msdyn_AIOdLabel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aiodlabelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aiodlabelid"] = value;
            }
        }

        public readonly string msdyn_LabelString = null;

        public readonly Guid? msdyn_AIOdLabelId = null;

        public readonly string msdyn_SourceRecordId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_SourceEntitySetName = null;

        public readonly string msdyn_SourceAttributeLogicalName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aiodlabel_msdyn_aiconfiguration")]
    public class msdyn_aiodlabel_msdyn_aiconfiguration : Entity
    {
        public const string EntityLogicalName = "msdyn_aiodlabel_msdyn_aiconfiguration";
        public msdyn_aiodlabel_msdyn_aiconfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aiodlabel_msdyn_aiconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aiodlabel_msdyn_aiconfigurationid"] = value;
            }
        }

        public readonly Guid? msdyn_aiconfigurationid = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? msdyn_aiodlabel_msdyn_aiconfigurationId = null;

        public readonly Guid? msdyn_aiodlabelid = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aiodtrainingboundingbox")]
    public class msdyn_AIOdTrainingBoundingBox : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aiodtrainingboundingbox";
        public msdyn_AIOdTrainingBoundingBox() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aiodtrainingboundingboxid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aiodtrainingboundingboxid"] = value;
            }
        }

        public readonly double? msdyn_Width = null;

        public readonly EntityReference msdyn_AIOdLabelId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly EntityReference msdyn_AIOdTrainingImageId = null;

        public readonly double? msdyn_Left = null;

        public readonly Guid? msdyn_AIOdTrainingBoundingBoxId = null;

        public readonly double? msdyn_Height = null;

        public readonly double? msdyn_Top = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aiodtrainingimage")]
    public class msdyn_AIOdTrainingImage : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aiodtrainingimage";
        public msdyn_AIOdTrainingImage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aiodtrainingimageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aiodtrainingimageid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly Guid? msdyn_AIOdTrainingImageId = null;

        public readonly DateTime? msdyn_LastModifiedDate = null;

        public readonly EntityReference msdyn_AIConfigurationId = null;

        public readonly EntityReference msdyn_AIOdImageId = null;

        public readonly string msdyn_SourceType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_aitemplate")]
    public class msdyn_AITemplate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_aitemplate";
        public msdyn_AITemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_aitemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_aitemplateid"] = value;
            }
        }

        public readonly int? msdyn_TemplateVersion = null;

        public readonly Guid? msdyn_AITemplateId = null;

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_UniqueName = null;

        public readonly Guid? msdyn_AITemplateIdUnique = null;

        public readonly string msdyn_ResourceInfo = null;

        public readonly bool? IsCustomizable = null;

        public readonly string IntroducedVersion = null;

        public readonly string msdyn_DataBinding = null;

        public readonly string msdyn_defaultrunschedulingoptions = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string msdyn_RunDataSpecification = null;

        public readonly string msdyn_UXConfiguration = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string msdyn_TrainingDataSpecification = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? msdyn_IsTrainable = null;

        public readonly bool? IsManaged = null;

        public readonly string msdyn_RunConfigSchema = null;

        public readonly string msdyn_TrainingConfigSchema = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_analysiscomponent")]
    public class msdyn_analysiscomponent : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_analysiscomponent";
        public msdyn_analysiscomponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_analysiscomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_analysiscomponentid"] = value;
            }
        }

        public readonly int? msdyn_sevlowcount = null;

        public readonly string msdyn_ComponentId = null;

        public readonly OptionSetValue msdyn_AnalysisComponentType = null;

        public readonly int? msdyn_RulePassCount = null;

        public readonly int? msdyn_sevmediumcount = null;

        public readonly EntityReference msdyn_AnalysisJobId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly int? msdyn_RetryCount = null;

        public readonly OptionSetValue msdyn_ComponentType = null;

        public readonly int? msdyn_RuleFailCount = null;

        public readonly int? msdyn_ErrorCount = null;

        public readonly Guid? msdyn_analysiscomponentId = null;

        public readonly int? msdyn_SuggestionCount = null;

        public readonly int? msdyn_WarningCount = null;

        public readonly string msdyn_ComponentVersion = null;

        public readonly string msdyn_ComponentName = null;

        public readonly EntityReference msdyn_SolutionHealthRuleSetId = null;

        public readonly int? msdyn_sevcriticalcount = null;

        public readonly int? msdyn_sevhighcount = null;

        public readonly int? msdyn_RulePassRate = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_AnalysisComponentType
            {
                ObjectHealth = 192350002,
                ComponentHealth = 192350001,
                OrganizationHealth = 192350000
            }
            public enum msdyn_ComponentType
            {
                Solution = 192350000,
                Entity = 192350001,
                View = 192350002,
                Form = 192350003,
                Plugin = 192350004,
                Configuration = 192350005
            }
            public enum statuscode
            {
                Pending = 1,
                Running = 192350000,
                Complete = 192350001,
                Exception = 192350002,
                CompletedWithExceptions = 192350003,
                Canceled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_analysisjob")]
    public class msdyn_analysisjob : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_analysisjob";
        public msdyn_analysisjob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_analysisjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_analysisjobid"] = value;
            }
        }

        public readonly string msdyn_CustomDetails = null;

        public readonly int? msdyn_RulePassCount = null;

        public readonly string msdyn_TriggerType = null;

        public readonly string msdyn_RunCorrelationId = null;

        public readonly int? msdyn_sevmediumcount = null;

        public readonly Guid? msdyn_analysisjobId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_TenantId = null;

        public readonly DateTime? msdyn_StartTime = null;

        public readonly int? msdyn_RuleFailCount = null;

        public readonly int? msdyn_ErrorCount = null;

        public readonly int? msdyn_SuggestionCount = null;

        public readonly int? msdyn_sevlowcount = null;

        public readonly int? msdyn_sevhighcount = null;

        public readonly int? msdyn_RuleRunCount = null;

        public readonly string msdyn_Exception = null;

        public readonly int? msdyn_sevcriticalcount = null;

        public readonly DateTime? msdyn_EndTime = null;

        public readonly int? msdyn_WarningCount = null;

        public readonly string msdyn_DisplayStatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Pending = 1,
                Running = 192350000,
                Complete = 192350001,
                Exception = 192350002,
                CompletedWithExceptions = 192350003,
                Canceled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_analysisresult")]
    public class msdyn_analysisresult : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_analysisresult";
        public msdyn_analysisresult() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_analysisresultid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_analysisresultid"] = value;
            }
        }

        public readonly OptionSetValue msdyn_AnalysisComponentType = null;

        public readonly string msdyn_Type = null;

        public readonly Guid? msdyn_analysisresultId = null;

        public readonly OptionSetValue msdyn_ReturnStatus = null;

        public readonly EntityReference msdyn_AnalysisJobId = null;

        public readonly string msdyn_RuleId = null;

        public readonly string msdyn_RepairIssueType = null;

        public readonly bool? msdyn_HasResolution = null;

        public readonly OptionSetValue msdyn_Level = null;

        public readonly string msdyn_Snippet = null;

        public readonly string msdyn_MessageArguments = null;

        public readonly string msdyn_SolutionHealthMessage = null;

        public readonly string msdyn_FileUri = null;

        public readonly int? msdyn_Line = null;

        public readonly string msdyn_MessageId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_EntityName = null;

        public readonly string msdyn_Module = null;

        public readonly OptionSetValue msdyn_ComponentType = null;

        public readonly string msdyn_RuleReferenceUri = null;

        public readonly OptionSetValue msdyn_Severity = null;

        public readonly OptionSetValue msdyn_Category = null;

        public readonly string msdyn_Message = null;

        public readonly string msdyn_Member = null;

        public readonly EntityReference msdyn_AnalysisComponentId = null;

        public readonly string msdyn_helplink = null;

        public new static class Options
        {
            public enum msdyn_AnalysisComponentType
            {
                OrganizationHealth = 192350000,
                ComponentHealth = 192350001
            }
            public enum msdyn_ReturnStatus
            {
                Resolved = 192350003,
                Pass = 192350000,
                Fail = 192350001,
                ConfigError = 192350002,
                Warning = 192350004,
                Error = 192350005,
                Suggestion = 192350006
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Level
            {
                Error = 192350000,
                Warning = 192350001
            }
            public enum msdyn_ComponentType
            {
                WebResources = 192350000,
                PlugIn = 192350001,
                Configuration = 192350002
            }
            public enum msdyn_Severity
            {
                Low = 192350000,
                Medium = 192350001,
                High = 192350002,
                Critical = 192350003
            }
            public enum msdyn_Category
            {
                Accessibility = 192350008,
                Design = 192350004,
                Maintainability = 192350006,
                OnlineMigration = 192350005,
                Performance = 192350000,
                Security = 192350003,
                Supportability = 192350007,
                UpgradeReadiness = 192350001,
                Usage = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_analysisresultdetail")]
    public class msdyn_analysisresultdetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_analysisresultdetail";
        public msdyn_analysisresultdetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_analysisresultdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_analysisresultdetailid"] = value;
            }
        }

        public readonly EntityReference msdyn_AnalysisResult = null;

        public readonly bool? msdyn_CanOpenEntityRecord = null;

        public readonly string msdyn_ResultEntityId = null;

        public readonly string msdyn_ResultEntityLogicalName = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_ResultEntityPrimaryKey = null;

        public readonly Guid? msdyn_analysisresultdetailId = null;

        public readonly string msdyn_Message = null;

        public readonly string msdyn_EntityName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_componentlayer")]
    public class msdyn_componentlayer : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_componentlayer";
        public msdyn_componentlayer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_componentlayerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_componentlayerid"] = value;
            }
        }

        public readonly string msdyn_componentid = null;

        public readonly string msdyn_solutioncomponentname = null;

        public readonly string msdyn_componentjson = null;

        public readonly string msdyn_publishername = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_overwritetime")]
        public readonly DateTime? msdyn_endtime = null;

        public readonly int? msdyn_order = null;

        public readonly string msdyn_solutionname = null;

        public readonly Guid? msdyn_componentlayerId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_changes = null;

        public readonly string msdyn_children = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_componentlayerdatasource")]
    public class msdyn_componentlayerdatasource : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_componentlayerdatasource";
        public msdyn_componentlayerdatasource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_componentlayerdatasourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_componentlayerdatasourceid"] = value;
            }
        }

        public readonly Guid? msdyn_componentlayerdatasourceId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_dataflow")]
    public class msdyn_dataflow : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_dataflow";
        public msdyn_dataflow() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_dataflowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_dataflowid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string msdyn_MashupDocument = null;

        public readonly string msdyn_RefreshSettings = null;

        public readonly string msdyn_OriginalDataflowId = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string msdyn_Description = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string msdyn_MashupSettings = null;

        public readonly Guid? SolutionId = null;

        public readonly string msdyn_GatewayObjectId = null;

        public readonly string msdyn_InternalVersion = null;

        public readonly string msdyn_DestinationADLS = null;

        public readonly string msdyn_EmailSettings = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? msdyn_dataflowId = null;

        public readonly string msdyn_RefreshHistory = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_federatedarticle")]
    public class msdyn_federatedarticle : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_federatedarticle";
        public msdyn_federatedarticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_federatedarticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_federatedarticleid"] = value;
            }
        }

        public readonly string msdyn_searchproviderarticleid = null;

        public readonly EntityReference msdyn_searchproviderid = null;

        public readonly Guid? msdyn_federatedarticleId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_title = null;

        public readonly string msdyn_url = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_federatedarticleincident")]
    public class msdyn_federatedarticleincident : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_federatedarticleincident";
        public msdyn_federatedarticleincident() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_federatedarticleincidentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_federatedarticleincidentid"] = value;
            }
        }

        public readonly string msdyn_searchproviderarticleid = null;

        public readonly EntityReference msdyn_incidentid = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly EntityReference msdyn_federatedarticleid = null;

        public readonly Guid? msdyn_federatedarticleincidentId = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_healthcare_feedback")]
    public class msdyn_healthcare_feedback : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_healthcare_feedback";
        public msdyn_healthcare_feedback() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_healthcare_feedbackid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_healthcare_feedbackid"] = value;
            }
        }

        public readonly string msdyn_Text = null;

        public readonly string msdyn_Tags = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly Guid? msdyn_healthcare_feedbackId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_helppage")]
    public class msdyn_helppage : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_helppage";
        public msdyn_helppage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_helppageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_helppageid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly int? msdyn_locale = null;

        public readonly bool? IsCustomizable = null;

        public readonly string msdyn_contenttype = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? msdyn_helppageId = null;

        public readonly Guid? ComponentIdUnique = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_displayname = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string msdyn_content = null;

        public readonly string msdyn_path = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_kalanguagesetting")]
    public class msdyn_kalanguagesetting : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_kalanguagesetting";
        public msdyn_kalanguagesetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_kalanguagesettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_kalanguagesettingid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_useOrgUILanguage")]
        public readonly bool? msdyn_useOrgUILanguage = null;

        public readonly Guid? msdyn_kalanguagesettingId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_agentid = null;

        public readonly string msdyn_languagelocaleid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_kmfederatedsearchconfig")]
    public class msdyn_kmfederatedsearchconfig : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_kmfederatedsearchconfig";
        public msdyn_kmfederatedsearchconfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_kmfederatedsearchconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_kmfederatedsearchconfigid"] = value;
            }
        }

        public readonly string Organization = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly string SharepointURL = null;

        public readonly Guid? msdyn_kmfederatedsearchconfigId = null;

        public readonly OptionSetValue SearchType = null;

        public readonly string msdyn_Description = null;

        public readonly string ConnectionId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum SearchType
            {
                CrossOrganizationalSearch = 100000000,
                Sharepoint = 100000001,
                MicrosoftSearchConnector = 100000002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_kmpersonalizationsetting")]
    public class msdyn_kmpersonalizationsetting : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_kmpersonalizationsetting";
        public msdyn_kmpersonalizationsetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_kmpersonalizationsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_kmpersonalizationsettingid"] = value;
            }
        }

        public readonly Guid? msdyn_kmpersonalizationsettingId = null;

        public readonly string msdyn_filtercontroldata = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_languagecontrol = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_knowledgearticleimage")]
    public class msdyn_knowledgearticleimage : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_knowledgearticleimage";
        public msdyn_knowledgearticleimage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_knowledgearticleimageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_knowledgearticleimageid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_FileName = null;

        public readonly EntityReference msdyn_ParentKnowledgeArticleID = null;

        public readonly Guid? msdyn_knowledgearticleimageId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_knowledgearticletemplate")]
    public class msdyn_knowledgearticletemplate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_knowledgearticletemplate";
        public msdyn_knowledgearticletemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_knowledgearticletemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_knowledgearticletemplateid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_LanguageLocaleIdName")]
        public readonly string msdyn_LanguageLocaleIdName = null;

        public readonly Guid? msdyn_knowledgearticletemplateId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly EntityReference msdyn_subjectid = null;

        public readonly string msdyn_Content = null;

        public readonly string msdyn_keywords = null;

        public readonly bool? msdyn_isinternal = null;

        public readonly string msdyn_Description = null;

        public readonly string msdyn_title = null;

        public readonly string msdyn_languagelocaleid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_knowledgeinteractioninsight")]
    public class msdyn_knowledgeinteractioninsight : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_knowledgeinteractioninsight";
        public msdyn_knowledgeinteractioninsight() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_knowledgeinteractioninsightid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_knowledgeinteractioninsightid"] = value;
            }
        }

        public readonly int? msdyn_ArticleRank = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_InteractionType = null;

        public readonly string msdyn_KnowledgeOperationId = null;

        public readonly string msdyn_InteractionContext = null;

        public readonly Guid? msdyn_knowledgeinteractioninsightId = null;

        public readonly string msdyn_KnowledgeOperationType = null;

        public readonly string msdyn_ArticleRecordId = null;

        public readonly double? msdyn_ArticleRelevance = null;

        public readonly DateTime? msdyn_TimeStamp = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_knowledgepersonalfilter")]
    public class msdyn_knowledgepersonalfilter : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_knowledgepersonalfilter";
        public msdyn_knowledgepersonalfilter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_knowledgepersonalfilterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_knowledgepersonalfilterid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_AttributeName = null;

        public readonly string msdyn_EntityName = null;

        public readonly string msdyn_PreferredValues = null;

        public readonly Guid? msdyn_knowledgepersonalfilterId = null;

        public readonly bool? msdyn_Enabled = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_knowledgesearchfilter")]
    public class msdyn_knowledgesearchfilter : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_knowledgesearchfilter";
        public msdyn_knowledgesearchfilter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_knowledgesearchfilterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_knowledgesearchfilterid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly string msdyn_UniqueName = null;

        public readonly Guid? msdyn_knowledgesearchfilterId = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_AttributeName = null;

        public readonly int? msdyn_OrderId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string msdyn_DefaultValues = null;

        public readonly string msdyn_EntityName = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly string msdyn_SelectedValues = null;

        public readonly bool? msdyn_IsCustom = null;

        public readonly bool? msdyn_Enabled = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_knowledgesearchinsight")]
    public class msdyn_knowledgesearchinsight : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_knowledgesearchinsight";
        public msdyn_knowledgesearchinsight() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_knowledgesearchinsightid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_knowledgesearchinsightid"] = value;
            }
        }

        public readonly int? msdyn_ResultCount = null;

        public readonly string msdyn_Filters = null;

        public readonly Guid? msdyn_knowledgesearchinsightId = null;

        public readonly string msdyn_SortBy = null;

        public readonly string msdyn_EntityType = null;

        public readonly DateTime? msdyn_TimeStamp = null;

        public readonly string msdyn_EntityRecordId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_SearchTerm = null;

        public readonly string msdyn_ApplicationName = null;

        public readonly string msdyn_CorrelationId = null;

        public readonly string msdyn_SearchProviderName = null;

        public readonly string msdyn_SearchProviderId = null;

        public readonly string msdyn_CustomControlId = null;

        public readonly string msdyn_SearchType = null;

        public readonly string msdyn_InitiatedBy = null;

        public readonly int? msdyn_ResponseTime = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_nonrelationalds")]
    public class msdyn_nonrelationalds : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_nonrelationalds";
        public msdyn_nonrelationalds() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_nonrelationaldsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_nonrelationaldsid"] = value;
            }
        }

        public readonly Guid? msdyn_nonrelationaldsId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_objectdetectionproduct")]
    public class msdyn_ObjectDetectionProduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_objectdetectionproduct";
        public msdyn_ObjectDetectionProduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_objectdetectionproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_objectdetectionproductid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_Name = null;

        public readonly Guid? msdyn_ObjectDetectionProductId = null;

        public readonly int? msdyn_InventoryTotal = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_odatav4ds")]
    public class msdyn_odatav4ds : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_odatav4ds";
        public msdyn_odatav4ds() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_odatav4dsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_odatav4dsid"] = value;
            }
        }

        public readonly string msdyn_parameter9name = null;

        public readonly string msdyn_parameter7name = null;

        public readonly bool? msdyn_isparameter8header = null;

        public readonly string msdyn_parameter1value = null;

        public readonly string msdyn_parameter3value = null;

        public readonly string msdyn_parameter2value = null;

        public readonly string msdyn_parameter5value = null;

        public readonly string msdyn_parameter9value = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_parameter6value = null;

        public readonly bool? msdyn_isparameter10header = null;

        public readonly bool? msdyn_isparameter6header = null;

        public readonly bool? msdyn_isparameter1header = null;

        public readonly string msdyn_parameter4name = null;

        public readonly string msdyn_parameter7value = null;

        public readonly bool? msdyn_isparameter5header = null;

        public readonly string msdyn_parameter6name = null;

        public readonly bool? msdyn_isparameter3header = null;

        public readonly bool? msdyn_returninlinecount = null;

        public readonly string msdyn_parameter8name = null;

        public readonly int? msdyn_timeout = null;

        public readonly bool? msdyn_paginationmode = null;

        public readonly string msdyn_parameter10value = null;

        public readonly string msdyn_parameter1name = null;

        public readonly string msdyn_parameter10name = null;

        public readonly string msdyn_parameter3name = null;

        public readonly string msdyn_description = null;

        public readonly Guid? msdyn_odatav4dsId = null;

        public readonly string msdyn_parameter2name = null;

        public readonly bool? msdyn_isparameter4header = null;

        public readonly string msdyn_parameter8value = null;

        public readonly OptionSetValue msdyn_paginationtype = null;

        public readonly bool? msdyn_isparameter7header = null;

        public readonly string msdyn_parameter5name = null;

        public readonly bool? msdyn_isparameter9header = null;

        public readonly string msdyn_parameter4value = null;

        public readonly bool? msdyn_isparameter2header = null;

        public readonly string msdyn_uri = null;

        public new static class Options
        {
            public enum msdyn_paginationtype
            {
                ClientSidePaging = 0,
                ServerSidePaging = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_onlineshopperintention")]
    public class msdyn_onlineshopperintention : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_onlineshopperintention";
        public msdyn_onlineshopperintention() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_onlineshopperintentionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_onlineshopperintentionid"] = value;
            }
        }

        public readonly double? msdyn_SpecialDay = null;

        public readonly string msdyn_VisitorType = null;

        public readonly double? msdyn_BounceRates = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly int? msdyn_ProductRelated = null;

        public readonly bool? msdyn_Weekend = null;

        public readonly double? msdyn_ProductRelated_Duration = null;

        public readonly int? msdyn_Region = null;

        public readonly int? msdyn_Administrative = null;

        public readonly Guid? msdyn_onlineshopperintentionId = null;

        public readonly int? msdyn_Browser = null;

        public readonly double? msdyn_ExitRates = null;

        public readonly int? msdyn_Informational = null;

        public readonly bool? msdyn_Revenue = null;

        public readonly string msdyn_Month = null;

        public readonly int? msdyn_OperatingSystems = null;

        public readonly double? msdyn_Administrative_Duration = null;

        public readonly int? msdyn_TrafficType = null;

        public readonly double? msdyn_Informational_Duration = null;

        public readonly double? msdyn_PageValues = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_pminferredtask")]
    public class msdyn_pminferredtask : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_pminferredtask";
        public msdyn_pminferredtask() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_pminferredtaskid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_pminferredtaskid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? msdyn_pminferredtaskId = null;

        public readonly string msdyn_description = null;

        public readonly string msdyn_sharedrecordingmetadata = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string msdyn_automationdata = null;

        public readonly string msdyn_lasterrors = null;

        public readonly string msdyn_outputdata = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue msdyn_automationstatus = null;

        public readonly string msdyn_iterationid = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum statecode
            {
                Draft = 0,
                InProgress = 1,
                Done = 2,
                Failed = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum msdyn_automationstatus
            {
                NotStarted = 200000000,
                NotRecommended = 200000001,
                InProgress = 200000002,
                Complete = 200000003
            }
            public enum statuscode
            {
                Draft = 0,
                Queued = 1,
                Analyzing = 2,
                Deleting = 3,
                Analyzed = 4,
                AnalyzeFailed = 5,
                DeleteFailed = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_pmrecording")]
    public class msdyn_pmrecording : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_pmrecording";
        public msdyn_pmrecording() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_pmrecordingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_pmrecordingid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly OptionSetValue msdyn_type = null;

        public readonly string msdyn_normalizedrecording = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string msdyn_lasterrors = null;

        public readonly EntityReference msdyn_sourceworkflow = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string msdyn_iterationid = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? msdyn_pmrecordingId = null;

        public readonly EntityReference msdyn_parenttask = null;

        public readonly OptionSetValue msdyn_publishingstatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Draft = 0,
                Recorded = 1,
                Complete = 2,
                Failed = 3
            }
            public enum msdyn_type
            {
                UiFlow = 192350000
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Draft = 1,
                Queued = 2,
                Importing = 3,
                Imported = 4,
                Recorded = 5,
                Complete = 6,
                Failed = 7
            }
            public enum msdyn_publishingstatus
            {
                NotIncluded = 192350000,
                Published = 192350001,
                Obsolete = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_richtextfile")]
    public class msdyn_richtextfile : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_richtextfile";
        public msdyn_richtextfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_richtextfileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_richtextfileid"] = value;
            }
        }

        public readonly string msdyn_parentid = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly Guid? msdyn_imageblobId = null;

        public readonly string msdyn_parententityname = null;

        public readonly byte[] msdyn_imageblob = null;

        public readonly string msdyn_parententity_fieldname = null;

        public readonly Guid? msdyn_richtextfileId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_sample_product_knowledgearticle")]
    public class msdyn_sample_product_knowledgearticle : Entity
    {
        public const string EntityLogicalName = "msdyn_sample_product_knowledgearticle";
        public msdyn_sample_product_knowledgearticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_sample_product_knowledgearticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_sample_product_knowledgearticleid"] = value;
            }
        }

        public readonly Guid? knowledgearticleid = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? sample_productid = null;

        public readonly Guid? msdyn_sample_product_knowledgearticleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_sample_product_knowledgebaserecord")]
    public class msdyn_sample_product_knowledgebaserecord : Entity
    {
        public const string EntityLogicalName = "msdyn_sample_product_knowledgebaserecord";
        public msdyn_sample_product_knowledgebaserecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_sample_product_knowledgebaserecordid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_sample_product_knowledgebaserecordid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? knowledgebaserecordid = null;

        public readonly Guid? sample_productid = null;

        public readonly Guid? msdyn_sample_product_knowledgebaserecordId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_serviceconfiguration")]
    public class msdyn_serviceconfiguration : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_serviceconfiguration";
        public msdyn_serviceconfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_serviceconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_serviceconfigurationid"] = value;
            }
        }

        public readonly string msdyn_LookupAttributeforSLA = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_PauseState = null;

        public readonly string msdyn_EntityLogicalName = null;

        public readonly Guid? msdyn_serviceconfigurationId = null;

        public readonly string msdyn_OrganizationID = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_slakpi")]
    public class msdyn_slakpi : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_slakpi";
        public msdyn_slakpi() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_slakpiid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_slakpiid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? msdyn_slakpiId = null;

        public readonly string msdyn_PauseConfigurationXml = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_ApplicableFromField = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string msdyn_Description = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string msdyn_WorkflowInfo = null;

        public readonly Guid? SolutionId = null;

        public readonly string msdyn_EntityDisplayName = null;

        public readonly bool? IsManaged = null;

        public readonly string msdyn_KPIField = null;

        public readonly string msdyn_ApplicableFromDisplayName = null;

        public readonly string msdyn_EntityName = null;

        public readonly bool? msdyn_AdvancedPauseConfiguration = null;

        public new static class Options
        {
            public enum statecode
            {
                Inactive = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Inactive = 1,
                Active = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_solutioncomponentdatasource")]
    public class msdyn_solutioncomponentdatasource : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutioncomponentdatasource";
        public msdyn_solutioncomponentdatasource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutioncomponentdatasourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutioncomponentdatasourceid"] = value;
            }
        }

        public readonly Guid? msdyn_solutioncomponentdatasourceId = null;

        public readonly Guid? OrganizationId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_solutioncomponentsummary")]
    public class msdyn_solutioncomponentsummary : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutioncomponentsummary";
        public msdyn_solutioncomponentsummary() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutioncomponentsummaryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutioncomponentsummaryid"] = value;
            }
        }

        public readonly string msdyn_workflowcategory = null;

        public readonly string msdyn_relatedentity = null;

        public readonly decimal? msdyn_componenttype = null;

        public readonly string msdyn_owningbusinessunit = null;

        public readonly string msdyn_schemaname = null;

        public readonly string msdyn_relatedentityattribute = null;

        public readonly string msdyn_istableenabled = null;

        public readonly string msdyn_objecttypecode = null;

        public readonly string msdyn_deployment = null;

        public readonly string msdyn_subtype = null;

        public readonly string msdyn_typename = null;

        public readonly string msdyn_primaryentityname = null;

        public readonly string msdyn_version = null;

        public readonly string msdyn_fieldsecurity = null;

        public readonly string msdyn_executionstage = null;

        public readonly string msdyn_modifiedon = null;

        public readonly string msdyn_createdon = null;

        public readonly string msdyn_iscustomizable = null;

        public readonly string msdyn_ismanaged = null;

        public readonly string msdyn_isolationmode = null;

        public readonly string msdyn_canvasappuniqueid = null;

        public readonly string msdyn_owner = null;

        public readonly string msdyn_isdefault = null;

        public readonly string msdyn_solutionid = null;

        public readonly string msdyn_logicalcollectionname = null;

        public readonly string msdyn_iscustomizablename = null;

        public readonly string msdyn_status = null;

        public readonly string msdyn_iscustomname = null;

        public readonly string msdyn_displayname = null;

        public readonly string msdyn_executionorder = null;

        public readonly string msdyn_publickeytoken = null;

        public readonly Guid? msdyn_solutioncomponentsummaryId = null;

        public readonly string msdyn_isdefaultname = null;

        public readonly string msdyn_statusname = null;

        public readonly string msdyn_synctoexternalsearchindex = null;

        public readonly string msdyn_uniquename = null;

        public readonly string msdyn_description = null;

        public readonly string msdyn_sdkmessagename = null;

        public readonly string msdyn_primaryidattribute = null;

        public readonly string msdyn_workflowcategoryname = null;

        public readonly string msdyn_componenttypename = null;

        public readonly string msdyn_isauditenabledname = null;

        public readonly string msdyn_isappawarename = null;

        public readonly string msdyn_culture = null;

        public readonly string msdyn_eventhandler = null;

        public readonly string msdyn_ismanagedname = null;

        public readonly decimal? msdyn_total = null;

        public readonly Guid? OrganizationId = null;

        public readonly string msdyn_objectid = null;

        public readonly string msdyn_fieldtype = null;

        public readonly string msdyn_connectorinternalid = null;

        public readonly string msdyn_workflowidunique = null;

        public readonly string msdyn_iscustom = null;

        public readonly string msdyn_isappaware = null;

        public readonly string msdyn_componentlogicalname = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_isauditenabled = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_solutionhealthrule")]
    public class msdyn_solutionhealthrule : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhealthrule";
        public msdyn_solutionhealthrule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhealthruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhealthruleid"] = value;
            }
        }

        public readonly string msdyn_uniquename = null;

        public readonly string msdyn_resolutionmessage = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_ComponentType = null;

        public readonly string msdyn_OwningSolutionId = null;

        public readonly OptionSetValue msdyn_ResolutionType = null;

        public readonly EntityReference msdyn_solutionhealthrulesetId = null;

        public readonly string msdyn_Description = null;

        public readonly EntityReference msdyn_ResolutionAction = null;

        public readonly Guid? msdyn_solutionhealthruleId = null;

        public readonly EntityReference msdyn_Workflow = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_ResolutionType
            {
                None = 192350003,
                AutoHeal = 192350000,
                CustomerActionRequired = 192350001,
                Documenation = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_solutionhealthruleargument")]
    public class msdyn_solutionhealthruleargument : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhealthruleargument";
        public msdyn_solutionhealthruleargument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhealthruleargumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhealthruleargumentid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly EntityReference msdyn_SolutionHealthRule = null;

        public readonly string msdyn_Value = null;

        public readonly string msdyn_Key = null;

        public readonly Guid? msdyn_solutionhealthruleargumentId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_solutionhealthruleset")]
    public class msdyn_solutionhealthruleset : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhealthruleset";
        public msdyn_solutionhealthruleset() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhealthrulesetid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhealthrulesetid"] = value;
            }
        }

        public readonly string msdyn_uniquename = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly Guid? msdyn_solutionhealthrulesetId = null;

        public readonly string msdyn_description = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_solutionhistory")]
    public class msdyn_solutionhistory : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhistory";
        public msdyn_solutionhistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhistoryid"] = value;
            }
        }

        public readonly string msdyn_activityid = null;

        public readonly bool? msdyn_result = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;

        public readonly string msdyn_publisherid = null;

        public readonly string msdyn_publishername = null;

        public readonly string msdyn_exceptionmessage = null;

        public readonly string msdyn_packageversion = null;

        public readonly bool? msdyn_ismanaged = null;

        public readonly bool? msdyn_isoverwritecustomizations = null;

        public readonly string msdyn_solutionid = null;

        public readonly string msdyn_correlationid = null;

        public readonly bool? msdyn_ispatch = null;

        public readonly OptionSetValue msdyn_status = null;

        public readonly OptionSetValue msdyn_suboperation = null;

        public readonly Guid? msdyn_solutionhistoryId = null;

        public readonly string msdyn_exceptionstack = null;

        public readonly string msdyn_packagename = null;

        public readonly string msdyn_solutionversion = null;

        public readonly string msdyn_errorcode = null;

        public readonly int? msdyn_totaltime = null;

        public readonly OptionSetValue msdyn_operation = null;

        public readonly DateTime? msdyn_starttime = null;

        public readonly DateTime? msdyn_endtime = null;

        public new static class Options
        {
            public enum msdyn_status
            {
                Started = 0,
                Completed = 1
            }
            public enum msdyn_suboperation
            {
                None = 0,
                New = 1,
                Upgrade = 2,
                Update = 3,
                Delete = 4
            }
            public enum msdyn_operation
            {
                Import = 0,
                Uninstall = 1,
                Export = 2,
                Publish = 3,
                PublishAll = 4,
                LanguageProvision = 5,
                ImportTranslation = 6,
                RibbonMetadataGeneration = 7,
                WorkflowSetState = 8,
                None = 9
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_solutionhistorydatasource")]
    public class msdyn_solutionhistorydatasource : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhistorydatasource";
        public msdyn_solutionhistorydatasource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhistorydatasourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhistorydatasourceid"] = value;
            }
        }

        public readonly Guid? msdyn_solutionhistorydatasourceId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_name = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_tour")]
    public class msdyn_tour : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_tour";
        public msdyn_tour() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_tourid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_tourid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsCustomizable = null;

        public readonly string msdyn_labelsresource = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? ComponentIdUnique = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdyn_displayname = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? msdyn_tourId = null;

        public readonly string msdyn_tourdefinition = null;

        public readonly string msdyn_path = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdynce_botcontent")]
    public class msdynce_botcontent : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdynce_botcontent";
        public msdynce_botcontent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdynce_botcontentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdynce_botcontentid"] = value;
            }
        }

        public readonly Guid? msdynce_botcontentId = null;

        public readonly string msdynce_botid = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string msdynce_autonumber = null;

        public readonly OptionSetValue msdynce_state = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdynce_state
            {
                Released = 0,
                Draft = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("multientitysearch")]
    public class MultiEntitySearch : Entity
    {
        public const string EntityLogicalName = "multientitysearch";
        public MultiEntitySearch() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("multientitysearchid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["multientitysearchid"] = value;
            }
        }

        public readonly Guid? MultiEntitySearchId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("multientitysearchentities")]
    public class MultiEntitySearchEntities : Entity
    {
        public const string EntityLogicalName = "multientitysearchentities";
        public MultiEntitySearchEntities() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("multientitysearchentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["multientitysearchentityid"] = value;
            }
        }

        public readonly int? EntityOrder = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference MultiEntitySearchId = null;

        public readonly string EntityName = null;

        public readonly Guid? MultiEntitySearchEntityId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("multiselectattributeoptionvalues")]
    public class MultiSelectAttributeOptionValues : Entity
    {
        public const string EntityLogicalName = "multiselectattributeoptionvalues";
        public MultiSelectAttributeOptionValues() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("multiselectfulltextidkey")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["multiselectfulltextidkey"] = value;
            }
        }

        public readonly EntityReference ObjectId = null;

        public readonly string SelectedOptionValues = null;

        public readonly int? ObjectColumnNumber = null;

        public readonly int? MultiSelectFullTextIdKey = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("navigationsetting")]
    public class NavigationSetting : Entity
    {
        public const string EntityLogicalName = "navigationsetting";
        public NavigationSetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("navigationsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["navigationsettingid"] = value;
            }
        }

        public readonly Guid? IconResourceId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly EntityReference AppConfigId = null;

        public readonly string Description = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? AdvancedSettingOrder = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? QuickSettingOrder = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string GroupName = null;

        public readonly Guid? NavigationSettingIdUnique = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? ParentNavigationSettingId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string PageUrl = null;

        public readonly OptionSetValue SettingType = null;

        public readonly int? ObjectTypeCode = null;

        public readonly Guid? ResourceId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? NavigationSettingId = null;

        public readonly int? Privileges = null;

        public readonly Guid? AppConfigIdUnique = null;

        public readonly bool? ProgressState = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SettingType
            {
                AdvancedSetup = 0,
                BasicSetup = 1,
                AdvancedSetupSummary = 2,
                BasicSetupSummary = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("new_autonumber")]
    public class new_autonumber : UserOrTeamEntity
    {
        public const string EntityLogicalName = "new_autonumber";
        public new_autonumber() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("new_autonumberid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["new_autonumberid"] = value;
            }
        }

        public readonly int? new_year = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string new_name = null;

        public readonly int? new_index = null;

        public readonly int? new_month = null;

        public readonly Guid? new_autonumberId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("new_bpf_d69d738cc4d84e2f9930255d396bdf5f")]
    public class new_bpf_d69d738cc4d84e2f9930255d396bdf5f : OrganizationEntity
    {
        public const string EntityLogicalName = "new_bpf_d69d738cc4d84e2f9930255d396bdf5f";
        public new_bpf_d69d738cc4d84e2f9930255d396bdf5f() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }

        public readonly EntityReference ActiveStageId = null;

        public readonly EntityReference bpf_sample_ideaid = null;

        public readonly int? bpf_Duration = null;

        public readonly string TraversedPath = null;

        public readonly EntityReference bpf_sample_teamprojectid = null;

        public readonly EntityReference ProcessId = null;

        public readonly Guid? BusinessProcessFlowInstanceId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? CompletedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string bpf_name = null;

        public readonly DateTime? ActiveStageStartedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("new_order")]
    public class new_order : UserOrTeamEntity
    {
        public const string EntityLogicalName = "new_order";
        public new_order() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("new_orderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["new_orderid"] = value;
            }
        }

        public readonly DateTime? new_date = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string new_ordernumber = null;

        public readonly OptionSetValue new_status = null;

        public readonly EntityReference new_customerid = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? new_orderId = null;

        public readonly Money new_amount = null;

        public readonly Money new_amount_Base = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum new_status
            {
                Draft = 100000000,
                Approved = 100000001,
                Finished = 100000002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("new_orderdetail")]
    public class new_orderdetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "new_orderdetail";
        public new_orderdetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("new_orderdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["new_orderdetailid"] = value;
            }
        }

        public readonly Guid? new_orderdetailId = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("new_orderdetail")]
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string new_orderdetail1 = null;

        public readonly Money new_price = null;

        public readonly int? new_qty = null;

        public readonly EntityReference new_productid = null;

        public readonly Money new_price_Base = null;

        public readonly decimal? ExchangeRate = null;

        public readonly EntityReference new_orderid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("new_ordersummary")]
    public class new_ordersummary : UserOrTeamEntity
    {
        public const string EntityLogicalName = "new_ordersummary";
        public new_ordersummary() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("new_ordersummaryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["new_ordersummaryid"] = value;
            }
        }

        public readonly Guid? new_ordersummaryId = null;

        public readonly int? new_totalqty = null;

        public readonly int? new_year = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference new_customerid = null;

        public readonly decimal? ExchangeRate = null;

        public readonly int? new_month = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string new_summarynumber = null;

        public readonly Money new_amount = null;

        public readonly Money new_amount_Base = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("newprocess")]
    public class NewProcess : Entity
    {
        public const string EntityLogicalName = "newprocess";
        public NewProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }

        public readonly EntityReference ActiveStageId = null;

        public readonly string TraversedPath = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference KnowledgeArticleId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference OrganizationId = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly int? Duration = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ProcessId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? BusinessProcessFlowInstanceId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ActiveStageStartedOn = null;

        public readonly DateTime? CompletedOn = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("notification")]
    public class Notification : Entity
    {
        public const string EntityLogicalName = "notification";
        public Notification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("notificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["notificationid"] = value;
            }
        }

        public readonly string EventData = null;

        public readonly Guid? NotificationId = null;

        public readonly string CreatedOnString = null;

        public readonly int? EventId = null;

        public readonly int? NotificationNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? OrganizationId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("officedocument")]
    public class OfficeDocument : Entity
    {
        public const string EntityLogicalName = "officedocument";
        public OfficeDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("officedocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["officedocumentid"] = value;
            }
        }

        public readonly string SHA256 = null;

        public readonly EntityReference OwnerId = null;

        public readonly string ClientData = null;

        public readonly EntityReference ObjectId = null;

        public readonly int? FileSize = null;

        public readonly OptionSetValue DocumentType = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? VersionNumber = null;

        public readonly int? FileLockState = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Content = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? OfficeDocumentId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("officegraphdocument")]
    public class OfficeGraphDocument : Entity
    {
        public const string EntityLogicalName = "officegraphdocument";
        public OfficeGraphDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("officegraphdocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["officegraphdocumentid"] = value;
            }
        }

        public readonly string SiteUrl = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string WebLocationUrl = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? QueryType = null;

        public readonly string PreviewImageUrl = null;

        public readonly string FileExtension = null;

        public readonly string AuthorNames = null;

        public readonly string DocumentLastModifiedBy = null;

        public readonly string FileType = null;

        public readonly int? ViewCount = null;

        public readonly int? Rank = null;

        public readonly DateTime? CreatedTime = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? VersionNumber = null;

        public readonly string ModifiedBy = null;

        public readonly string CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? DocumentLastModifiedOn = null;

        public readonly string DocumentId = null;

        public readonly string DocumentPreviewMetadata = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string SiteTitle = null;

        public readonly string SecondaryFileExtension = null;

        public readonly DateTime? ModifiedTime = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string ReadUrl = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly Guid? OfficeGraphDocumentId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("offlinecommanddefinition")]
    public class OfflineCommandDefinition : Entity
    {
        public const string EntityLogicalName = "offlinecommanddefinition";
        public OfflineCommandDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("commanddefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["commanddefinitionid"] = value;
            }
        }

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly string CommandDefinition = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string CommandName = null;

        public readonly string SolutionName = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string PrimaryEntityLogicalName = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? CommandDefinitionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("optionset")]
    public class OptionSet : Entity
    {
        public const string EntityLogicalName = "optionset";
        public OptionSet() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("optionsetid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["optionsetid"] = value;
            }
        }

        public readonly DateTime? OverwriteTime = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? OptionSetId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organization")]
    public class Organization : Entity
    {
        public const string EntityLogicalName = "organization";
        public Organization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationid"] = value;
            }
        }

        public readonly bool? AllowAutoResponseCreation = null;

        public readonly string ACIWebEndpointUrl = null;

        public readonly int? MobileOfflineSyncInterval = null;

        public readonly bool? UseReadForm = null;

        public readonly int? MaxActionStepsInBPF = null;

        public readonly Guid? ReportingGroupId = null;

        public readonly bool? AllowWebExcelExport = null;

        public readonly int? PricingDecimalPrecision = null;

        public readonly bool? QuickFindRecordLimitEnabled = null;

        public readonly bool? SyncOptInSelection = null;

        public readonly int? SessionTimeoutInMins = null;

        public readonly int? ExpireSubscriptionsInDays = null;

        public readonly string OrgDbOrgSettings = null;

        public readonly bool? IsResourceBookingExchangeSyncEnabled = null;

        public readonly int? MaxConditionsForMobileOfflineFilters = null;

        public readonly int? MaximumTrackingNumber = null;

        public readonly bool? IsMobileClientOnDemandSyncEnabled = null;

        public readonly string BulkOperationPrefix = null;

        public readonly int? CurrentParsedTableNumber = null;

        public readonly bool? DisableSocialCare = null;

        public readonly bool? IsContextualHelpEnabled = null;

        public readonly int? CurrentOrderNumber = null;

        public readonly int? HashMinAddressCount = null;

        public readonly bool? IsEnabledForAllRoles = null;

        public readonly bool? OrgInsightsEnabled = null;

        public readonly int? RecurrenceDefaultNumberOfOccurrences = null;

        public readonly int? MaxSLAItemsPerSLA = null;

        public readonly int? MaximumEntitiesWithActiveSLA = null;

        public readonly string InvoicePrefix = null;

        public readonly bool? IsFullTextSearchEnabled = null;

        public readonly bool? IsDuplicateDetectionEnabledForOnlineCreateUpdate = null;

        public readonly bool? AdvancedLookupEnabled = null;

        public readonly int? EmailSendPollingPeriod = null;

        public readonly bool? IsPriceListMandatory = null;

        public readonly bool? IsActivityAnalysisEnabled = null;

        public readonly bool? NotifyMailboxOwnerOfEmailServerLevelAlerts = null;

        public readonly bool? ResolveSimilarUnresolvedEmailAddress = null;

        public readonly int? SyncBulkOperationBatchSize = null;

        public readonly OptionSetValue OrganizationState = null;

        public readonly bool? CreateProductsWithoutParentInActiveState = null;

        public readonly bool? IsMSTeamsSettingChangedByUser = null;

        public readonly OptionSetValue TimeFormatCode = null;

        public readonly bool? EnablePricingOnCreate = null;

        public readonly bool? EmailCorrelationEnabled = null;

        public readonly string ReferenceSiteMapXml = null;

        public readonly bool? AllowUserFormModePreference = null;

        public readonly bool? AutoApplyDefaultonCaseUpdate = null;

        public readonly DateTime? FiscalCalendarStart = null;

        public readonly string Picture = null;

        public readonly int? RecurrenceExpansionJobBatchInterval = null;

        public readonly int? CurrentCampaignNumber = null;

        public readonly bool? IsFolderAutoCreatedonSP = null;

        public readonly EntityReference DefaultMobileOfflineProfileId = null;

        public readonly bool? PaiPreviewScenarioEnabled = null;

        public readonly OptionSetValue YammerPostMethod = null;

        public readonly OptionSetValue FullNameConventionCode = null;

        public readonly bool? IsDuplicateDetectionEnabledForImport = null;

        public readonly OptionSetValue DefaultRecurrenceEndRangeType = null;

        public readonly OptionSetValue CurrencyFormatCode = null;

        public readonly string ParsedTableColumnPrefix = null;

        public readonly int? LocaleId = null;

        public readonly string DisabledReason = null;

        public readonly string DateFormatString = null;

        public readonly string FiscalPeriodFormat = null;

        public readonly string MicrosoftFlowEnvironment = null;

        public readonly bool? IsExternalSearchIndexEnabled = null;

        public readonly bool? IsAllMoneyDecimal = null;

        public readonly string ContentSecurityPolicyConfiguration = null;

        public readonly int? VersionNumber = null;

        public readonly int? BaseCurrencyPrecision = null;

        public readonly bool? GlobalAppendUrlParametersEnabled = null;

        public readonly bool? DisplayNavigationTour = null;

        public readonly bool? AllowUnresolvedPartiesOnEmailSend = null;

        public readonly bool? UnresolveEmailAddressIfMultipleMatch = null;

        public readonly string IsPDFGenerationEnabled = null;

        public readonly bool? AppDesignerExperienceEnabled = null;

        public readonly string PostMessageWhitelistDomains = null;

        public readonly int? RecurrenceExpansionSynchCreateMax = null;

        public readonly string HashFilterKeywords = null;

        public readonly string SlaPauseStates = null;

        public readonly string SchemaNamePrefix = null;

        public readonly int? CurrentQuoteNumber = null;

        public readonly bool? GenerateAlertsForErrors = null;

        public readonly bool? AllowLegacyClientExperience = null;

        public readonly int? MaxAppointmentDurationDays = null;

        public readonly bool? IsContextualEmailEnabled = null;

        public readonly OptionSetValue ISVIntegrationCode = null;

        public readonly int? MobileOfflineMinLicenseTrial = null;

        public readonly int? MaxDepthForHierarchicalSecurityModel = null;

        public readonly string NumberSeparator = null;

        public readonly bool? TaskBasedFlowEnabled = null;

        public readonly OptionSetValue WeekStartDayCode = null;

        public readonly bool? AllowUsersSeeAppdownloadMessage = null;

        public readonly Guid? DelegatedAdminUserId = null;

        public readonly int? LookupCharacterCountBeforeResolve = null;

        public readonly bool? IsFolderBasedTrackingEnabled = null;

        public readonly string ClientFeatureSet = null;

        public readonly bool? SessionTimeoutEnabled = null;

        public readonly bool? AllowMarketingEmailExecution = null;

        public readonly bool? GenerateAlertsForInformation = null;

        public readonly bool? IsActionCardEnabled = null;

        public readonly string OrderPrefix = null;

        public readonly EntityReference AcknowledgementTemplateId = null;

        public readonly bool? AllowOfflineScheduledSyncs = null;

        public readonly string TokenKey = null;

        public readonly bool? OfficeAppsAutoDeploymentEnabled = null;

        public readonly Guid? SupportUserId = null;

        public readonly bool? IsMSTeamsEnabled = null;

        public readonly bool? IsConflictDetectionEnabledForMobileClient = null;

        public readonly bool? IsGeospatialAzureMapsIntegrationEnabled = null;

        public readonly int? LookupResolveDelayMS = null;

        public readonly bool? IgnoreInternalEmail = null;

        public readonly string WebResourceHash = null;

        public readonly string ContractPrefix = null;

        public readonly string BingMapsApiKey = null;

        public readonly bool? IsPreviewForEmailMonitoringAllowed = null;

        public readonly bool? IsAssignedTasksSyncEnabled = null;

        public readonly string BaseISOCurrencyCode = null;

        public readonly bool? IsLUISEnabledforD365Bot = null;

        public readonly string NumberGroupFormat = null;

        public readonly bool? NewSearchExperienceEnabled = null;

        public readonly OptionSetValue FiscalYearFormatSuffix = null;

        public readonly int? MaxUploadFileSize = null;

        public readonly int? YearStartWeekCode = null;

        public readonly string AzureSchedulerJobCollectionName = null;

        public readonly string DecimalSymbol = null;

        public readonly bool? UseInbuiltRuleForDefaultPricelistSelection = null;

        public readonly int? CurrentInvoiceNumber = null;

        public readonly int? MobileOfflineMinLicenseProd = null;

        public readonly bool? AllowAutoUnsubscribeAcknowledgement = null;

        public readonly int? HashDeltaSubjectCount = null;

        public readonly bool? BoundDashboardDefaultCardExpanded = null;

        public readonly bool? IsHierarchicalSecurityModelEnabled = null;

        public readonly bool? SuppressSLA = null;

        public readonly string SignupOutlookDownloadFWLink = null;

        public readonly bool? GrantAccessToNetworkService = null;

        public readonly int? MetadataSyncTimestamp = null;

        public readonly string CasePrefix = null;

        public readonly int? MaxSupportedInternetExplorerVersion = null;

        public readonly int? FiscalYearDisplayCode = null;

        public readonly string FiscalYearFormat = null;

        public readonly int? SortId = null;

        public readonly int? FiscalPeriodType = null;

        public readonly OptionSetValue ReportScriptErrors = null;

        public readonly EntityReference BaseCurrencyId = null;

        public readonly bool? IsEmailMonitoringAllowed = null;

        public readonly string InitialVersion = null;

        public readonly string TrackingPrefix = null;

        public readonly int? CurrencyDecimalPrecision = null;

        public readonly string YammerNetworkPermalink = null;

        public readonly bool? EnableUnifiedInterfaceShellRefresh = null;

        public readonly Guid? BusinessClosureCalendarId = null;

        public readonly bool? ImproveSearchLoggingEnabled = null;

        public readonly bool? EnableLivePersonaCardUCI = null;

        public readonly bool? EnableLivePersonCardIntegrationInOffice = null;

        public readonly string PMDesignator = null;

        public readonly bool? ShareToPreviousOwnerOnAssign = null;

        public readonly bool? EnforceReadOnlyPlugins = null;

        public readonly int? MailboxIntermittentIssueMinRange = null;

        public readonly string HighContrastThemeData = null;

        public readonly OptionSetValue NegativeFormatCode = null;

        public readonly Guid? SqlAccessGroupId = null;

        public readonly int? CurrentContractNumber = null;

        public readonly OptionSetValue SharePointDeploymentType = null;

        public readonly string ParsedTablePrefix = null;

        public readonly bool? EnableBingMapsIntegration = null;

        public readonly bool? ProductRecommendationsEnabled = null;

        public readonly bool? RequireApprovalForUserEmail = null;

        public readonly string ExternalPartyCorrelationKeys = null;

        public readonly int? TagPollingPeriod = null;

        public readonly int? MaxProductsInBundle = null;

        public readonly bool? IsSalesAssistantEnabled = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? EnableSmartMatching = null;

        public readonly int? DaysSinceRecordLastModifiedMaxValue = null;

        public readonly int? CurrentImportSequenceNumber = null;

        public readonly bool? UsePositionHierarchy = null;

        public readonly bool? IsExternalFileStorageEnabled = null;

        public readonly int? MaxFolderBasedTrackingMappings = null;

        public readonly bool? UseLegacyRendering = null;

        public readonly Guid? OrganizationId = null;

        public readonly bool? YammerOAuthAccessTokenExpired = null;

        public readonly bool? AppointmentRichEditorExperience = null;

        public readonly int? RiErrorStatus = null;

        public readonly bool? EnableImmersiveSkypeIntegration = null;

        public readonly int? ExpireChangeTrackingInDays = null;

        public readonly bool? ShowWeekNumber = null;

        public readonly int? SessionTimeoutReminderInMins = null;

        public readonly string DefaultCountryCode = null;

        public readonly int? NextTrackingNumber = null;

        public readonly int? MinOutlookSyncInterval = null;

        public readonly string ReportingGroupName = null;

        public readonly bool? IsNewAddProductExperienceEnabled = null;

        public readonly bool? IsDisabled = null;

        public readonly int? SyncBulkOperationMaxLimit = null;

        public readonly bool? IsMailboxForcedUnlockingEnabled = null;

        public readonly bool? EnableMicrosoftFlowIntegration = null;

        public readonly bool? IsSOPIntegrationEnabled = null;

        public readonly OptionSetValue CurrencyDisplayOption = null;

        public readonly bool? IsEmailServerProfileContentFilteringEnabled = null;

        public readonly bool? OOBPriceCalculationEnabled = null;

        public readonly bool? IsAppMode = null;

        public readonly bool? IsDelegateAccessEnabled = null;

        public readonly string ExternalPartyEntitySettings = null;

        public readonly int? MaxRecordsForExportToExcel = null;

        public readonly int? UniqueSpecifierLength = null;

        public readonly OptionSetValue FiscalYearFormatPrefix = null;

        public readonly bool? AutoApplySLA = null;

        public readonly bool? IsDuplicateDetectionEnabled = null;

        public readonly bool? SocialInsightsEnabled = null;

        public readonly EntityReference DefaultEmailServerProfileId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? RestrictStatusUpdate = null;

        public readonly bool? PowerBiFeatureEnabled = null;

        public readonly string PrivReportingGroupName = null;

        public readonly string CategoryPrefix = null;

        public readonly int? NegativeCurrencyFormatCode = null;

        public readonly bool? EnableLPAuthoring = null;

        public readonly bool? ShowKBArticleDeprecationNotification = null;

        public readonly string FeatureSet = null;

        public readonly int? GoalRollupExpiryTime = null;

        public readonly int? MailboxPermanentIssueMinRange = null;

        public readonly Guid? IntegrationUserId = null;

        public readonly int? AuditRetentionPeriodV2 = null;

        public readonly string TelemetryInstrumentationKey = null;

        public readonly int? MaximumSLAKPIPerEntityWithActiveSLA = null;

        public readonly OptionSetValue FiscalPeriodFormatPeriod = null;

        public readonly bool? IsContactMailingAddressSyncEnabled = null;

        public readonly int? RecurrenceExpansionJobBatchSize = null;

        public readonly int? IncomingEmailExchangeEmailRetrievalBatchSize = null;

        public readonly bool? IsPAIEnabled = null;

        public readonly OptionSetValue EmailConnectionChannel = null;

        public readonly bool? IsModelDrivenAppsInMSTeamsEnabled = null;

        public readonly int? InactivityTimeoutInMins = null;

        public readonly int? CurrentKaNumber = null;

        public readonly bool? AllowAddressBookSyncs = null;

        public readonly bool? IsUserAccessAuditEnabled = null;

        public readonly bool? ServeStaticResourcesFromAzureCDN = null;

        public readonly Guid? PrivReportingGroupId = null;

        public readonly int? MaxVerboseLoggingSyncCycles = null;

        public readonly DateTime? MetadataSyncLastTimeOfNeverExpiredDeletedObjects = null;

        public readonly int? CurrentCaseNumber = null;

        public readonly string SqlAccessGroupName = null;

        public readonly bool? AutoApplyDefaultonCaseCreate = null;

        public readonly OptionSetValue SyncOptInSelectionStatus = null;

        public readonly bool? SendBulkEmailInUCI = null;

        public readonly bool? AllowLegacyDialogsEmbedding = null;

        public readonly int? TokenExpiry = null;

        public readonly bool? UseQuickFindViewForGridSearch = null;

        public readonly string SocialInsightsInstance = null;

        public readonly int? YammerGroupId = null;

        public readonly bool? AllowEntityOnlyAudit = null;

        public readonly string DefaultEmailSettings = null;

        public readonly string NumberFormat = null;

        public readonly string OfficeGraphDelveUrl = null;

        public readonly string V3CalloutConfigHash = null;

        public readonly bool? IsAutoSaveEnabled = null;

        public readonly string WidgetProperties = null;

        public readonly string KbPrefix = null;

        public readonly bool? SocialInsightsTermsAccepted = null;

        public readonly string ExternalBaseUrl = null;

        public readonly int? TrackingTokenIdDigits = null;

        public readonly string CurrencySymbol = null;

        public readonly int? FutureExpansionWindow = null;

        public readonly string SiteMapXml = null;

        public readonly bool? IsDuplicateDetectionEnabledForOfflineSync = null;

        public readonly bool? IsTextWrapEnabled = null;

        public readonly Guid? PrivilegeUserGroupId = null;

        public readonly string QualifyLeadAdditionalOptions = null;

        public readonly string BaseCurrencySymbol = null;

        public readonly bool? IsDelveActionHubIntegrationEnabled = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string KaPrefix = null;

        public readonly bool? IsMSTeamsUserSyncEnabled = null;

        public readonly bool? AllowOutlookScheduledSyncs = null;

        public readonly bool? IsOfficeGraphEnabled = null;

        public readonly bool? IsMSTeamsCollaborationEnabled = null;

        public readonly int? LanguageCode = null;

        public readonly bool? IsActionSupportFeatureEnabled = null;

        public readonly int? HashMaxCount = null;

        public readonly OptionSetValue DateFormatCode = null;

        public readonly int? CurrentCategoryNumber = null;

        public readonly bool? IsDefaultCountryCodeCheckEnabled = null;

        public readonly bool? IsManualSalesForecastingEnabled = null;

        public readonly bool? FiscalSettingsUpdated = null;

        public readonly int? MaxRecordsForLookupFilters = null;

        public readonly bool? InactivityTimeoutEnabled = null;

        public readonly int? GoalRollupFrequency = null;

        public readonly Guid? SystemUserId = null;

        public readonly int? TagMaxAggressiveCycles = null;

        public readonly int? MaximumActiveBusinessProcessFlowsAllowedPerEntity = null;

        public readonly bool? IsPreviewForAutoCaptureEnabled = null;

        public readonly int? UserAccessAuditingInterval = null;

        public readonly bool? IsMobileOfflineEnabled = null;

        public readonly string AMDesignator = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string PrivacyStatementUrl = null;

        public readonly int? NextCustomObjectTypeCode = null;

        public readonly string QuotePrefix = null;

        public readonly bool? IsAutoDataCaptureEnabled = null;

        public readonly bool? IsAutoDataCaptureV2Enabled = null;

        public readonly bool? IsWriteInProductsAllowed = null;

        public readonly string BusinessCardOptions = null;

        public readonly bool? GlobalHelpUrlEnabled = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? MaxVerboseLoggingMailbox = null;

        public readonly OptionSetValue FiscalYearFormatYear = null;

        public readonly bool? IsRelationshipInsightsEnabled = null;

        public readonly int? MaximumDynamicPropertiesAllowed = null;

        public readonly OptionSetValue DiscountCalculationMethod = null;

        public readonly OptionSetValue PluginTraceLogSetting = null;

        public readonly string TimeSeparator = null;

        public readonly bool? IsRichTextNotesEnabled = null;

        public readonly bool? AllowAutoUnsubscribe = null;

        public readonly bool? AllowClientMessageBarAd = null;

        public readonly bool? IsPresenceEnabled = null;

        public readonly bool? RenderSecureIFrameForEmail = null;

        public readonly bool? IsReadAuditEnabled = null;

        public readonly int? PinpointLanguageCode = null;

        public readonly int? LongDateFormatCode = null;

        public readonly bool? CanOptOutNewSearchExperience = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly string DefaultThemeData = null;

        public readonly bool? GenerateAlertsForWarnings = null;

        public readonly bool? IsPlaybookEnabled = null;

        public readonly string DefaultCrmCustomName = null;

        public readonly bool? SQMEnabled = null;

        public readonly string TimeFormatString = null;

        public readonly int? CurrentKbNumber = null;

        public readonly int? TraceLogMaximumAgeInDays = null;

        public readonly bool? IsAuditEnabled = null;

        public readonly bool? UseSkypeProtocol = null;

        public readonly int? MinAddressBookSyncInterval = null;

        public readonly int? PastExpansionWindow = null;

        public readonly string FiscalYearPeriodConnect = null;

        public readonly bool? IsFiscalPeriodMonthBased = null;

        public readonly bool? RequireApprovalForQueueEmail = null;

        public readonly bool? IsPreviewEnabledForActionCard = null;

        public readonly int? MinOfflineSyncInterval = null;

        public readonly bool? IsQuickCreateEnabledForOpportunityClose = null;

        public readonly bool? IsCustomControlsInCanvasAppsEnabled = null;

        public readonly bool? IsAppointmentAttachmentSyncEnabled = null;

        public readonly int? CalendarType = null;

        public readonly string CampaignPrefix = null;

        public readonly int? TrackingTokenIdBase = null;

        public readonly Guid? SampleDataImportId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string DateSeparator = null;

        public readonly bool? IsContentSecurityPolicyEnabled = null;

        public readonly bool? IsNotesAnalysisEnabled = null;

        public readonly bool? TextAnalyticsEnabled = null;

        public readonly Guid? UserGroupId = null;

        public readonly int? AuditRetentionPeriod = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? CortanaProactiveExperienceEnabled = null;

        public readonly string KMSettings = null;

        public readonly bool? IsOneDriveEnabled = null;

        public readonly bool? GetStartedPaneContentEnabled = null;

        public readonly string GlobalHelpUrl = null;

        public readonly int? CurrentBulkOperationNumber = null;

        public readonly bool? IsBPFEntityCustomizationFeatureEnabled = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? CascadeStatusUpdate = null;

        public readonly byte[] EntityImage = null;

        public readonly bool? IsMailboxInactiveBackoffEnabled = null;

        public readonly int? InactivityTimeoutReminderInMins = null;

        public readonly string BlockedAttachments = null;

        public new static class Options
        {
            public enum OrganizationState
            {
                Creating = 0,
                Upgrading = 1,
                Updating = 2,
                Active = 3
            }
            public enum TimeFormatCode
            {

            }
            public enum YammerPostMethod
            {
                Public = 0,
                Private = 1
            }
            public enum FullNameConventionCode
            {
                LastNameFirstName = 0,
                FirstName = 1,
                LastNameFirstNameMiddleInitial = 2,
                FirstNameMiddleInitialLastName = 3,
                LastNameFirstNameMiddleName = 4,
                FirstNameMiddleNameLastName = 5,
                LastNameSpaceFirstName = 6,
                LastNameNoSpaceFirstName = 7
            }
            public enum DefaultRecurrenceEndRangeType
            {
                NoEndDate = 1,
                NumberOfOccurrences = 2,
                EndByDate = 3
            }
            public enum CurrencyFormatCode
            {
                _123 = 0,
                _1231 = 1,
                _1232 = 2,
                _1233 = 3
            }
            public enum ISVIntegrationCode
            {
                None = 0,
                Web = 1,
                OutlookWorkstationClient = 2,
                WebOutlookWorkstationClient = 3,
                OutlookLaptopClient = 4,
                WebOutlookLaptopClient = 5,
                Outlook = 6,
                All = 7
            }
            public enum WeekStartDayCode
            {

            }
            public enum FiscalYearFormatSuffix
            {
                FY = 1,
                FiscalYear = 2,

            }
            public enum ReportScriptErrors
            {
                NoPreferenceForSendingAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 0,
                AskMeForPermissionToSendAnErrorReportToMicrosoft = 1,
                AutomaticallySendAnErrorReportToMicrosoftWithoutAskingMeForPermission = 2,
                NeverSendAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 3
            }
            public enum NegativeFormatCode
            {
                Brackets = 0,
                Dash = 1,
                DashPlusSpace = 2,
                TrailingDash = 3,
                SpacePlusTrailingDash = 4
            }
            public enum SharePointDeploymentType
            {
                Online = 0,
                OnPremises = 1
            }
            public enum CurrencyDisplayOption
            {
                CurrencySymbol = 0,
                CurrencyCode = 1
            }
            public enum FiscalYearFormatPrefix
            {
                FY = 1,

            }
            public enum FiscalPeriodFormatPeriod
            {
                Quarter0 = 1,
                Q0 = 2,
                P0 = 3,
                Month0 = 4,
                M0 = 5,
                Semester0 = 6,
                MonthName = 7
            }
            public enum EmailConnectionChannel
            {
                ServerSideSynchronization = 0,
                MicrosoftDynamics365EmailRouter = 1
            }
            public enum SyncOptInSelectionStatus
            {
                Processing = 1,
                Passed = 2,
                Failed = 3
            }
            public enum DateFormatCode
            {

            }
            public enum FiscalYearFormatYear
            {
                YYYY = 1,
                YY = 2,
                GGYY = 3
            }
            public enum DiscountCalculationMethod
            {
                LineItem = 0,
                PerUnit = 1
            }
            public enum PluginTraceLogSetting
            {
                Off = 0,
                Exception = 1,
                All = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organizationdatasyncsubscription")]
    public class organizationdatasyncsubscription : OrganizationEntity
    {
        public const string EntityLogicalName = "organizationdatasyncsubscription";
        public organizationdatasyncsubscription() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationdatasyncsubscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationdatasyncsubscriptionid"] = value;
            }
        }

        public readonly string AadApplicationId = null;

        public readonly string SubscriptionEntities = null;

        public readonly bool? NeedCopyAttachmentsToBlob = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly int? SubscriptionEndpointStatus = null;

        public readonly OptionSetValue BlobPartitionBy = null;

        public readonly bool? CanSyncAllMetadata = null;

        public readonly bool? IsOutOfBoxSubscription = null;

        public readonly OptionSetValue DataProcessingType = null;

        public readonly string EntityFilters = null;

        public readonly string EndpointSettings = null;

        public readonly string PartnerPrefix = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? organizationdatasyncsubscriptionId = null;

        public readonly OptionSetValue DataEndpointPostingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum BlobPartitionBy
            {
                None = 0,
                Day = 1,
                Month = 2,
                Year = 3
            }
            public enum DataProcessingType
            {
                Unknown = 0,
                Streaming = 1,
                Batch = 2,
                Mixed = 3,
                NotificationOnly = 4
            }
            public enum statuscode
            {
                Uninitialized = 3,
                Activated = 4,
                Deactivated = 5
            }
            public enum DataEndpointPostingType
            {
                DefaultEndpoint = 0,
                ServiceBusTopic = 1,
                HTTPS = 2,
                ServiceBusEventHub = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organizationdatasyncsubscriptionentity")]
    public class organizationdatasyncsubscriptionentity : OrganizationEntity
    {
        public const string EntityLogicalName = "organizationdatasyncsubscriptionentity";
        public organizationdatasyncsubscriptionentity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationdatasyncsubscriptionentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationdatasyncsubscriptionentityid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly bool? IsActivity = null;

        public readonly Guid? organizationdatasyncsubscriptionentityId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? InheritsFromOtc = null;

        public readonly EntityReference OrganizationDataSyncSubscriptioId = null;

        public readonly int? ObjectTypeCode = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organizationsetting")]
    public class OrganizationSetting : OrganizationEntity
    {
        public const string EntityLogicalName = "organizationsetting";
        public OrganizationSetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationsettingid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string DisplayName = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? SolutionId = null;

        public readonly string Value = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference SettingDefinitionId = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? OrganizationSettingId = null;

        public readonly string UniqueName = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organizationstatistic")]
    public class OrganizationStatistic : Entity
    {
        public const string EntityLogicalName = "organizationstatistic";
        public OrganizationStatistic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationstatisticid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationstatisticid"] = value;
            }
        }

        public readonly string ServerName = null;

        public readonly int? Hour = null;

        public readonly Guid? OrganizationStatisticId = null;

        public readonly int? StatisticValue = null;

        public readonly int? StatisticType = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organizationui")]
    public class OrganizationUI : Entity
    {
        public const string EntityLogicalName = "organizationui";
        public OrganizationUI() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("formid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["formid"] = value;
            }
        }

        public readonly Guid? FormId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? FormIdUnique = null;

        public readonly string PreviewColumnsetXml = null;

        public readonly int? Version = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string FieldXml = null;

        public readonly string FormXml = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsCustomizable = null;

        public readonly string GridIcon = null;

        public readonly string ObjectTypeCode = null;

        public readonly string OutlookShortcutIcon = null;

        public readonly Guid? SolutionId = null;

        public readonly string LargeEntityIcon = null;

        public readonly string PreviewXml = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("orginsightsmetric")]
    public class OrgInsightsMetric : Entity
    {
        public const string EntityLogicalName = "orginsightsmetric";
        public OrgInsightsMetric() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("orginsightsmetricid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["orginsightsmetricid"] = value;
            }
        }

        public readonly string InternalName = null;

        public readonly string Name = null;

        public readonly Guid? OrgInsightsMetricId = null;

        public readonly OptionSetValue MetricType = null;

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum MetricType
            {
                TimeSeries = 1,
                Category = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("orginsightsnotification")]
    public class OrgInsightsNotification : Entity
    {
        public const string EntityLogicalName = "orginsightsnotification";
        public OrgInsightsNotification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("orginsightsnotificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["orginsightsnotificationid"] = value;
            }
        }

        public readonly string InternalName = null;

        public readonly Guid? OrgInsightsNotificationId = null;

        public readonly string Name = null;

        public readonly string JsonData = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("owner")]
    public class Owner : Entity
    {
        public const string EntityLogicalName = "owner";
        public Owner() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ownerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ownerid"] = value;
            }
        }

        public readonly int? VersionNumber = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? OwnerId = null;

        public readonly string OwnerIdType = null;

        public readonly string YomiName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ownermapping")]
    public class OwnerMapping : Entity
    {
        public const string EntityLogicalName = "ownermapping";
        public OwnerMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ownermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ownermappingid"] = value;
            }
        }

        public readonly string TargetUserValueForSourceCRMUserLink = null;

        public readonly string SourceUserValueForSourceCRMUserLink = null;

        public readonly string IntroducedVersion = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string SourceSystemUserName = null;

        public readonly Guid? OwnerMappingIdUnique = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference TargetSystemUserId = null;

        public readonly OptionSetValue ProcessCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string TargetSystemUserDomainName = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ImportMapId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? OwnerMappingId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("package")]
    public class package : OrganizationEntity
    {
        public const string EntityLogicalName = "package";
        public package() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("packageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["packageid"] = value;
            }
        }

        public readonly Guid? AppId = null;

        public readonly Guid? PackageInstanceId = null;

        public readonly Guid? PublisherId = null;

        public readonly Guid? PackageInstanceOperationId = null;

        public readonly string ApplicationName = null;

        public readonly Guid? packageId = null;

        public readonly string PackageVersion = null;

        public readonly Guid? TPSPackageId = null;

        public readonly EntityReference OrganizationId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string PackageUniqueName = null;

        public readonly string PublisherName = null;

        public readonly DateTime? InstalledOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("package_solution")]
    public class package_solution : Entity
    {
        public const string EntityLogicalName = "package_solution";
        public package_solution() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("package_solutionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["package_solutionid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? solutionid = null;

        public readonly Guid? package_solutionId = null;

        public readonly Guid? packageid = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("partnerapplication")]
    public class PartnerApplication : Entity
    {
        public const string EntityLogicalName = "partnerapplication";
        public PartnerApplication() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("partnerapplicationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["partnerapplicationid"] = value;
            }
        }

        public readonly Guid? TenantId = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ApplicationRole = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? UseAuthorizationServer = null;

        public readonly Guid? PartnerApplicationId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string Realm = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string MetadataUrl = null;

        public readonly string PrincipalId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ApplicationRole
            {
                Client = 0,
                Server = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("pdfsetting")]
    public class PDFSetting : UserOrTeamEntity
    {
        public const string EntityLogicalName = "pdfsetting";
        public PDFSetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("pdfsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["pdfsettingid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string entityname = null;

        public readonly Guid? PDFSettingId = null;

        public readonly bool? ispdfsettingenabled = null;

        public readonly string pdfsettingsjson = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("personaldocumenttemplate")]
    public class PersonalDocumentTemplate : Entity
    {
        public const string EntityLogicalName = "personaldocumenttemplate";
        public PersonalDocumentTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("personaldocumenttemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["personaldocumenttemplateid"] = value;
            }
        }

        public readonly bool? Status = null;

        public readonly EntityReference OwningUser = null;

        public readonly string AssociatedEntityTypeCode = null;

        public readonly int? LanguageCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? PersonalDocumentTemplateId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly OptionSetValue DocumentType = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string ClientData = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Content = null;

        public readonly string Description = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum AssociatedEntityTypeCode
            {

            }
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("phonecall")]
    public class PhoneCall : Entity
    {
        public const string EntityLogicalName = "phonecall";
        public PhoneCall() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly bool? IsBilled = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly EntityCollection from = null;

        public readonly string TraversedPath = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly DateTime? ActualStart = null;

        public readonly Guid? SubscriptionId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly bool? IsRegularActivity = null;

        public readonly string Subcategory = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityCollection to = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly OptionSetValue StateCode = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly bool? DirectionCode = null;

        public readonly string ActivityAdditionalParams = null;

        public readonly string ActivityTypeCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly string PhoneNumber = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly string Category = null;

        public readonly Guid? ProcessId = null;

        public readonly string Description = null;

        public readonly DateTime? SortDate = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly Guid? StageId = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly bool? LeftVoiceMail = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly Guid? ActivityId = null;

        public readonly int? OnHoldTime = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? ActualDurationMinutes = null;

        public readonly EntityReference SLAId = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum StatusCode
            {
                Open = 1,
                Made = 2,
                Canceled = 3,
                Received = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("picklistmapping")]
    public class PickListMapping : Entity
    {
        public const string EntityLogicalName = "picklistmapping";
        public PickListMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("picklistmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["picklistmappingid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string SourceValue = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference ColumnMappingId = null;

        public readonly Guid? PickListMappingIdUnique = null;

        public readonly Guid? PickListMappingId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly OptionSetValue ProcessCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? TargetValue = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3,
                Unmapped = 4
            }
            public enum StateCode
            {
                Active = 0
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("pluginassembly")]
    public class PluginAssembly : Entity
    {
        public const string EntityLogicalName = "pluginassembly";
        public PluginAssembly() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("pluginassemblyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["pluginassemblyid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly EntityReference ManagedIdentityId = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? IsHidden = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue AuthType = null;

        public readonly string Content = null;

        public readonly bool? IsCustomizable = null;

        public readonly string Culture = null;

        public readonly string Password = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly int? Minor = null;

        public readonly string PublicKeyToken = null;

        public readonly string Version = null;

        public readonly string Url = null;

        public readonly OptionSetValue SourceType = null;

        public readonly string UserName = null;

        public readonly Guid? PluginAssemblyIdUnique = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string Path = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly bool? IsPasswordSet = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly OptionSetValue IsolationMode = null;

        public readonly Guid? PluginAssemblyId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string SourceHash = null;

        public readonly int? Major = null;

        public new static class Options
        {
            public enum AuthType
            {
                BasicAuth = 0
            }
            public enum SourceType
            {
                Database = 0,
                Disk = 1,
                Normal = 2,
                AzureWebApp = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum IsolationMode
            {
                None = 1,
                Sandbox = 2,
                External = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("plugintracelog")]
    public class PluginTraceLog : Entity
    {
        public const string EntityLogicalName = "plugintracelog";
        public PluginTraceLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintracelogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintracelogid"] = value;
            }
        }

        public readonly Guid? PersistenceKey = null;

        public readonly int? PerformanceConstructorDuration = null;

        public readonly DateTime? PerformanceConstructorStartTime = null;

        public readonly DateTime? PerformanceExecutionStartTime = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Configuration = null;

        public readonly OptionSetValue OperationType = null;

        public readonly string SecureConfiguration = null;

        public readonly Guid? OrganizationId = null;

        public readonly string MessageName = null;

        public readonly Guid? PluginStepId = null;

        public readonly string Profile = null;

        public readonly Guid? PluginTraceLogId = null;

        public readonly string PrimaryEntity = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string ExceptionDetails = null;

        public readonly string MessageBlock = null;

        public readonly int? PerformanceExecutionDuration = null;

        public readonly DateTime? CreatedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string TypeName = null;

        public readonly Guid? RequestId = null;

        public readonly int? Depth = null;

        public readonly OptionSetValue Mode = null;

        public readonly bool? IsSystemCreated = null;

        public readonly Guid? CorrelationId = null;

        public new static class Options
        {
            public enum OperationType
            {
                Unknown = 0,
                PlugIn = 1,
                WorkflowActivity = 2
            }
            public enum Mode
            {
                Synchronous = 0,
                Asynchronous = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("plugintype")]
    public class PluginType : Entity
    {
        public const string EntityLogicalName = "plugintype";
        public PluginType() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintypeid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string FriendlyName = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Culture = null;

        public readonly int? Major = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly string AssemblyName = null;

        public readonly string PublicKeyToken = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string Version = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? IsWorkflowActivity = null;

        public readonly Guid? PluginTypeId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string TypeName = null;

        public readonly Guid? PluginTypeIdUnique = null;

        public readonly string WorkflowActivityGroupName = null;

        public readonly string CustomWorkflowActivityInfo = null;

        public readonly int? Minor = null;

        public readonly EntityReference PluginAssemblyId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("plugintypestatistic")]
    public class PluginTypeStatistic : Entity
    {
        public const string EntityLogicalName = "plugintypestatistic";
        public PluginTypeStatistic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintypestatisticid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintypestatisticid"] = value;
            }
        }

        public readonly int? FailurePercent = null;

        public readonly int? TerminateMemoryContributionPercent = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? AverageExecuteTimeInMilliseconds = null;

        public readonly int? CrashPercent = null;

        public readonly int? CrashCount = null;

        public readonly Guid? PluginTypeStatisticId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? TerminateHandlesContributionPercent = null;

        public readonly int? ExecuteCount = null;

        public readonly int? FailureCount = null;

        public readonly int? TerminateCpuContributionPercent = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference PluginTypeId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TerminateOtherContributionPercent = null;

        public readonly int? CrashContributionPercent = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("position")]
    public class Position : Entity
    {
        public const string EntityLogicalName = "position";
        public Position() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("positionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["positionid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference ParentPositionId = null;

        public readonly int? ImportSequenceNumber = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue statecode = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly Guid? PositionId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("post")]
    public class Post : Entity
    {
        public const string EntityLogicalName = "post";
        public Post() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference PostRegardingId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly int? YammerRetryCount = null;

        public readonly EntityReference RegardingObjectOwnerId = null;

        public readonly string LargeText = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference RegardingObjectOwningBusinessUnit = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? PostToYammer = null;

        public readonly Guid? PostId = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Text = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? YammerPostState = null;

        public readonly OptionSetValue Type = null;

        public readonly OptionSetValue Source = null;

        public new static class Options
        {
            public enum Type
            {
                CheckIn = 1,
                Idea = 2,
                News = 3,
                PrivateMessage = 4,
                Question = 5,
                RePost = 6,
                Status = 7
            }
            public enum Source
            {
                AutoPost = 1,
                ManualPost = 2,
                ActionHubPost = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postcomment")]
    public class PostComment : Entity
    {
        public const string EntityLogicalName = "postcomment";
        public PostComment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postcommentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postcommentid"] = value;
            }
        }

        public readonly EntityReference OrganizationId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Text = null;

        public readonly Guid? PostCommentId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string LargeText = null;

        public readonly EntityReference PostId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postfollow")]
    public class PostFollow : Entity
    {
        public const string EntityLogicalName = "postfollow";
        public PostFollow() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postfollowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postfollowid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? YammerPostState = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? PostToYammer = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly int? YammerRetryCount = null;

        public readonly EntityReference OwnerId = null;

        public readonly Guid? PostFollowId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postlike")]
    public class PostLike : Entity
    {
        public const string EntityLogicalName = "postlike";
        public PostLike() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postlikeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postlikeid"] = value;
            }
        }

        public readonly EntityReference OrganizationId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly Guid? PostLikeId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference PostId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postregarding")]
    public class PostRegarding : Entity
    {
        public const string EntityLogicalName = "postregarding";
        public PostRegarding() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postregardingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postregardingid"] = value;
            }
        }

        public readonly DateTime? LatestManualPostModifiedOn = null;

        public readonly EntityReference RegardingObjectOwnerId = null;

        public readonly string RegardingObjectTypeCodeForSharing = null;

        public readonly EntityReference RegardingObjectOwningBusinessUnit = null;

        public readonly Guid? PostRegardingId = null;

        public readonly DateTime? LatestAutoPostModifiedOn = null;

        public readonly EntityReference RegardingObjectId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postrole")]
    public class PostRole : Entity
    {
        public const string EntityLogicalName = "postrole";
        public PostRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postroleid"] = value;
            }
        }

        public readonly EntityReference PostId = null;

        public readonly OptionSetValue Type = null;

        public readonly Guid? PostRoleId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference RegardingObjectId = null;

        public new static class Options
        {
            public enum Type
            {
                Regarding = 1,
                Mentioning = 2,
                MentioningAndRegarding = 3,
                Topic = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalattributeaccessmap")]
    public class PrincipalAttributeAccessMap : Entity
    {
        public const string EntityLogicalName = "principalattributeaccessmap";
        public PrincipalAttributeAccessMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalattributeaccessmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalattributeaccessmapid"] = value;
            }
        }

        public readonly Guid? PrincipalId = null;

        public readonly OptionSetValue ReadAccess = null;

        public readonly int? VersionNumber = null;

        public readonly OptionSetValue CreateAccess = null;

        public readonly Guid? AttributeId = null;

        public readonly OptionSetValue UpdateAccess = null;

        public readonly Guid? PrincipalAttributeAccessMapId = null;

        public new static class Options
        {
            public enum ReadAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum CreateAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum UpdateAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalentitymap")]
    public class PrincipalEntityMap : Entity
    {
        public const string EntityLogicalName = "principalentitymap";
        public PrincipalEntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalentitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalentitymapid"] = value;
            }
        }

        public readonly Guid? PrincipalEntityMapId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? PrincipalId = null;

        public readonly string ObjectTypeCode = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalobjectaccess")]
    public class PrincipalObjectAccess : Entity
    {
        public const string EntityLogicalName = "principalobjectaccess";
        public PrincipalObjectAccess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectaccessid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectaccessid"] = value;
            }
        }

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ObjectId = null;

        public readonly string PrincipalTypeCode = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ChangedOn = null;

        public readonly int? InheritedAccessRightsMask = null;

        public readonly int? AccessRightsMask = null;

        public readonly Guid? PrincipalObjectAccessId = null;

        public readonly string ObjectTypeCode = null;

        public readonly Guid? PrincipalId = null;

        public new static class Options
        {
            public enum PrincipalTypeCode
            {

            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalobjectaccessreadsnapshot")]
    public class PrincipalObjectAccessReadSnapshot : Entity
    {
        public const string EntityLogicalName = "principalobjectaccessreadsnapshot";
        public PrincipalObjectAccessReadSnapshot() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectaccessreadsnapshotid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectaccessreadsnapshotid"] = value;
            }
        }

        public readonly int? RecordCountForOwningBU = null;

        public readonly Guid? PrincipalId = null;

        public readonly int? Count = null;

        public readonly Guid? PrincipalObjectAccessReadSnapshotId = null;

        public readonly int? RecordCountForOwnerID = null;

        public readonly int? ChildUserPrincipalsCount = null;

        public readonly int? TeamPrincipalsCount = null;

        public readonly int? ObjectTypeCode = null;

        public readonly int? CountPercentOfTotalRows = null;

        public readonly int? RecordCountForOwnerIDPercentOfTotalRows = null;

        public readonly int? RecordCountForOwningBUPercentOfTotalRows = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalobjectattributeaccess")]
    public class PrincipalObjectAttributeAccess : Entity
    {
        public const string EntityLogicalName = "principalobjectattributeaccess";
        public PrincipalObjectAttributeAccess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectattributeaccessid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectattributeaccessid"] = value;
            }
        }

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference PrincipalId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ObjectId = null;

        public readonly Guid? PrincipalObjectAttributeAccessId = null;

        public readonly bool? ReadAccess = null;

        public readonly Guid? AttributeId = null;

        public readonly bool? UpdateAccess = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalsyncattributemap")]
    public class PrincipalSyncAttributeMap : Entity
    {
        public const string EntityLogicalName = "principalsyncattributemap";
        public PrincipalSyncAttributeMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalsyncattributemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalsyncattributemapid"] = value;
            }
        }

        public readonly OptionSetValue DefaultSyncDirection = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue SyncDirection = null;

        public readonly bool? IsComputed = null;

        public readonly int? VersionNumber = null;

        public readonly string AttributeExchangeDisplayName = null;

        public readonly string AttributeCRMName = null;

        public readonly EntityReference ParentPrincipalSyncAttributeMappingId = null;

        public readonly string AttributeExchangeName = null;

        public readonly string MappingName = null;

        public readonly Guid? PrincipalSyncAttributeMapId = null;

        public readonly int? AllowedSyncDirection = null;

        public readonly string ComputedProperties = null;

        public readonly string AttributeCRMDisplayName = null;

        public readonly Guid? PrincipalId = null;

        public readonly string EntityTypeCode = null;

        public new static class Options
        {
            public enum DefaultSyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }
            public enum SyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("privilege")]
    public class Privilege : Entity
    {
        public const string EntityLogicalName = "privilege";
        public Privilege() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("privilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["privilegeid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? CanBeBasic = null;

        public readonly Guid? PrivilegeId = null;

        public readonly bool? CanBeEntityReference = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? AccessRight = null;

        public readonly Guid? PrivilegeRowId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SolutionId = null;

        public readonly string IntroducedVersion = null;

        public readonly bool? CanBeLocal = null;

        public readonly bool? CanBeGlobal = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsDisabledWhenIntegrated = null;

        public readonly bool? CanBeDeep = null;

        public readonly bool? CanBeParentEntityReference = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("privilegeobjecttypecodes")]
    public class PrivilegeObjectTypeCodes : Entity
    {
        public const string EntityLogicalName = "privilegeobjecttypecodes";
        public PrivilegeObjectTypeCodes() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("privilegeobjecttypecodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["privilegeobjecttypecodeid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference PrivilegeId = null;

        public readonly bool? IsManaged = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? PrivilegeObjectTypeCodeRowId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string ObjectTypeCode = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? PrivilegeObjectTypeCodeId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("processsession")]
    public class ProcessSession : Entity
    {
        public const string EntityLogicalName = "processsession";
        public ProcessSession() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processsessionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processsessionid"] = value;
            }
        }

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? ProcessSessionId = null;

        public readonly EntityReference OwningUser = null;

        public readonly string ProcessState = null;

        public readonly DateTime? StartedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? CanceledOn = null;

        public readonly DateTime? CompletedOn = null;

        public readonly EntityReference NextLinkedSessionId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference OriginatingSessionId = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly OptionSetValue StateCode = null;

        public readonly string Comments = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string StepName = null;

        public readonly EntityReference StartedBy = null;

        public readonly EntityReference CanceledBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference ProcessId = null;

        public readonly string ProtectionKey = null;

        public readonly EntityReference CompletedBy = null;

        public readonly DateTime? ExecutedOn = null;

        public readonly EntityReference ExecutedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference PreviousLinkedSessionId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string InputArguments = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string ProcessStageName = null;

        public readonly int? ErrorCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly string ActivityName = null;

        public new static class Options
        {
            public enum StateCode
            {
                Incomplete = 0,
                Complete = 1
            }
            public enum StatusCode
            {
                NotStarted = 1,
                InProgress = 2,
                Paused = 3,
                Completed = 4,
                Canceled = 5,
                Failed = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("processstage")]
    public class ProcessStage : Entity
    {
        public const string EntityLogicalName = "processstage";
        public ProcessStage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processstageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processstageid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string StageName = null;

        public readonly Guid? ProcessStageId = null;

        public readonly OptionSetValue StageCategory = null;

        public readonly string ClientData = null;

        public readonly int? VersionNumber = null;

        public readonly bool? IsTrigger = null;

        public readonly string OperationId = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly string Connector = null;

        public readonly EntityReference ProcessId = null;

        public readonly OptionSetValue OperationType = null;

        public readonly string PrimaryEntityTypeCode = null;

        public readonly OptionSetValue OperationKind = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StageCategory
            {
                Qualify = 0,
                Develop = 1,
                Propose = 2,
                Close = 3,
                Identify = 4,
                Research = 5,
                Resolve = 6,
                Approval = 7
            }
            public enum OperationType
            {
                Http = 473330000,
                ApiApp = 473330001,
                Recurrence = 473330002,
                Workflow = 473330003,
                Flow = 473330004,
                Wait = 473330005,
                ApiConnection = 473330006,
                OpenApiConnection = 473330007,
                Manual = 473330008,
                ApiConnectionWebhook = 473330009,
                OpenApiConnectionWebhook = 473330010,
                Response = 473330011,
                HttpWebhook = 473330012,
                Compose = 473330013,
                Query = 473330014,
                Function = 473330015,
                ApiManagement = 473330016,
                XmlValidation = 473330017,
                FlatFileEncoding = 473330018,
                Scope = 473330019,
                Request = 473330020,
                If = 473330021,
                Foreach = 473330022,
                Until = 473330023,
                Xslt = 473330024,
                FlatFileDecoding = 473330025,
                Terminate = 473330026,
                IntegrationAccountArtifactLookup = 473330027,
                Switch = 473330028,
                ParseJson = 473330029,
                Table = 473330030,
                Join = 473330031,
                Select = 473330032,
                InitializeVariable = 473330033,
                IncrementVariable = 473330034,
                DecrementVariable = 473330035,
                SetVariable = 473330036,
                AppendToArrayVariable = 473330037,
                AppendToStringVariable = 473330038,
                Batch = 473330039,
                SendToBatch = 473330040,
                SlidingWindow = 473330041,
                Expression = 473330042,
                Liquid = 473330043,
                JavascriptCode = 473330044,
                As2Decode = 473330045,
                As2Encode = 473330046,
                RosettaNetEncode = 473330047,
                RosettaNetDecode = 473330048,
                RosettaNetWaitForResponse = 473330049,
                ApiConnectionNotification = 473330050,
                Changeset = 473330051,
                SwiftEncode = 473330052
            }
            public enum PrimaryEntityTypeCode
            {

            }
            public enum OperationKind
            {
                Http = 473330000,
                PowerApp = 473330001,
                PowerAppV2 = 473330002,
                Button = 473330003,
                ApiConnection = 473330004,
                Alert = 473330005,
                EventGrid = 473330006,
                CurrentTime = 473330007,
                ConvertTimeZone = 473330008,
                GetFutureTime = 473330009,
                GetPastTime = 473330010,
                AddToTime = 473330011,
                SubtractFromTime = 473330012,
                AzureMonitorAlert = 473330013,
                SecurityCenterAlert = 473330014,
                JsonToJson = 473330015,
                JsonToText = 473330016,
                XmlToJson = 473330017,
                XmlToText = 473330018,
                Geofence = 473330019,
                ODataOpenApiConnection = 473330020,
                IndexOf = 473330021,
                Substring = 473330022,
                VirtualAgent = 473330023,
                FormatNumber = 473330024
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("processstageparameter")]
    public class processstageparameter : UserOrTeamEntity
    {
        public const string EntityLogicalName = "processstageparameter";
        public processstageparameter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processstageparameterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processstageparameterid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly string Value = null;

        public readonly Guid? processstageparameterId = null;

        public readonly EntityReference ProcessStageId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("processtrigger")]
    public class ProcessTrigger : Entity
    {
        public const string EntityLogicalName = "processtrigger";
        public ProcessTrigger() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processtriggerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processtriggerid"] = value;
            }
        }

        public readonly Guid? OwningUser = null;

        public readonly EntityReference FormId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? ProcessTriggerId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly OptionSetValue Scope = null;

        public readonly Guid? ProcessTriggerIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue ControlType = null;

        public readonly string Event = null;

        public readonly Guid? MethodId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly OptionSetValue PipelineStage = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string PrimaryEntityTypeCode = null;

        public readonly bool? IsManaged = null;

        public readonly string ControlName = null;

        public readonly EntityReference ProcessId = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum Scope
            {
                Form = 1,
                Entity = 2
            }
            public enum ControlType
            {
                Attribute = 1,
                FormTab = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum PipelineStage
            {
                DefaultValue = 0,
                BeforeMainOperation = 20,
                AfterMainOperation = 40
            }
            public enum PrimaryEntityTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("provisionlanguageforuser")]
    public class ProvisionLanguageForUser : OrganizationEntity
    {
        public const string EntityLogicalName = "provisionlanguageforuser";
        public ProvisionLanguageForUser() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("provisionlanguageforuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["provisionlanguageforuserid"] = value;
            }
        }

        public readonly Guid? UserId = null;

        public readonly int? Lcid = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ProvisionLanguageForUserId = null;

        public readonly OptionSetValue OperationStatus = null;

        public readonly Guid? OrganizationId = null;

        public readonly Guid? AsyncOperationId = null;

        public new static class Options
        {
            public enum OperationStatus
            {
                Queued = 0,
                Completed = 1,
                WaitingForLanguageProvision = 2,
                Failed = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("publisher")]
    public class Publisher : Entity
    {
        public const string EntityLogicalName = "publisher";
        public Publisher() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("publisherid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["publisherid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly string Address2_Line2 = null;

        public readonly DateTime? CreatedOn = null;

        public readonly double? Address1_Longitude = null;

        public readonly double? Address1_Latitude = null;

        public readonly string UniqueName = null;

        public readonly string Address2_Telephone1 = null;

        public readonly string Address2_Telephone2 = null;

        public readonly string Address2_Telephone3 = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? Address2_AddressId = null;

        public readonly string Address2_Fax = null;

        public readonly string Address2_Name = null;

        public readonly string Address2_Country = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Address1_StateOrProvince = null;

        public readonly string Address2_PostalCode = null;

        public readonly string Address2_County = null;

        public readonly string Address1_Country = null;

        public readonly string Address1_PostalCode = null;

        public readonly string Address1_Telephone2 = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FriendlyName = null;

        public readonly string Address1_Line3 = null;

        public readonly int? Address1_UTCOffset = null;

        public readonly string EMailAddress = null;

        public readonly OptionSetValue Address2_ShippingMethodCode = null;

        public readonly string Address2_Line1 = null;

        public readonly string Address1_Fax = null;

        public readonly string Address1_Line1 = null;

        public readonly string Address2_PostOfficeBox = null;

        public readonly string Address1_City = null;

        public readonly string Address1_County = null;

        public readonly string Address1_Telephone1 = null;

        public readonly int? CustomizationOptionValuePrefix = null;

        public readonly string Address1_Telephone3 = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Address2_StateOrProvince = null;

        public readonly bool? IsReadonly = null;

        public readonly string SupportingWebsiteUrl = null;

        public readonly string Description = null;

        public readonly string CustomizationPrefix = null;

        public readonly string Address1_Name = null;

        public readonly int? Address2_UTCOffset = null;

        public readonly byte[] EntityImage = null;

        public readonly OptionSetValue Address2_AddressTypeCode = null;

        public readonly string Address1_Line2 = null;

        public readonly double? Address2_Longitude = null;

        public readonly string Address2_City = null;

        public readonly OptionSetValue Address1_AddressTypeCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? PinpointPublisherId = null;

        public readonly Guid? PublisherId = null;

        public readonly string Address2_UPSZone = null;

        public readonly OptionSetValue Address1_ShippingMethodCode = null;

        public readonly string Address1_UPSZone = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string Address2_Line3 = null;

        public readonly Guid? Address1_AddressId = null;

        public readonly double? Address2_Latitude = null;

        public readonly string PinpointPublisherDefaultLocale = null;

        public readonly string Address1_PostOfficeBox = null;

        public new static class Options
        {
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("publisheraddress")]
    public class PublisherAddress : Entity
    {
        public const string EntityLogicalName = "publisheraddress";
        public PublisherAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("publisheraddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["publisheraddressid"] = value;
            }
        }

        public readonly int? UTCOffset = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string City = null;

        public readonly OptionSetValue FreightTermsCode = null;

        public readonly double? Latitude = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string PostOfficeBox = null;

        public readonly string County = null;

        public readonly string Country = null;

        public readonly int? AddressNumber = null;

        public readonly string Fax = null;

        public readonly OptionSetValue ShippingMethodCode = null;

        public readonly Guid? PublisherAddressId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string PrimaryContactName = null;

        public readonly double? Longitude = null;

        public readonly string UPSZone = null;

        public readonly string StateOrProvince = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue AddressTypeCode = null;

        public readonly string Telephone3 = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ParentId = null;

        public readonly string PostalCode = null;

        public readonly string Line1 = null;

        public readonly string Line2 = null;

        public readonly string Line3 = null;

        public readonly string Telephone1 = null;

        public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum ShippingMethodCode
            {
                Default = 1
            }
            public enum AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("quarterlyfiscalcalendar")]
    public class QuarterlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "quarterlyfiscalcalendar";
        public QuarterlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("quarter1_base")]
        public readonly Money Period1_Base = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("quarter4_base")]
        public readonly Money Period10_Base = null;

        public readonly int? FiscalPeriodType = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("quarter4")]
        public readonly Money Period10 = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly DateTime? EffectiveOn = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly decimal? ExchangeRate = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("quarter1")]
        public readonly Money Period1 = null;

        public readonly Guid? UserFiscalCalendarId = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("quarter2")]
        public readonly Money Period4 = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("quarter3")]
        public readonly Money Period7 = null;

        public readonly DateTime? CreatedOn = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("quarter3_base")]
        public readonly Money Period7_Base = null;

        public readonly EntityReference SalesPersonId = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("quarter2_base")]
        public readonly Money Period4_Base = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queue")]
    public class Queue : Entity
    {
        public const string EntityLogicalName = "queue";
        public Queue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;

        public readonly EntityReference DefaultMailbox = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue EmailRouterAccessApproval = null;

        public readonly string EmailPassword = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue QueueTypeCode = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly bool? AllowEmailCredentials = null;

        public readonly string EMailAddress = null;

        public readonly bool? IsFaxQueue = null;

        public readonly bool? IsEmailAddressApprovedByO365Admin = null;

        public readonly int? NumberOfItems = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly OptionSetValue QueueViewType = null;

        public readonly int? NumberOfMembers = null;

        public readonly string Description = null;

        public readonly Guid? QueueId = null;

        public readonly bool? IgnoreUnsolicitedEmail = null;

        public readonly byte[] EntityImage = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly OptionSetValue IncomingEmailDeliveryMethod = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly OptionSetValue IncomingEmailFilteringMethod = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string EmailUsername = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly EntityReference PrimaryUserId = null;

        public new static class Options
        {
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum QueueTypeCode
            {
                DefaultValue = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum QueueViewType
            {
                Public = 0,
                Private = 1
            }
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum IncomingEmailFilteringMethod
            {
                AllEmailMessages = 0,
                EmailMessagesInResponseToDynamics365Email = 1,
                EmailMessagesFromDynamics365LeadsContactsAndAccounts = 2,
                EmailMessagesFromDynamics365RecordsThatAreEmailEnabled = 3,
                NoEmailMessages = 4
            }
            public enum StatusCode
            {
                Inactive = 2,
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queueitem")]
    public class QueueItem : Entity
    {
        public const string EntityLogicalName = "queueitem";
        public QueueItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueitemid"] = value;
            }
        }

        public readonly int? Status = null;

        public readonly EntityReference OwningUser = null;

        public readonly string Sender = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly Guid? QueueItemId = null;

        public readonly DateTime? WorkerIdModifiedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference WorkerId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? ImportSequenceNumber = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference ObjectId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference QueueId = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? State = null;

        public readonly DateTime? EnteredOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string ToRecipients = null;

        public readonly int? Priority = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly OptionSetValue ObjectTypeCode = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Inactive = 2,
                Active = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ObjectTypeCode
            {
                Idea = 10142,
                Email = 4202,
                Challenge = 10140,
                KnowledgeArticle = 9953,
                Donation = 10137,
                Letter = 4207,
                SocialActivity = 4216,
                PhoneCall = 4210,
                Appointment = 4201,
                Activity = 4200,
                KnowledgeArticleTemplate = 10061,
                Fax = 4204,
                Task = 4212,
                RecurringAppointment = 4251
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queueitemcount")]
    public class QueueItemCount : Entity
    {
        public const string EntityLogicalName = "queueitemcount";
        public QueueItemCount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueitemcountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueitemcountid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.Schema.Column("queueitemcount")]
        public readonly string QueueItemCount1 = null;

        public readonly Guid? QueueId = null;

        public readonly Guid? QueueItemCountId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queuemembercount")]
    public class QueueMemberCount : Entity
    {
        public const string EntityLogicalName = "queuemembercount";
        public QueueMemberCount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queuemembercountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queuemembercountid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.Schema.Column("queuemembercount")]
        public readonly string QueueMemberCount1 = null;

        public readonly Guid? QueueId = null;

        public readonly Guid? QueueMemberCountId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queuemembership")]
    public class QueueMembership : Entity
    {
        public const string EntityLogicalName = "queuemembership";
        public QueueMembership() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queuemembershipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queuemembershipid"] = value;
            }
        }

        public readonly Guid? QueueId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? QueueMembershipId = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recommendeddocument")]
    public class RecommendedDocument : Entity
    {
        public const string EntityLogicalName = "recommendeddocument";
        public RecommendedDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recommendeddocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recommendeddocumentid"] = value;
            }
        }

        public readonly string FullName = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string EditUrl = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly string IconClassName = null;

        public readonly string FileType = null;

        public readonly string Location = null;

        public readonly int? FileSize = null;

        public readonly string Version = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string ContentType = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? RecommendedDocumentId = null;

        public readonly string ExternalDocumentId = null;

        public readonly string ExternalModifiedBy = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly string AbsoluteUrl = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string ReadUrl = null;

        public readonly string AssociatedRecordName = null;

        public readonly string Author = null;

        public readonly string Source = null;

        public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recordcountsnapshot")]
    public class RecordCountSnapshot : Entity
    {
        public const string EntityLogicalName = "recordcountsnapshot";
        public RecordCountSnapshot() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recordcountsnapshotid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recordcountsnapshotid"] = value;
            }
        }

        public readonly int? VersionNumberConverted = null;

        public readonly int? Count = null;

        public readonly int? ObjectTypeCode = null;

        public readonly DateTime? LastUpdated = null;

        public readonly Guid? RecordCountSnapshotId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recurrencerule")]
    public class RecurrenceRule : Entity
    {
        public const string EntityLogicalName = "recurrencerule";
        public RecurrenceRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ruleid"] = value;
            }
        }

        public readonly bool? IsRegenerate = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? EffectiveStartDate = null;

        public readonly OptionSetValue MonthOfYear = null;

        public readonly int? Occurrences = null;

        public readonly int? DaysOfWeekMask = null;

        public readonly DateTime? StartTime = null;

        public readonly DateTime? EffectiveEndDate = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? Interval = null;

        public readonly int? Duration = null;

        public readonly bool? IsNthYearly = null;

        public readonly EntityReference ObjectId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? DayOfMonth = null;

        public readonly EntityReference CreatedBy = null;

        public readonly OptionSetValue PatternEndType = null;

        public readonly OptionSetValue RecurrencePatternType = null;

        public readonly DateTime? EndTime = null;

        public readonly bool? IsNthMonthly = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? IsWeekDayPattern = null;

        public readonly int? FirstDayOfWeek = null;

        public readonly DateTime? PatternStartDate = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? PatternEndDate = null;

        public readonly Guid? RuleId = null;

        public readonly OptionSetValue Instance = null;

        public new static class Options
        {
            public enum MonthOfYear
            {
                InvalidMonthOfYear = 0,
                January = 1,
                February = 2,
                March = 3,
                April = 4,
                May = 5,
                June = 6,
                July = 7,
                August = 8,
                September = 9,
                October = 10,
                November = 11,
                December = 12
            }
            public enum PatternEndType
            {
                NoEndDate = 1,
                Occurrences = 2,
                PatternEndDate = 3
            }
            public enum RecurrencePatternType
            {
                Daily = 0,
                Weekly = 1,
                Monthly = 2,
                Yearly = 3
            }
            public enum Instance
            {
                First = 1,
                Second = 2,
                Third = 3,
                Fourth = 4,
                Last = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recurringappointmentmaster")]
    public class RecurringAppointmentMaster : Entity
    {
        public const string EntityLogicalName = "recurringappointmentmaster";
        public RecurringAppointmentMaster() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly bool? IsBilled = null;

        public readonly OptionSetValue InstanceTypeCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? EffectiveStartDate = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? PatternStartDate = null;

        public readonly DateTime? LastExpandedInstanceDate = null;

        public readonly int? Interval = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly Guid? ActivityId = null;

        public readonly OptionSetValue ExpansionStateCode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference GroupId = null;

        public readonly DateTime? EndTime = null;

        public readonly DateTime? StartTime = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly Guid? SubscriptionId = null;

        public readonly int? DayOfMonth = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string Subcategory = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly bool? IsNthYearly = null;

        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue PatternEndType = null;

        public readonly bool? IsWeekDayPattern = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly DateTime? NextExpansionInstanceDate = null;

        public readonly bool? IsRegenerate = null;

        public readonly int? VersionNumber = null;

        public readonly bool? IsNthMonthly = null;

        public readonly string TraversedPath = null;

        public readonly string ActivityTypeCode = null;

        public readonly EntityReference RuleId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityCollection Organizer = null;

        public readonly OptionSetValue Instance = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? Duration = null;

        public readonly OptionSetValue MonthOfYear = null;

        public readonly int? IsUnsafe = null;

        public readonly Guid? ProcessId = null;

        public readonly DateTime? SortDate = null;

        public readonly string Description = null;

        public readonly string Location = null;

        public readonly string GlobalObjectId = null;

        public readonly DateTime? PatternEndDate = null;

        public readonly bool? IsMapiPrivate = null;

        public readonly EntityCollection RequiredAttendees = null;

        public readonly DateTime? EffectiveEndDate = null;

        public readonly Guid? StageId = null;

        public readonly EntityCollection OptionalAttendees = null;

        public readonly int? FirstDayOfWeek = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly bool? IsAllDayEvent = null;

        public readonly bool? SeriesStatus = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly OptionSetValue RecurrencePatternType = null;

        public readonly bool? IsRegularActivity = null;

        public readonly int? DaysOfWeekMask = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? OutlookOwnerApptId = null;

        public readonly string Category = null;

        public readonly string DeletedExceptionsList = null;

        public readonly int? Occurrences = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum ExpansionStateCode
            {
                Unexpanded = 0,
                Partial = 1,
                Full = 2
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum PatternEndType
            {
                NoEndDate = 1,
                Occurrences = 2,
                PatternEndDate = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum Instance
            {
                First = 1,
                Second = 2,
                Third = 3,
                Fourth = 4,
                Last = 5
            }
            public enum MonthOfYear
            {
                InvalidMonthOfYear = 0,
                January = 1,
                February = 2,
                March = 3,
                April = 4,
                May = 5,
                June = 6,
                July = 7,
                August = 8,
                September = 9,
                October = 10,
                November = 11,
                December = 12
            }
            public enum RecurrencePatternType
            {
                Daily = 0,
                Weekly = 1,
                Monthly = 2,
                Yearly = 3
            }
            public enum StatusCode
            {
                Free = 1,
                Tentative = 2,
                Completed = 3,
                Canceled = 4,
                Busy = 5,
                OutOfOffice = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("relationship")]
    public class Relationship : Entity
    {
        public const string EntityLogicalName = "relationship";
        public Relationship() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("relationshipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["relationshipid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsRelationshipAttributeDenormalized = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? EntityKeyId = null;

        public readonly Guid? RelationshipId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("relationshipattribute")]
    public class RelationshipAttribute : Entity
    {
        public const string EntityLogicalName = "relationshipattribute";
        public RelationshipAttribute() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("relationshipattributeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["relationshipattributeid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? IsCustomizable = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly Guid? RelationshipAttributeId = null;

        public readonly EntityReference ReferencedAttributeId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference RelationshipId = null;

        public readonly EntityReference ReferencingAttributeId = null;

        public readonly Guid? SolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("relationshiprole")]
    public class RelationshipRole : Entity
    {
        public const string EntityLogicalName = "relationshiprole";
        public RelationshipRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("relationshiproleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["relationshiproleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? RelationshipRoleId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("relationshiprolemap")]
    public class RelationshipRoleMap : Entity
    {
        public const string EntityLogicalName = "relationshiprolemap";
        public RelationshipRoleMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("relationshiprolemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["relationshiprolemapid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? RelationshipRoleMapId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RelationshipRoleId = null;

        public readonly Guid? OrganizationId = null;

        public readonly string AssociateObjectTypeCode = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string PrimaryObjectTypeCode = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum AssociateObjectTypeCode
            {

            }
            public enum PrimaryObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("replicationbacklog")]
    public class ReplicationBacklog : Entity
    {
        public const string EntityLogicalName = "replicationbacklog";
        public ReplicationBacklog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("replicationbacklogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["replicationbacklogid"] = value;
            }
        }

        public readonly string Data = null;

        public readonly Guid? ReplicationBacklogId = null;

        public readonly EntityReference TargetObjectId = null;

        public readonly OptionSetValue ReplicationBacklogType = null;

        public readonly Guid? TargetDatacenterId = null;

        public new static class Options
        {
            public enum ReplicationBacklogType
            {
                Create = 0,
                Update = 1,
                Delete = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("report")]
    public class Report : Entity
    {
        public const string EntityLogicalName = "report";
        public Report() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportid"] = value;
            }
        }

        public readonly int? CreatedInMajorVersion = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? SignatureMajorVersion = null;

        public readonly Guid? SolutionId = null;

        public readonly int? SignatureLcid = null;

        public readonly string OriginalBodyText = null;

        public readonly string ReportNameOnSRS = null;

        public readonly string BodyUrl = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? SignatureId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string DefaultFilter = null;

        public readonly DateTime? SignatureDate = null;

        public readonly int? SignatureMinorVersion = null;

        public readonly string ScheduleXml = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly bool? IsScheduledReport = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Description = null;

        public readonly OptionSetValue ReportTypeCode = null;

        public readonly string QueryInfo = null;

        public readonly int? LanguageCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? ReportId = null;

        public readonly EntityReference ParentReportId = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? RdlHash = null;

        public readonly string CustomReportXml = null;

        public readonly bool? IsPersonal = null;

        public readonly Guid? ReportIdUnique = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsCustomReport = null;

        public readonly string BodyBinary = null;

        public readonly string BodyText = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string MimeType = null;

        public readonly int? FileSize = null;

        public readonly string FileName = null;

        public new static class Options
        {
            public enum ReportTypeCode
            {
                ReportingServicesReport = 1,
                OtherReport = 2,
                LinkedReport = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("reportcategory")]
    public class ReportCategory : Entity
    {
        public const string EntityLogicalName = "reportcategory";
        public ReportCategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportcategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportcategoryid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? OwningUser = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly bool? IsCustomizable = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly Guid? ReportCategoryId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference ReportId = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? CreatedOn = null;

        public readonly OptionSetValue CategoryCode = null;

        public readonly Guid? ReportCategoryIdUnique = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum CategoryCode
            {
                SalesReports = 1,
                ServiceReports = 2,
                MarketingReports = 3,
                AdministrativeReports = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("reportentity")]
    public class ReportEntity : Entity
    {
        public const string EntityLogicalName = "reportentity";
        public ReportEntity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportentityid"] = value;
            }
        }

        public readonly Guid? OwningUser = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? ReportEntityIdUnique = null;

        public readonly Guid? ReportEntityId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly bool? IsFilterable = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference ReportId = null;

        public readonly Guid? SolutionId = null;

        public readonly string ObjectTypeCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("reportlink")]
    public class ReportLink : Entity
    {
        public const string EntityLogicalName = "reportlink";
        public ReportLink() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportlinkid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportlinkid"] = value;
            }
        }

        public readonly Guid? OwningUser = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ReportId = null;

        public readonly OptionSetValue LinkTypeCode = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? ReportLinkId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? ReportLinkIdUnique = null;

        public readonly EntityReference LinkedReportId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly string LinkedReportName = null;

        public new static class Options
        {
            public enum LinkTypeCode
            {
                DrillThrough = 1,
                SubReport = 2,
                DrillThroughAndSubReport = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("reportvisibility")]
    public class ReportVisibility : Entity
    {
        public const string EntityLogicalName = "reportvisibility";
        public ReportVisibility() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportvisibilityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportvisibilityid"] = value;
            }
        }

        public readonly Guid? OwningUser = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? IsCustomizable = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? ReportVisibilityIdUnique = null;

        public readonly EntityReference ReportId = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue VisibilityCode = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? ReportVisibilityId = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum VisibilityCode
            {
                ReportsArea = 1,
                FormsForRelatedRecordTypes = 2,
                ListsForRelatedRecordTypes = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("revokeinheritedaccessrecordstracker")]
    public class revokeinheritedaccessrecordstracker : UserOrTeamEntity
    {
        public const string EntityLogicalName = "revokeinheritedaccessrecordstracker";
        public revokeinheritedaccessrecordstracker() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("revokeinheritedaccessrecordstrackerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["revokeinheritedaccessrecordstrackerid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.Schema.Column("revokeinheritedaccessrecordstracker")]
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string revokeinheritedaccessrecordstracker1 = null;

        public readonly string RecordsJson = null;

        public readonly Guid? revokeinheritedaccessrecordstrackerId = null;

        public readonly int? TotalRecords = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }

    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribboncommand")]
    public class RibbonCommand : Entity
    {
        public const string EntityLogicalName = "ribboncommand";
        public RibbonCommand() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncommandid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncommandid"] = value;
            }
        }

        public readonly Guid? RibbonCommandId = null;

        public readonly string Command = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string CommandDefinition = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string Entity = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? RibbonCommandUniqueId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference RibbonCustomizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribboncontextgroup")]
    public class RibbonContextGroup : Entity
    {
        public const string EntityLogicalName = "ribboncontextgroup";
        public RibbonContextGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncontextgroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncontextgroupid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? RibbonContextGroupUniqueId = null;

        public readonly Guid? RibbonContextGroupId = null;

        public readonly int? VersionNumber = null;

        public readonly string ContextGroupId = null;

        public readonly string ContextGroupXml = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly string Entity = null;

        public readonly EntityReference RibbonCustomizationId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribboncustomization")]
    public class RibbonCustomization : Entity
    {
        public const string EntityLogicalName = "ribboncustomization";
        public RibbonCustomization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncustomizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncustomizationid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? RibbonCustomizationId = null;

        public readonly bool? IsManaged = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? RibbonCustomizationUniqueId = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? PublishedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string Entity = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribbondiff")]
    public class RibbonDiff : Entity
    {
        public const string EntityLogicalName = "ribbondiff";
        public RibbonDiff() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbondiffid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbondiffid"] = value;
            }
        }

        public readonly Guid? ContextGroupId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? RibbonDiffUniqueId = null;

        public readonly int? Sequence = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string TabId = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string RDX = null;

        public readonly bool? IsAppAware = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? RibbonDiffId = null;

        public readonly OptionSetValue DiffType = null;

        public readonly string Entity = null;

        public readonly string DiffId = null;

        public readonly EntityReference RibbonCustomizationId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum DiffType
            {
                Standard = 0,
                Tab = 1,
                LayoutTemplate = 2,
                LocalizedLabel = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribbonmetadatatoprocess")]
    public class RibbonMetadataToProcess : Entity
    {
        public const string EntityLogicalName = "ribbonmetadatatoprocess";
        public RibbonMetadataToProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbonmetadatarowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbonmetadatarowid"] = value;
            }
        }

        public readonly DateTime? CompletedOn = null;

        public readonly int? IsDbUpdate = null;

        public readonly Guid? SolutionId = null;

        public readonly int? RetryCount = null;

        public readonly DateTime? ProcessedOn = null;

        public readonly int? Status = null;

        public readonly string ExceptionMessage = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? RibbonMetadataRowId = null;

        public readonly string EntityName = null;

        public readonly string SolutionName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribbonrule")]
    public class RibbonRule : Entity
    {
        public const string EntityLogicalName = "ribbonrule";
        public RibbonRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbonruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbonruleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue RuleType = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference RibbonCustomizationId = null;

        public readonly Guid? RibbonRuleId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string Entity = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string RuleDefinition = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? RibbonRuleUniqueId = null;

        public readonly string RuleId = null;

        public new static class Options
        {
            public enum RuleType
            {
                Enable = 1,
                Trim = 2,
                TabSelection = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribbontabtocommandmap")]
    public class RibbonTabToCommandMap : Entity
    {
        public const string EntityLogicalName = "ribbontabtocommandmap";
        public RibbonTabToCommandMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbontabtocommandmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbontabtocommandmapid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string ControlId = null;

        public readonly string TabId = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? RibbonTabToCommandMapId = null;

        public readonly Guid? RibbonTabToCommandMapUniqueId = null;

        public readonly string Command = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference RibbonDiffId = null;

        public readonly Guid? SolutionId = null;

        public readonly string Entity = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("role")]
    public class Role : Entity
    {
        public const string EntityLogicalName = "role";
        public Role() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roleid"] = value;
            }
        }

        public readonly EntityReference RoleTemplateId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsCustomizable = null;

        public readonly bool? CanBeDeleted = null;

        public readonly Guid? OrganizationId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly Guid? RoleId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly OptionSetValue IsInherited = null;

        public readonly Guid? RoleIdUnique = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference ParentRoleId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ParentRootRoleId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum IsInherited
            {
                TeamPrivilegesOnly = 0,
                DirectUserBasicAccessLevelAndTeamPrivileges = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("roleprivileges")]
    public class RolePrivileges : Entity
    {
        public const string EntityLogicalName = "roleprivileges";
        public RolePrivileges() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roleprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roleprivilegeid"] = value;
            }
        }

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? PrivilegeId = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? RoleId = null;

        public readonly bool? CanBeDeleted = null;

        public readonly int? PrivilegeDepthMask = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? RolePrivilegeId = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? RolePrivilegeIdUnique = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("roletemplate")]
    public class RoleTemplate : Entity
    {
        public const string EntityLogicalName = "roletemplate";
        public RoleTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roletemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roletemplateid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? Upgrading = null;

        public readonly Guid? RoleTemplateId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("roletemplateprivileges")]
    public class RoleTemplatePrivileges : Entity
    {
        public const string EntityLogicalName = "roletemplateprivileges";
        public RoleTemplatePrivileges() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roletemplateprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roletemplateprivilegeid"] = value;
            }
        }

        public readonly bool? Upgrading = null;

        public readonly bool? IsDeep = null;

        public readonly Guid? PrivilegeId = null;

        public readonly bool? IsLocal = null;

        public readonly Guid? RoleTemplateId = null;

        public readonly Guid? RoleTemplatePrivilegeId = null;

        public readonly bool? IsBasic = null;

        public readonly bool? IsGlobal = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("rollupfield")]
    public class RollupField : Entity
    {
        public const string EntityLogicalName = "rollupfield";
        public RollupField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rollupfieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rollupfieldid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string EntityForDateAttribute = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string SourceAttribute = null;

        public readonly string DateAttribute = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? RollupFieldId = null;

        public readonly EntityReference MetricId = null;

        public readonly string SourceEntity = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string GoalAttribute = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? IsStateParentEntityAttribute = null;

        public readonly int? SourceState = null;

        public readonly int? SourceStatus = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum EntityForDateAttribute
            {

            }
            public enum SourceEntity
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("rollupjob")]
    public class RollupJob : Entity
    {
        public const string EntityLogicalName = "rollupjob";
        public RollupJob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rollupjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rollupjobid"] = value;
            }
        }

        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? RecordCreatedOn = null;

        public readonly int? DepthProcessed = null;

        public readonly int? RetryCount = null;

        public readonly DateTime? PostponeUntil = null;

        public readonly int? SourceEntityTypeCode = null;

        public readonly int? RollupJobId = null;

        public readonly EntityReference RollupPropertiesId = null;

        public readonly EntityReference RegardingObjectId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("rollupproperties")]
    public class RollupProperties : Entity
    {
        public const string EntityLogicalName = "rollupproperties";
        public RollupProperties() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rolluppropertiesid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rolluppropertiesid"] = value;
            }
        }

        public readonly string RollupEntityLogicalName = null;

        public readonly string AggregateRelationshipName = null;

        public readonly OptionSetValue StateCode = null;

        public readonly int? RollupEntityTypeCode = null;

        public readonly string SourceHierarchicalRelationshipName = null;

        public readonly Guid? BootstrapRollupAsyncJobId = null;

        public readonly string RollupEntityPrimaryKeyPhysicalName = null;

        public readonly int? BootstrapCurrentDepth = null;

        public readonly string RollupAttributeLogicalName = null;

        public readonly bool? AllowHierarchyOnSource = null;

        public readonly int? BootstrapRetryCount = null;

        public readonly OptionSetValue AggregateType = null;

        public readonly string DataType = null;

        public readonly int? IsActivityPartyIncluded = null;

        public readonly OptionSetValue InitialValueCalculationStatus = null;

        public readonly int? VersionNumber = null;

        public readonly string RollupEntityBaseTableName = null;

        public readonly int? BootstrapTargetPointer = null;

        public readonly string RollupFilterAttributes = null;

        public readonly int? BootstrapStepNumber = null;

        public readonly string RollupStateAttributePhysicalName = null;

        public readonly Guid? IncrementalRollupAsyncJobId = null;

        public readonly int? AggregateEntityTypeCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly string AggregateAttributeLogicalName = null;

        public readonly Guid? RollupPropertiesId = null;

        public readonly string AggregateEntityLogicalName = null;

        public readonly DateTime? LastCalculationTime = null;

        public readonly string AggregateFilterAttributes = null;

        public new static class Options
        {
            public enum StateCode
            {
                Valid = 0,
                Invalid = 1
            }
            public enum AggregateType
            {
                Count = 0,
                Sum = 1,
                Average = 2,
                Min = 3,
                Max = 4
            }
            public enum InitialValueCalculationStatus
            {
                Pending = 0,
                InProgress = 1,
                Paused = 2,
                Completed = 3,
                Failed = 4
            }
            public enum StatusCode
            {
                Valid = 1,
                Invalid = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("routingrule")]
    public class RoutingRule : Entity
    {
        public const string EntityLogicalName = "routingrule";
        public RoutingRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("routingruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["routingruleid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string Description = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Guid? RoutingRuleIdUnique = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly Guid? RoutingRuleId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference WorkflowId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("routingruleitem")]
    public class RoutingRuleItem : Entity
    {
        public const string EntityLogicalName = "routingruleitem";
        public RoutingRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("routingruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["routingruleitemid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly DateTime? AssignObjectIdModifiedOn = null;

        public readonly string ConditionXml = null;

        public readonly int? SequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference RoutedQueueId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? RoutingRuleItemId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference RoutingRuleId = null;

        public readonly Guid? RoutingRuleItemIdUnique = null;

        public readonly EntityReference AssignObjectId = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("runtimedependency")]
    public class RuntimeDependency : Entity
    {
        public const string EntityLogicalName = "runtimedependency";
        public RuntimeDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencyid"] = value;
            }
        }

        public readonly bool? IsPublished = null;

        public readonly string RequiredComponentNodeId = null;

        public readonly int? RequiredComponentType = null;

        public readonly DateTime? RequiredComponentModifiedTime = null;

        public readonly Guid? DependentComponentNodeId = null;

        public readonly DateTime? CreatedTime = null;

        public readonly Guid? DependencyId = null;

        public readonly int? DependentComponentType = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_challenge")]
    public class sample_challenge : UserOrTeamEntity
    {
        public const string EntityLogicalName = "sample_challenge";
        public sample_challenge() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sample_challengeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sample_challengeid"] = value;
            }
        }

        public readonly EntityReference sample_ChallengeSponsor = null;

        public readonly Guid? sample_challengeId = null;

        public readonly bool? sample_CloseChallengetonewIdeas = null;

        public readonly int? sample_Durationweeks = null;

        public readonly bool? sample_Awardsissued = null;

        public readonly DateTime? sample_Numberofideas_Date = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string sample_name = null;

        public readonly bool? sample_ReviewIdeas = null;

        public readonly bool? sample_Announcevoting = null;

        public readonly bool? sample_Kickofffinalreview = null;

        public readonly OptionSetValue sample_Domain = null;

        public readonly string traversedpath = null;

        public readonly int? sample_Numberofideas = null;

        public readonly bool? sample_LaunchChallenge = null;

        public readonly Guid? processid = null;

        public readonly Guid? stageid = null;

        public readonly bool? sample_CloseChallenge = null;

        public readonly EntityReference sample_ReviewComitee = null;

        public readonly DateTime? sample_Acceptnewideastill = null;

        public readonly DateTime? sample_Finalreviewofideason = null;

        public readonly string sample_Description = null;

        public readonly DateTime? sample_Launchdate = null;

        public readonly DateTime? sample_CloseDate = null;

        public readonly bool? sample_AdditionalStakeholders = null;

        public readonly int? sample_Numberofideas_State = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum sample_Domain
            {
                NewBusinessModels = 727000000,
                Sustainability = 727000001,
                IndustryIOT = 727000002,
                ITOTConvergence = 727000003,
                Other = 727000004
            }
            public enum statuscode
            {
                Draft = 727000000,
                Active = 1,
                UnderReview = 727000001,
                Closed = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_challengemanagementprocess")]
    public class sample_challengemanagementprocess : OrganizationEntity
    {
        public const string EntityLogicalName = "sample_challengemanagementprocess";
        public sample_challengemanagementprocess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }

        public readonly EntityReference ActiveStageId = null;

        public readonly EntityReference bpf_sample_challengeid = null;

        public readonly int? bpf_Duration = null;

        public readonly string TraversedPath = null;

        public readonly EntityReference ProcessId = null;

        public readonly Guid? BusinessProcessFlowInstanceId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? CompletedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string bpf_name = null;

        public readonly DateTime? ActiveStageStartedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_donation")]
    public class sample_donation : UserOrTeamEntity
    {
        public const string EntityLogicalName = "sample_donation";
        public sample_donation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly bool? IsBilled = null;

        public readonly OptionSetValue InstanceTypeCode = null;

        public readonly EntityCollection From = null;

        public readonly EntityCollection Resources = null;

        public readonly Guid? SeriesId = null;

        public readonly string TraversedPath = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly Guid? ActivityId = null;

        public readonly EntityCollection Customers = null;

        public readonly DateTime? DeliveryLastAttemptedOn = null;

        public readonly EntityCollection Partners = null;

        public readonly int? OnHoldTime = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly string ExchangeItemId = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly DateTime? ActualStart = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue DeliveryPriorityCode = null;

        public readonly EntityReference SenderMailboxId = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly EntityReference SLAId = null;

        public readonly OptionSetValue StateCode = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly EntityCollection BCC = null;

        public readonly OptionSetValue Community = null;

        public readonly string ActivityAdditionalParams = null;

        public readonly string ActivityTypeCode = null;

        public readonly Money sample_donationamount_Base = null;

        public readonly EntityCollection Organizer = null;

        public readonly DateTime? PostponeActivityProcessingUntil = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly Guid? ProcessId = null;

        public readonly string Description = null;

        public readonly DateTime? SortDate = null;

        public readonly bool? IsMapiPrivate = null;

        public readonly EntityCollection RequiredAttendees = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly Guid? StageId = null;

        public readonly EntityCollection OptionalAttendees = null;

        public readonly bool? LeftVoiceMail = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly Money sample_DonationAmount = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityCollection To = null;

        public readonly bool? IsRegularActivity = null;

        public readonly EntityCollection CC = null;

        public readonly string ExchangeWebLink = null;

        public readonly DateTime? SentOn = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? ActualDurationMinutes = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum StatusCode
            {
                Open = 1,
                Paid = 2,
                Canceled = 3,
                Scheduled = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_fundraiser")]
    public class sample_fundraiser : UserOrTeamEntity
    {
        public const string EntityLogicalName = "sample_fundraiser";
        public sample_fundraiser() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sample_fundraiserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sample_fundraiserid"] = value;
            }
        }

        public readonly OptionSetValue sample_Category = null;

        public readonly Guid? sample_fundraiserId = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Guid? stageid = null;

        public readonly int? sample_TotalDonations_State = null;

        public readonly string sample_VideoLink = null;

        public readonly Money sample_totaldonations_Base = null;

        public readonly Money sample_TotalDonations = null;

        public readonly DateTime? sample_TotalDonations_Date = null;

        public readonly string traversedpath = null;

        public readonly string sample_Story = null;

        public readonly Guid? processid = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Money sample_FundraiserGoal = null;

        public readonly Money sample_fundraisergoal_Base = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string sample_name = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum sample_Category
            {
                Education = 727000000,
                Health = 727000001,
                Community = 727000002,
                Animals = 727000003,
                Youth = 727000004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_idea")]
    public class sample_idea : UserOrTeamEntity
    {
        public const string EntityLogicalName = "sample_idea";
        public sample_idea() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sample_ideaid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sample_ideaid"] = value;
            }
        }

        public readonly int? sample_RiskScore = null;

        public readonly Guid? sample_ideaId = null;

        public readonly OptionSetValue sample_Category = null;

        public readonly Money sample_investmentrequired_Base = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly bool? sample_Completeproposal = null;

        public readonly bool? sample_Invitecontributors = null;

        public readonly Guid? stageid = null;

        public readonly int? sample_IdeaScore = null;

        public readonly int? sample_TimetoROImonths = null;

        public readonly bool? sample_Submitforreview = null;

        public readonly Money sample_InvestmentRequired = null;

        public readonly int? sample_PercentComplete = null;

        public readonly string traversedpath = null;

        public readonly int? sample_numberofvotes = null;

        public readonly Guid? processid = null;

        public readonly EntityReference sample_OriginatingChallengeId = null;

        public readonly bool? sample_FundProject = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string sample_Description = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string sample_name = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum sample_Category
            {
                NetNew = 727000000,
                Incremental = 727000001
            }
            public enum statuscode
            {
                Active = 1,
                ReadyForReview = 727000000,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_product")]
    public class sample_product : UserOrTeamEntity
    {
        public const string EntityLogicalName = "sample_product";
        public sample_product() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sample_productid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sample_productid"] = value;
            }
        }

        public readonly OptionSetValue sample_Category = null;

        public readonly int? sample_Ratings_Count = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Money sample_price_Base = null;

        public readonly byte[] EntityImage = null;

        public readonly Money sample_Price = null;

        public readonly Guid? stageid = null;

        public readonly string sample_CategoryID = null;

        public readonly int? sample_TotalReserved = null;

        public readonly string sample_ProductDescription1 = null;

        public readonly decimal? sample_Available = null;

        public readonly string sample_ProductDescription2 = null;

        public readonly int? sample_Ratings_State = null;

        public readonly int? sample_TotalReserved_State = null;

        public readonly Guid? sample_productId = null;

        public readonly string traversedpath = null;

        public readonly DateTime? sample_Ratings_Date = null;

        public readonly Guid? processid = null;

        public readonly int? sample_Ratings = null;

        public readonly decimal? ExchangeRate = null;

        public readonly int? sample_InventoryTotal = null;

        public readonly OptionSetValue sample_Color = null;

        public readonly DateTime? sample_TotalReserved_Date = null;

        public readonly decimal? sample_Ratings_Sum = null;

        public readonly string sample_ModelNumber = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string sample_name = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum sample_Category
            {
                Laptops = 727000000,
                Keyboards = 727000001,
                Monitors = 727000002,
                Mice = 727000003
            }
            public enum sample_Color
            {
                Black = 727000000,
                White = 727000001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_reservation")]
    public class sample_reservation : UserOrTeamEntity
    {
        public const string EntityLogicalName = "sample_reservation";
        public sample_reservation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sample_reservationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sample_reservationid"] = value;
            }
        }

        public readonly Guid? stageid = null;

        public readonly DateTime? sample_ReservationStart = null;

        public readonly Guid? sample_reservationId = null;

        public readonly string traversedpath = null;

        public readonly Guid? processid = null;

        public readonly DateTime? sample_Returnby = null;

        public readonly string sample_Reservedbyemail = null;

        public readonly EntityReference sample_ProductReservationId = null;

        public readonly int? sample_Reservefordays = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string sample_name = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Reserved = 727000000,
                Available = 727000002,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_review")]
    public class sample_review : UserOrTeamEntity
    {
        public const string EntityLogicalName = "sample_review";
        public sample_review() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sample_reviewid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sample_reviewid"] = value;
            }
        }

        public readonly OptionSetValue sample_RatingCategory = null;

        public readonly Guid? sample_reviewId = null;

        public readonly EntityReference sample_ProductRatingId = null;

        public readonly int? sample_Rating = null;

        public readonly string sample_Comments = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string sample_name = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum sample_RatingCategory
            {
                Good = 727000000,
                Neutral = 727000001,
                Poor = 727000002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sample_teamproject")]
    public class sample_teamproject : UserOrTeamEntity
    {
        public const string EntityLogicalName = "sample_teamproject";
        public sample_teamproject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sample_teamprojectid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sample_teamprojectid"] = value;
            }
        }

        public readonly Guid? sample_teamprojectId = null;

        public readonly bool? sample_Closeproject = null;

        public readonly Money sample_CurrentSpend = null;

        public readonly OptionSetValue sample_Scheduleperformance = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string sample_name = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue sample_Budgetstatus = null;

        public readonly DateTime? sample_Projectend = null;

        public readonly DateTime? sample_Projectstart = null;

        public readonly Money sample_budget_Base = null;

        public readonly EntityReference sample_ResultingProjectId = null;

        public readonly DateTime? sample_Opentaskcount_Date = null;

        public readonly string EmailAddress = null;

        public readonly string traversedpath = null;

        public readonly Money sample_Budgetremaining = null;

        public readonly bool? sample_Finalstatusreportsent = null;

        public readonly Guid? processid = null;

        public readonly string sample_Timeremaining = null;

        public readonly Money sample_currentspend_Base = null;

        public readonly Guid? stageid = null;

        public readonly bool? sample_Riskassessmentcompleted = null;

        public readonly Money sample_Budget = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly bool? sample_Supportplan = null;

        public readonly OptionSetValue sample_ProjectStatus = null;

        public readonly OptionSetValue sample_Sprintcadence = null;

        public readonly string sample_Description = null;

        public readonly OptionSetValue sample_ProjectType = null;

        public readonly int? sample_Opentaskcount_State = null;

        public readonly int? sample_Opentaskcount = null;

        public readonly Money sample_budgetremaining_Base = null;

        public new static class Options
        {
            public enum sample_Scheduleperformance
            {
                OnTime = 727000000,
                Ahead = 727000001,
                Behind = 727000002
            }
            public enum sample_Budgetstatus
            {
                OnBudget = 727000001,
                OverBudget = 727000000,
                UnderBudget = 727000002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum sample_ProjectStatus
            {
                Green = 727000000,
                Yellow = 727000001,
                Red = 727000002
            }
            public enum sample_Sprintcadence
            {
                Weekly = 727000000,
                BiMonthly = 727000001,
                Monthly = 727000002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum sample_ProjectType
            {
                Default = 727000000,
                ChallengeWin = 727000001,
                ManagerDriven = 727000002
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("savedorginsightsconfiguration")]
    public class SavedOrgInsightsConfiguration : Entity
    {
        public const string EntityLogicalName = "savedorginsightsconfiguration";
        public SavedOrgInsightsConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedorginsightsconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedorginsightsconfigurationid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Name = null;

        public readonly string JsonData = null;

        public readonly DateTime? JsonDataEndTime = null;

        public readonly OptionSetValue Lookback = null;

        public readonly string Parameters = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? JsonDataStartTime = null;

        public readonly OptionSetValue MetricType = null;

        public readonly Guid? SavedOrgInsightsConfigurationId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue PlotOption = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? IsDrilldown = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum Lookback
            {
                _2H = 1,
                _48H = 2,
                _7D = 3,
                _30D = 4
            }
            public enum MetricType
            {
                TimeSeries = 1,
                Category = 2
            }
            public enum PlotOption
            {
                Line = 1,
                Column = 2,
                Area = 3,
                Pie = 4,
                Bar = 5,
                Donut = 6,
                Infocard = 7,
                List = 8,
                DoubleDonut = 9,
                LinearGauge = 10,
                Bubble = 11
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("savedquery")]
    public class SavedQuery : Entity
    {
        public const string EntityLogicalName = "savedquery";
        public SavedQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedqueryid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly bool? IsUserDefined = null;

        public readonly string IntroducedVersion = null;

        public readonly bool? IsPrivate = null;

        public readonly string Description = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly Guid? SavedQueryIdUnique = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? OverwriteTime = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? QueryType = null;

        public readonly bool? IsCustomizable = null;

        public readonly bool? CanBeDeleted = null;

        public readonly Guid? SavedQueryId = null;

        public readonly string AdvancedGroupBy = null;

        public readonly bool? IsQuickFindQuery = null;

        public readonly string OfflineSqlQuery = null;

        public readonly int? QueryAppUsage = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string ReturnedTypeCode = null;

        public readonly string ConditionalFormatting = null;

        public readonly string FetchXml = null;

        public readonly Guid? SolutionId = null;

        public readonly string QueryAPI = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? IsCustom = null;

        public readonly string LayoutJson = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? OrganizationTabOrder = null;

        public readonly string ColumnSetXml = null;

        public readonly string LayoutXml = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("savedqueryvisualization")]
    public class SavedQueryVisualization : Entity
    {
        public const string EntityLogicalName = "savedqueryvisualization";
        public SavedQueryVisualization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedqueryvisualizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedqueryvisualizationid"] = value;
            }
        }

        public readonly string DataDescription = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsCustomizable = null;

        public readonly bool? CanBeDeleted = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? SavedQueryVisualizationId = null;

        public readonly string PresentationDescription = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string PrimaryEntityTypeCode = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? SavedQueryVisualizationIdUnique = null;

        public readonly OptionSetValue ChartType = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference WebResourceId = null;

        public readonly OptionSetValue Type = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ChartType
            {
                ASPNETCharts = 0,
                PowerBI = 1
            }
            public enum Type
            {
                ForDataCentricAsWellAsInteractionCentric = 0,
                JustForInteractionCentric = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessage")]
    public class SdkMessage : Entity
    {
        public const string EntityLogicalName = "sdkmessage";
        public SdkMessage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly bool? IsPrivate = null;

        public readonly string ThrottleSettings = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? WorkflowSdkStepEnabled = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsValidForExecuteAsync = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly bool? IsReadOnly = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? SdkMessageIdUnique = null;

        public readonly string ExecutePrivilegeName = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? AutoTransact = null;

        public readonly bool? IsManaged = null;

        public readonly bool? IsActive = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string CategoryName = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly bool? Expand = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? SdkMessageId = null;

        public readonly int? Availability = null;

        public readonly bool? Template = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessagefilter")]
    public class SdkMessageFilter : Entity
    {
        public const string EntityLogicalName = "sdkmessagefilter";
        public SdkMessageFilter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagefilterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagefilterid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly bool? IsVisible = null;

        public readonly bool? IsCustomProcessingStepAllowed = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? WorkflowSdkStepEnabled = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? SdkMessageFilterIdUnique = null;

        public readonly int? RestrictionLevel = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference SdkMessageId = null;

        public readonly string PrimaryObjectTypeCode = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string SecondaryObjectTypeCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? Availability = null;

        public readonly Guid? SdkMessageFilterId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum PrimaryObjectTypeCode
            {

            }
            public enum SecondaryObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessagepair")]
    public class SdkMessagePair : Entity
    {
        public const string EntityLogicalName = "sdkmessagepair";
        public SdkMessagePair() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagepairid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagepairid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string DeprecatedVersion = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Namespace = null;

        public readonly string Endpoint = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly Guid? SdkMessagePairId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? SdkMessagePairIdUnique = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference SdkMessageId = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string SdkMessageBindingInformation = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageprocessingstep")]
    public class SdkMessageProcessingStep : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstep";
        public SdkMessageProcessingStep() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepid"] = value;
            }
        }

        public readonly bool? IsHidden = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly OptionSetValue StateCode = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? OverwriteTime = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Configuration = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference EventHandler = null;

        public readonly string FilteringAttributes = null;

        public readonly EntityReference ImpersonatingUserId = null;

        public readonly int? CustomizationLevel = null;

        public readonly int? Rank = null;

        public readonly bool? CanUseReadOnlyConnection = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly OptionSetValue Stage = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Guid? SdkMessageProcessingStepId = null;

        public readonly EntityReference SdkMessageId = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference SdkMessageProcessingStepSecureConfigId = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue InvocationSource = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string EventExpander = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference PluginTypeId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue SupportedDeployment = null;

        public readonly Guid? SdkMessageProcessingStepIdUnique = null;

        public readonly EntityReference SdkMessageFilterId = null;

        public readonly OptionSetValue Mode = null;

        public readonly string RuntimeIntegrationProperties = null;

        public readonly bool? AsyncAutoDelete = null;

        public new static class Options
        {
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum Stage
            {
                InitialPreOperationForInternalUseOnly = 5,
                PreValidation = 10,
                InternalPreOperationBeforeExternalPluginsForInternalUseOnly = 15,
                PreOperation = 20,
                InternalPreOperationAfterExternalPluginsForInternalUseOnly = 25,
                MainOperationForInternalUseOnly = 30,
                InternalPostOperationBeforeExternalPluginsForInternalUseOnly = 35,
                PostOperation = 40,
                InternalPostOperationAfterExternalPluginsForInternalUseOnly = 45,
                PostOperationDeprecated = 50,
                FinalPostOperationForInternalUseOnly = 55,
                PreCommitStageFiredBeforeTransactionCommitForInternalUseOnly = 80,
                PostCommitStageFiredAfterTransactionCommitForInternalUseOnly = 90
            }
            public enum InvocationSource
            {
                Internal = -1,
                Parent = 0,
                Child = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }
            public enum SupportedDeployment
            {
                ServerOnly = 0,
                MicrosoftDynamics365ClientForOutlookOnly = 1,
                Both = 2
            }
            public enum Mode
            {
                Synchronous = 0,
                Asynchronous = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageprocessingstepimage")]
    public class SdkMessageProcessingStepImage : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstepimage";
        public SdkMessageProcessingStepImage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepimageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepimageid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? OverwriteTime = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? SdkMessageProcessingStepImageId = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string RelatedAttributeName = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string EntityAlias = null;

        public readonly string MessagePropertyName = null;

        public readonly OptionSetValue ImageType = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Attributes = null;

        public readonly EntityReference SdkMessageProcessingStepId = null;

        public readonly Guid? SdkMessageProcessingStepImageIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ImageType
            {
                PreImage = 0,
                PostImage = 1,
                Both = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageprocessingstepsecureconfig")]
    public class SdkMessageProcessingStepSecureConfig : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstepsecureconfig";
        public SdkMessageProcessingStepSecureConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepsecureconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepsecureconfigid"] = value;
            }
        }

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string SecureConfig = null;

        public readonly Guid? SdkMessageProcessingStepSecureConfigIdUnique = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? SdkMessageProcessingStepSecureConfigId = null;

        public readonly int? CustomizationLevel = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessagerequest")]
    public class SdkMessageRequest : Entity
    {
        public const string EntityLogicalName = "sdkmessagerequest";
        public SdkMessageRequest() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagerequestid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagerequestid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SdkMessageRequestId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Name = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly EntityReference SdkMessagePairId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string PrimaryObjectTypeCode = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? SdkMessageRequestIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum PrimaryObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessagerequestfield")]
    public class SdkMessageRequestField : Entity
    {
        public const string EntityLogicalName = "sdkmessagerequestfield";
        public SdkMessageRequestField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagerequestfieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagerequestfieldid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SdkMessageRequestFieldIdUnique = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference SdkMessageRequestId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Name = null;

        public readonly string ParameterBindingInformation = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string ClrParser = null;

        public readonly bool? Optional = null;

        public readonly int? VersionNumber = null;

        public readonly int? FieldMask = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string Parser = null;

        public readonly Guid? SdkMessageRequestFieldId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string PublicName = null;

        public readonly int? Position = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageresponse")]
    public class SdkMessageResponse : Entity
    {
        public const string EntityLogicalName = "sdkmessageresponse";
        public SdkMessageResponse() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageresponseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageresponseid"] = value;
            }
        }

        public readonly Guid? SdkMessageResponseIdUnique = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string IntroducedVersion = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? CustomizationLevel = null;

        public readonly Guid? SdkMessageResponseId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference SdkMessageRequestId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageresponsefield")]
    public class SdkMessageResponseField : Entity
    {
        public const string EntityLogicalName = "sdkmessageresponsefield";
        public SdkMessageResponseField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageresponsefieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageresponsefieldid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string Name = null;

        public readonly string ParameterBindingInformation = null;

        public readonly EntityReference SdkMessageResponseId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CustomizationLevel = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string Value = null;

        public readonly string Formatter = null;

        public readonly Guid? SdkMessageResponseFieldIdUnique = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string ClrFormatter = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string PublicName = null;

        public readonly Guid? SdkMessageResponseFieldId = null;

        public readonly int? Position = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("searchtelemetry")]
    public class searchtelemetry : OrganizationEntity
    {
        public const string EntityLogicalName = "searchtelemetry";
        public searchtelemetry() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("searchtelemetryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["searchtelemetryid"] = value;
            }
        }

        public readonly Guid? searchtelemetryId = null;

        public readonly int? TTLInSeconds = null;

        public readonly string FeedbackData = null;

        public readonly string CorrelationId = null;

        public readonly bool? EyesOnAnalyticsAllowed = null;

        public readonly string RequestId = null;

        public readonly string SessionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string UserQuery = null;

        public readonly string ScenarioName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("semiannualfiscalcalendar")]
    public class SemiAnnualFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "semiannualfiscalcalendar";
        public SemiAnnualFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("firsthalf_base")]
        public readonly Money Period1_Base = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly int? FiscalPeriodType = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly int? UTCConversionTimeZoneCode = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("secondhalf_base")]
        public readonly Money Period7_Base = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("secondhalf")]
        public readonly Money Period7 = null;

        public readonly DateTime? EffectiveOn = null;

        public readonly decimal? ExchangeRate = null;
        [System.ComponentModel.DataAnnotations.Schema.Column("firsthalf")]
        public readonly Money Period1 = null;

        public readonly Guid? UserFiscalCalendarId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference SalesPersonId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("serviceendpoint")]
    public class ServiceEndpoint : Entity
    {
        public const string EntityLogicalName = "serviceendpoint";
        public ServiceEndpoint() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("serviceendpointid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["serviceendpointid"] = value;
            }
        }

        public readonly OptionSetValue UserClaim = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly OptionSetValue NamespaceFormat = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? IsSASKeySet = null;

        public readonly OptionSetValue AuthType = null;

        public readonly string Url = null;

        public readonly string NamespaceAddress = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue SchemaType = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsAuthValueSet = null;

        public readonly OptionSetValue MessageFormat = null;

        public readonly string SASKeyName = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string AuthValue = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Guid? ServiceEndpointId = null;

        public readonly bool? IsManaged = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string Path = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string SASToken = null;

        public readonly OptionSetValue Contract = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference KeyVaultReferenceId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? ServiceEndpointIdUnique = null;

        public readonly string SASKey = null;

        public readonly OptionSetValue ConnectionMode = null;

        public readonly bool? IsSASTokenSet = null;

        public readonly string SolutionNamespace = null;

        public readonly string RuntimeIntegrationProperties = null;

        public readonly bool? UseKeyVaultConfiguration = null;

        public new static class Options
        {
            public enum UserClaim
            {
                None = 1,
                UserId = 2,
                UserInfo = 3
            }
            public enum NamespaceFormat
            {
                NamespaceName = 1,
                NamespaceAddress = 2
            }
            public enum AuthType
            {
                ACS = 1,
                SASKey = 2,
                SASToken = 3,
                WebhookKey = 4,
                HttpHeader = 5,
                HttpQueryString = 6,
                ConnectionString = 7,
                AccessKey = 8
            }
            public enum SchemaType
            {
                EventGrid = 1,
                CloudEvents = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum MessageFormat
            {
                BinaryXML = 1,
                Json = 2,
                TextXML = 3
            }
            public enum Contract
            {
                OneWay = 1,
                Queue = 2,
                Rest = 3,
                TwoWay = 4,
                Topic = 5,
                QueuePersistent = 6,
                EventHub = 7,
                Webhook = 8,
                EventGrid = 9
            }
            public enum ConnectionMode
            {
                Normal = 1,
                Federated = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("serviceplan")]
    public class ServicePlan : Entity
    {
        public const string EntityLogicalName = "serviceplan";
        public ServicePlan() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("serviceplanid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["serviceplanid"] = value;
            }
        }

        public readonly string MoreInfoUrl = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? ServicePlanId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue AccessMode = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string DisplayName = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum AccessMode
            {
                CustomApplications = 0,
                FirstPartyApplications = 1,
                FirstPartyAndCustomApplications = 2,
                NoRestrictionsForLegacyLicenseOnlyOverrides012 = 3,
                RestrictedToISVApplicationsAndWillOverrideAllOtherAccessModesIncludingAccessMode3 = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("serviceplanappmodules")]
    public class ServicePlanAppModules : Entity
    {
        public const string EntityLogicalName = "serviceplanappmodules";
        public ServicePlanAppModules() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("serviceplanappmodulesid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["serviceplanappmodulesid"] = value;
            }
        }

        public readonly Guid? ServicePlanId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? ServicePlanAppModulesId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly Guid? AppModuleId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("settingdefinition")]
    public class SettingDefinition : OrganizationEntity
    {
        public const string EntityLogicalName = "settingdefinition";
        public SettingDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("settingdefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["settingdefinitionid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? SettingDefinitionId = null;

        public readonly string Description = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string DisplayName = null;

        public readonly bool? IsHidden = null;

        public readonly OptionSetValue ReleaseLevel = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly string DefaultValue = null;

        public readonly OptionSetValue OverridableLevel = null;

        public readonly OptionSetValue DataType = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsOverridable = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string UniqueName = null;

        public readonly bool? IsPreview = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ReleaseLevel
            {
                GA = 0,
                EarlyAccess = 1,
                Preview = 2
            }
            public enum OverridableLevel
            {
                AppAndOrganization = 0,
                OrganizationOnly = 1,
                AppOnly = 2
            }
            public enum DataType
            {
                Number = 0,
                String = 1,
                Boolean = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharedobjectsforread")]
    public class SharedObjectsForRead : Entity
    {
        public const string EntityLogicalName = "sharedobjectsforread";
        public SharedObjectsForRead() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharedobjectsforreadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharedobjectsforreadid"] = value;
            }
        }

        public readonly Guid? SharedObjectsForReadId = null;

        public readonly string UserIds = null;

        public readonly Guid? ObjectId = null;

        public readonly int? VersionNumber = null;

        public readonly int? ObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharepointdata")]
    public class SharePointData : Entity
    {
        public const string EntityLogicalName = "sharepointdata";
        public SharePointData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdataid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? SharePointDataId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string RegardingObjectId = null;

        public readonly EntityReference UserId = null;

        public readonly string Data = null;

        public readonly EntityReference Location = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? PageNumber = null;

        public readonly bool? IsValid = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string NextPageToken = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string PreviousPageToken = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharepointdocument")]
    public class SharePointDocument : Entity
    {
        public const string EntityLogicalName = "sharepointdocument";
        public SharePointDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdocumentid"] = value;
            }
        }

        public readonly int? ChildItemCount = null;

        public readonly int? DocumentId = null;

        public readonly string IconClassName = null;

        public readonly string Author = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Title = null;

        public readonly Guid? SharePointDocumentId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? ContentTypeId = null;

        public readonly int? FileSize = null;

        public readonly string SharePointModifiedBy = null;

        public readonly string ContentType = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue ServiceType = null;

        public readonly string FileType = null;

        public readonly bool? IsRecursiveFetch = null;

        public readonly OptionSetValue DocumentLocationType = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly string AbsoluteUrl = null;

        public readonly string LocationName = null;

        public readonly string ReadUrl = null;

        public readonly EntityReference OwningUser = null;

        public readonly string RelativeLocation = null;

        public readonly string EditUrl = null;

        public readonly string Edit = null;

        public readonly string CopySource = null;

        public readonly bool? IsFolder = null;

        public readonly DateTime? SharePointCreatedOn = null;

        public readonly string LocationId = null;

        public readonly EntityReference OwnerId = null;

        public readonly string AppCreatedBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FullName = null;

        public readonly string CheckedOutTo = null;

        public readonly int? ChildFolderCount = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string Version = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string CheckInComment = null;

        public readonly DateTime? Modified = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string AppModifiedBy = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly bool? IsCheckedOut = null;

        public new static class Options
        {
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2,
                MSTeams = 3
            }
            public enum DocumentLocationType
            {
                General = 0,
                DedicatedForOneNoteIntegration = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharepointdocumentlocation")]
    public class SharePointDocumentLocation : Entity
    {
        public const string EntityLogicalName = "sharepointdocumentlocation";
        public SharePointDocumentLocation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdocumentlocationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdocumentlocationid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly string Description = null;

        public readonly Guid? SharePointDocumentLocationId = null;

        public readonly Guid? UserId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string AbsoluteURL = null;

        public readonly OptionSetValue ServiceType = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference ParentSiteOrLocation = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string RelativeUrl = null;

        public readonly OptionSetValue LocationType = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Guid? SiteCollectionId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2,
                MSTeams = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum LocationType
            {
                General = 0,
                DedicatedForOneNoteIntegration = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharepointsite")]
    public class SharePointSite : Entity
    {
        public const string EntityLogicalName = "sharepointsite";
        public SharePointSite() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointsiteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointsiteid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly OptionSetValue ValidationStatus = null;

        public readonly string Description = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsGridPresent = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string FolderStructureEntity = null;

        public readonly Guid? SiteCollectionId = null;

        public readonly OptionSetValue ServiceType = null;

        public readonly Guid? SharePointSiteId = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly Guid? UserId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference ParentSite = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string AbsoluteURL = null;

        public readonly string RelativeUrl = null;

        public readonly bool? IsPowerBISite = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue ValidationStatusErrorCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? LastValidated = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ValidationStatus
            {
                NotValidated = 1,
                InProgress = 2,
                Invalid = 3,
                Valid = 4,
                CouldNotValidate = 5
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum FolderStructureEntity
            {
                None = 0,
                Account = 1,
                Contact = 2
            }
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2,
                MSTeams = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ValidationStatusErrorCode
            {
                ThisRecordSURLHasNotBeenValidated = 1,
                ThisRecordSURLIsValid = 2,
                ThisRecordSURLIsNotValid = 3,
                TheURLSchemesOfMicrosoftDynamics365AndSharePointAreDifferent = 4,
                TheURLCouldNotBeAccessedBecauseOfInternetExplorerSecuritySettings = 5,
                AuthenticationFailure = 6,
                InvalidCertificates = 7
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("similarityrule")]
    public class SimilarityRule : Entity
    {
        public const string EntityLogicalName = "similarityrule";
        public SimilarityRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("similarityruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["similarityruleid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly string BaseEntityName = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly int? NgramSize = null;

        public readonly string MatchingEntityName = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string FetchXmlList = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
        public readonly OptionSetValue statecode = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly OptionSetValue statuscode = null;

        public readonly int? VersionNumber = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string ActiveRuleFetchXML = null;

        public readonly bool? IsManaged = null;

        public readonly OptionSetValue BaseEntityTypeCode = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly int? MaxKeyWords = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly bool? ExcludeInactiveRecords = null;

        public readonly OptionSetValue MatchingEntityTypeCode = null;

        public readonly Guid? SimilarityRuleIdUnique = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? SimilarityRuleId = null;

        public readonly string RuleConditionXml = null;

        public new static class Options
        {
            public enum statecode
            {
                Draft = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Draft = 0,
                Active = 1
            }
            public enum BaseEntityTypeCode
            {
                QueueMemberCount = 2024,
                DocumentSuggestions = 1189,
                RecurrenceRule = 4250,
                Queue = 2020,
                QueueItem = 2029,
                QueueItemCount = 2023,
                RecurringAppointment = 4251,
                RelationshipRoleMap = 4501,
                ReplicationBacklog = 1140,
                Report = 9100,
                RelationshipEntity = 9813,
                RelationshipAttribute = 9814,
                RelationshipRole = 4500,
                QuarterlyFiscalCalendar = 2002,
                PrincipalSyncAttributeMap = 1404,
                Privilege = 1023,
                PrivilegeObjectTypeCode = 31,
                PostRegarding = 8002,
                PostRole = 8001,
                FieldSharing = 44,
                ProcessSession = 4710,
                ProvisionLanguageForUser = 10013,
                Publisher = 7101,
                PublisherAddress = 7102,
                ProcessStage = 4724,
                ProcessStageParameter = 10035,
                ProcessTrigger = 4712,
                RollupProperties = 9510,
                RoutingRuleSet = 8181,
                RuleItem = 8199,
                RoleTemplate = 1037,
                RollupField = 9604,
                RollupJob = 9511,
                RuntimeDependency = 7200,
                Fundraiser = 10138,
                Idea = 10142,
                Product = 10144,
                Challenge = 10140,
                ChallengeManagementProcess = 10141,
                Donation = 10137,
                SecurityRole = 1036,
                ReportVisibility = 9103,
                RevokeInheritedAccessRecordsTracker = 90001,
                RibbonClientMetadata = 4579,
                ReportRelatedCategory = 9102,
                ReportRelatedEntity = 9101,
                ReportLink = 9104,
                RibbonCommand = 1116,
                RibbonMetadataToProcess = 9880,
                RibbonRule = 1117,
                RibbonTabToCommandMapping = 1113,
                RibbonContextGroup = 1115,
                ApplicationRibbons = 1120,
                RibbonDifference = 1130,
                NavigationSetting = 9900,
                Autonumber = 10105,
                IdeaToProjectBusinessProcess = 10139,
                BotContent = 10040,
                MultiEntitySearch = 9910,
                MultiSelectOptionValue = 9912,
                CustomOrder = 10103,
                Notification = 4110,
                OfficeDocument = 4490,
                OfficeGraphDocument = 9950,
                CustomOrderDetails = 10152,
                CustomOrderSummary = 10154,
                NewProcess = 950,
                Tour = 10039,
                RichTextAttachment = 10078,
                ServiceConfiguration = 10051,
                SLAKPI = 10052,
                OnlineShopperIntention = 10151,
                PMInferredTask = 10093,
                PMRecording = 10094,
                SolutionComponentDataSource = 10012,
                SolutionHealthRuleSet = 10101,
                SolutionHistory = 10003,
                SolutionHistoryDataSource = 10004,
                SolutionComponentSummary = 10011,
                SolutionHealthRule = 10099,
                SolutionHealthRuleArgument = 10100,
                ListValueMapping = 4418,
                PlugInAssembly = 4605,
                PlugInTraceLog = 4619,
                PDFSetting = 10049,
                PersonalDocumentTemplate = 9941,
                PhoneCall = 4210,
                PlugInType = 4602,
                Comment = 8005,
                Follow = 8003,
                Like = 8006,
                PlugInTypeStatistic = 4603,
                Position = 50,
                Post = 8000,
                PartnerApplication = 1095,
                OrganizationDataSyncSubscription = 10075,
                OrganizationDataSyncSubscriptionEntity = 10076,
                OrganizationSetting = 10029,
                OfflineCommandDefinition = 9870,
                OptionSet = 9809,
                Organization = 1019,
                OrganizationStatistic = 4708,
                Owner = 7,
                OwnerMapping = 4420,
                Package = 10007,
                OrganizationUI = 1021,
                OrganizationInsightsMetric = 9699,
                OrganizationInsightsNotification = 9690,
                Territory = 2013,
                TextAnalyticsEntityMapping = 9945,
                Theme = 2015,
                TeamSyncAttributeMappingProfiles = 1403,
                TeamTemplate = 92,
                EmailTemplate = 2010,
                TimeStampDateMapping = 9932,
                TraceAssociation = 8051,
                Trace = 8050,
                TraceRegarding = 8052,
                TimeZoneDefinition = 4810,
                TimeZoneLocalizedName = 4812,
                TimeZoneRule = 4811,
                TeamProfiles = 1203,
                SystemApplicationMetadata = 7000,
                SystemForm = 1030,
                User = 8,
                SyncAttributeMapping = 1401,
                SyncAttributeMappingProfile = 1400,
                SyncError = 9869,
                SystemUserAuthorizationChangeTracker = 60,
                Task = 4212,
                Team = 9,
                TeamMobileOfflineProfileMembership = 10073,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserManagerMap = 51,
                SystemUserPrincipal = 14,
                VirtualEntityMetadata = 10072,
                WebResource = 9333,
                WebWizard = 4800,
                UserChart = 1112,
                UserSearchFacet = 52,
                UserSettings = 150,
                WebWizardAccessPrivilege = 4803,
                ProcessDependency = 4704,
                ProcessLog = 4706,
                WorkflowWaitSubscription = 4702,
                WizardPage = 4802,
                Process = 4703,
                WorkflowBinary = 10036,
                SavedView = 4230,
                TranslationProcess = 951,
                UnresolvedAddress = 2012,
                UntrackedEmail = 4220,
                Currency = 9105,
                TransformationMapping = 4426,
                TransformationParameterMapping = 4427,
                UserApplicationMetadata = 7001,
                UserDashboard = 1031,
                UserMapping = 2016,
                UserMobileOfflineProfileMembership = 10074,
                UserEntityInstanceData = 2501,
                UserEntityUISettings = 2500,
                UserFiscalCalendar = 1086,
                SemiannualFiscalCalendar = 2001,
                ServiceEndpoint = 4618,
                ServicePlan = 101,
                SdkMessageResponse = 4610,
                SdkMessageResponseField = 4611,
                SearchTelemetry = 10080,
                SettingDefinition = 10030,
                SharePointSite = 9502,
                SimilarityRule = 9951,
                SiteMap = 4709,
                SharePointData = 9509,
                SharepointDocument = 9507,
                DocumentLocation = 9508,
                SdkMessageRequestField = 4614,
                SavedOrganizationInsightsConfiguration = 1309,
                View = 1039,
                SystemChart = 1111,
                Reservation = 10147,
                Review = 10148,
                TeamProject = 10143,
                SdkMessage = 4606,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequest = 4609,
                SdkMessageFilter = 4607,
                SdkMessagePair = 4613,
                SdkMessageProcessingStep = 4608,
                Subscription = 29,
                SubscriptionClients = 1072,
                SubscriptionManuallyTrackedObject = 37,
                StatusMap = 1075,
                StringMap = 1043,
                Subject = 129,
                SubscriptionStatisticOffline = 45,
                SubscriptionSynchronizationInformation = 33,
                TrackingInformationForDeletedEntities = 35,
                SuggestionCardTemplate = 1190,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionSyncEntryOutlook = 48,
                StageSolutionUpload = 10009,
                SocialActivity = 4216,
                SocialInsightsConfiguration = 1300,
                SocialProfile = 99,
                SLA = 9750,
                SLAItem = 9751,
                SLAKPIInstance = 9752,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                SolutionComponentRelationshipConfiguration = 10002,
                SolutionHistoryData = 9890,
                SolutionComponent = 7103,
                SolutionComponentAttributeConfiguration = 10000,
                SolutionComponentConfiguration = 10001,
                Contact = 2,
                ConversationTranscript = 10041,
                RecordCreationAndUpdateRule = 9300,
                ConnectionRole = 3231,
                ConnectionRoleObjectTypeCode = 3233,
                Connector = 372,
                RecordCreationAndUpdateRuleItem = 9301,
                CustomControl = 9753,
                CustomControlDefaultConfig = 9755,
                CustomControlResource = 9754,
                CustomAPI = 10069,
                CustomAPIRequestParameter = 10070,
                CustomAPIResponseProperty = 10071,
                ConnectionReference = 10037,
                Category = 9959,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRule = 9400,
                CascadeGrantRevokeAccessVersionTracker = 10019,
                Catalog = 10066,
                CatalogAssignment = 10067,
                ChannelAccessProfileRuleItem = 9401,
                ColumnMapping = 4417,
                ProcessConfiguration = 9650,
                Connection = 3234,
                ChannelProperty = 1236,
                ChannelPropertyGroup = 1234,
                ClientUpdate = 36,
                DuplicateRuleCondition = 4416,
                Email = 4202,
                EmailHash = 4023,
                DocumentTemplate = 9940,
                DuplicateRecord = 4415,
                DuplicateDetectionRule = 4414,
                EmailSearch = 4299,
                EntityAnalyticsConfig = 430,
                VirtualEntityDataProvider = 78,
                VirtualEntityDataSource = 85,
                EmailServerProfile = 9605,
                EmailSignature = 9997,
                Entity = 9800,
                IndexedArticle = 126,
                DataLakeFolderPermission = 10015,
                DataLakeWorkspace = 10016,
                DataLakeWorkspacePermission = 10017,
                Address = 1071,
                CustomerRelationship = 4502,
                DataLakeFolder = 10014,
                DataPerformanceDashboard = 4450,
                DependencyNode = 7106,
                DisplayString = 4102,
                DisplayStringMap = 4101,
                DelveActionHub = 9961,
                Dependency = 7105,
                DependencyFeature = 7108,
                ApplicationUser = 10021,
                ModelDrivenApp = 9006,
                AppModuleComponent = 9007,
                AppConfigMaster = 9011,
                ModelDrivenAppElement = 10024,
                ApplicationFile = 4707,
                ModelDrivenAppComponentNodeSEdge = 10025,
                AppModuleMetadataAsyncOperation = 8702,
                AppModuleRoles = 9009,
                Notification1 = 10077,
                ModelDrivenAppComponentNode = 10026,
                AppModuleMetadata = 8700,
                AppModuleMetadataDependency = 8701,
                AppConfigurationInstance = 9013,
                ActionCardUserSettings = 9973,
                ActionCardUserState = 9968,
                ActivityFileAttachment = 10050,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCard = 9962,
                Attachment = 1001,
                Note = 5,
                AnnualFiscalCalendar = 2000,
                AppConfiguration = 9012,
                ActivityParty = 135,
                Activity = 4200,
                AdvancedSimilarityRule = 9949,
                BusinessUnit = 10,
                BusinessUnitMap = 6,
                Announcement = 132,
                BulkDeleteOperation = 4424,
                BusinessDataLocalizedLabel = 4232,
                BusinessProcessFlowInstance = 4725,
                Calendar = 4003,
                CanvasAppExtendedMetadata = 10031,
                ActionCardType = 9983,
                CascadeGrantRevokeAccessRecordsTracker = 10018,
                CalendarRule = 4004,
                CallbackRegistration = 301,
                CanvasApp = 300,
                BulkDeleteFailure = 4425,
                SystemJob = 4700,
                Attachment1 = 1002,
                Attribute = 9808,
                Appointment = 4201,
                ModelDrivenAppSetting = 10027,
                ModelDrivenAppUserSetting = 10028,
                ImageAttributeConfiguration = 431,
                AzureServiceConnection = 9936,
                Chatbot = 10042,
                ChatbotSubcomponent = 10043,
                AttributeMap = 4601,
                Auditing = 4567,
                AuthorizationServer = 1094,
                AIBuilderDataset = 10081,
                AIBuilderDatasetFile = 10082,
                AIBuilderDatasetRecord = 10083,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfileItemAssociation = 9868,
                MonthlyFiscalCalendar = 2003,
                AIBuilderDatasetsContainer = 10084,
                AIFormProcessingDocument = 10087,
                AIModel = 401,
                AIObjectDetectionImage = 10088,
                AIBuilderFile = 10085,
                AIBuilderFileAttachedData = 10086,
                AIConfiguration = 402,
                MobileOfflineProfile = 9866,
                LookupMapping = 4419,
                Mailbox = 9606,
                MailboxStatistics = 9607,
                Letter = 4207,
                License = 2027,
                LocalConfigStore = 9201,
                MailboxTrackingCategory = 9609,
                ManagedProperty = 9812,
                MetadataDifference = 4231,
                GoalMetric = 9603,
                MailboxAutoTrackingFolder = 9608,
                MailMergeTemplate = 9106,
                ManagedIdentity = 10065,
                KnowledgePersonalization = 10060,
                KnowledgeArticleImage = 10056,
                KnowledgeArticleTemplate = 10061,
                HelpPage = 10038,
                KnowledgeArticleLanguageSetting = 10059,
                SearchProvider = 10055,
                KnowledgeInteractionInsight = 10057,
                NonRelationalDataSource = 10079,
                ObjectDetectionProduct = 10150,
                ODataV4DataSource = 10032,
                KnowledgeSearchPersonalFilterConfig = 10062,
                KnowledgeSearchFilter = 10063,
                KnowledgeSearchInsight = 10058,
                HealthcareFeedback = 10149,
                AITemplate = 400,
                AnalysisComponent = 10095,
                AnalysisJob = 10096,
                AIObjectDetectionLabel = 10089,
                AIObjectDetectionBoundingBox = 10090,
                AIObjectDetectionImageMapping = 10091,
                AnalysisResult = 10097,
                Dataflow = 418,
                KnowledgeFederatedArticle = 10053,
                KnowledgeFederatedArticleIncident = 10054,
                AnalysisResultDetail = 10098,
                ComponentLayer = 10005,
                ComponentLayerDataSource = 10006,
                FilterTemplate = 30,
                FixedMonthlyFiscalCalendar = 2004,
                FlowMachine = 10033,
                FieldPermission = 1201,
                FieldSecurityProfile = 1200,
                FileAttachment = 55,
                FlowMachineGroup = 10034,
                RollupQuery = 9602,
                HierarchyRule = 8840,
                HierarchySecurityConfiguration = 9919,
                FlowSession = 4720,
                GlobalSearchConfiguration = 54,
                Goal = 9600,
                Feedback = 9958,
                EntityRelationship = 9811,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                EntityImageConfiguration = 432,
                EntityKey = 9810,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                ExternalParty = 3008,
                ExternalPartyItem = 9987,
                Fax = 4204,
                ExpanderEvent = 4711,
                ExpiredProcess = 955,
                ExportSolutionUpload = 10010,
                ArticleComment = 1082,
                ArticleTemplate = 1016,
                KeyVaultReference = 10064,
                InvalidDependency = 7107,
                ISVConfig = 4705,
                Article = 127,
                KnowledgeArticle = 9953,
                KnowledgeSearchModel = 9947,
                Language = 9957,
                LanguageProvisioningState = 9875,
                KnowledgeArticleCategory = 9960,
                KnowledgeArticleViews = 9955,
                KnowledgeBaseRecord = 9930,
                InterProcessLock = 4011,
                ImportData = 4413,
                ImportEntityMapping = 4428,
                ImportSourceFile = 4412,
                HolidayWrapper = 9996,
                ImageDescriptor = 1007,
                DataImport = 4410,
                ImportJob = 9107,
                InteractionForEmail = 9986,
                InternalAddress = 1003,
                InternalCatalogAssignment = 10068,
                ImportLog = 4423,
                DataMap = 4411,
                IntegrationStatus = 3000
            }
            public enum MatchingEntityTypeCode
            {
                QueueMemberCount = 2024,
                DocumentSuggestions = 1189,
                RecurrenceRule = 4250,
                Queue = 2020,
                QueueItem = 2029,
                QueueItemCount = 2023,
                RecurringAppointment = 4251,
                RelationshipRoleMap = 4501,
                ReplicationBacklog = 1140,
                Report = 9100,
                RelationshipEntity = 9813,
                RelationshipAttribute = 9814,
                RelationshipRole = 4500,
                QuarterlyFiscalCalendar = 2002,
                PrincipalSyncAttributeMap = 1404,
                Privilege = 1023,
                PrivilegeObjectTypeCode = 31,
                PostRegarding = 8002,
                PostRole = 8001,
                FieldSharing = 44,
                ProcessSession = 4710,
                ProvisionLanguageForUser = 10013,
                Publisher = 7101,
                PublisherAddress = 7102,
                ProcessStage = 4724,
                ProcessStageParameter = 10035,
                ProcessTrigger = 4712,
                RollupProperties = 9510,
                RoutingRuleSet = 8181,
                RuleItem = 8199,
                RoleTemplate = 1037,
                RollupField = 9604,
                RollupJob = 9511,
                RuntimeDependency = 7200,
                Fundraiser = 10138,
                Idea = 10142,
                Product = 10144,
                Challenge = 10140,
                ChallengeManagementProcess = 10141,
                Donation = 10137,
                SecurityRole = 1036,
                ReportVisibility = 9103,
                RevokeInheritedAccessRecordsTracker = 90001,
                RibbonClientMetadata = 4579,
                ReportRelatedCategory = 9102,
                ReportRelatedEntity = 9101,
                ReportLink = 9104,
                RibbonCommand = 1116,
                RibbonMetadataToProcess = 9880,
                RibbonRule = 1117,
                RibbonTabToCommandMapping = 1113,
                RibbonContextGroup = 1115,
                ApplicationRibbons = 1120,
                RibbonDifference = 1130,
                NavigationSetting = 9900,
                Autonumber = 10105,
                IdeaToProjectBusinessProcess = 10139,
                BotContent = 10040,
                MultiEntitySearch = 9910,
                MultiSelectOptionValue = 9912,
                CustomOrder = 10103,
                Notification = 4110,
                OfficeDocument = 4490,
                OfficeGraphDocument = 9950,
                CustomOrderDetails = 10152,
                CustomOrderSummary = 10154,
                NewProcess = 950,
                Tour = 10039,
                RichTextAttachment = 10078,
                ServiceConfiguration = 10051,
                SLAKPI = 10052,
                OnlineShopperIntention = 10151,
                PMInferredTask = 10093,
                PMRecording = 10094,
                SolutionComponentDataSource = 10012,
                SolutionHealthRuleSet = 10101,
                SolutionHistory = 10003,
                SolutionHistoryDataSource = 10004,
                SolutionComponentSummary = 10011,
                SolutionHealthRule = 10099,
                SolutionHealthRuleArgument = 10100,
                ListValueMapping = 4418,
                PlugInAssembly = 4605,
                PlugInTraceLog = 4619,
                PDFSetting = 10049,
                PersonalDocumentTemplate = 9941,
                PhoneCall = 4210,
                PlugInType = 4602,
                Comment = 8005,
                Follow = 8003,
                Like = 8006,
                PlugInTypeStatistic = 4603,
                Position = 50,
                Post = 8000,
                PartnerApplication = 1095,
                OrganizationDataSyncSubscription = 10075,
                OrganizationDataSyncSubscriptionEntity = 10076,
                OrganizationSetting = 10029,
                OfflineCommandDefinition = 9870,
                OptionSet = 9809,
                Organization = 1019,
                OrganizationStatistic = 4708,
                Owner = 7,
                OwnerMapping = 4420,
                Package = 10007,
                OrganizationUI = 1021,
                OrganizationInsightsMetric = 9699,
                OrganizationInsightsNotification = 9690,
                Territory = 2013,
                TextAnalyticsEntityMapping = 9945,
                Theme = 2015,
                TeamSyncAttributeMappingProfiles = 1403,
                TeamTemplate = 92,
                EmailTemplate = 2010,
                TimeStampDateMapping = 9932,
                TraceAssociation = 8051,
                Trace = 8050,
                TraceRegarding = 8052,
                TimeZoneDefinition = 4810,
                TimeZoneLocalizedName = 4812,
                TimeZoneRule = 4811,
                TeamProfiles = 1203,
                SystemApplicationMetadata = 7000,
                SystemForm = 1030,
                User = 8,
                SyncAttributeMapping = 1401,
                SyncAttributeMappingProfile = 1400,
                SyncError = 9869,
                SystemUserAuthorizationChangeTracker = 60,
                Task = 4212,
                Team = 9,
                TeamMobileOfflineProfileMembership = 10073,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserManagerMap = 51,
                SystemUserPrincipal = 14,
                VirtualEntityMetadata = 10072,
                WebResource = 9333,
                WebWizard = 4800,
                UserChart = 1112,
                UserSearchFacet = 52,
                UserSettings = 150,
                WebWizardAccessPrivilege = 4803,
                ProcessDependency = 4704,
                ProcessLog = 4706,
                WorkflowWaitSubscription = 4702,
                WizardPage = 4802,
                Process = 4703,
                WorkflowBinary = 10036,
                SavedView = 4230,
                TranslationProcess = 951,
                UnresolvedAddress = 2012,
                UntrackedEmail = 4220,
                Currency = 9105,
                TransformationMapping = 4426,
                TransformationParameterMapping = 4427,
                UserApplicationMetadata = 7001,
                UserDashboard = 1031,
                UserMapping = 2016,
                UserMobileOfflineProfileMembership = 10074,
                UserEntityInstanceData = 2501,
                UserEntityUISettings = 2500,
                UserFiscalCalendar = 1086,
                SemiannualFiscalCalendar = 2001,
                ServiceEndpoint = 4618,
                ServicePlan = 101,
                SdkMessageResponse = 4610,
                SdkMessageResponseField = 4611,
                SearchTelemetry = 10080,
                SettingDefinition = 10030,
                SharePointSite = 9502,
                SimilarityRule = 9951,
                SiteMap = 4709,
                SharePointData = 9509,
                SharepointDocument = 9507,
                DocumentLocation = 9508,
                SdkMessageRequestField = 4614,
                SavedOrganizationInsightsConfiguration = 1309,
                View = 1039,
                SystemChart = 1111,
                Reservation = 10147,
                Review = 10148,
                TeamProject = 10143,
                SdkMessage = 4606,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequest = 4609,
                SdkMessageFilter = 4607,
                SdkMessagePair = 4613,
                SdkMessageProcessingStep = 4608,
                Subscription = 29,
                SubscriptionClients = 1072,
                SubscriptionManuallyTrackedObject = 37,
                StatusMap = 1075,
                StringMap = 1043,
                Subject = 129,
                SubscriptionStatisticOffline = 45,
                SubscriptionSynchronizationInformation = 33,
                TrackingInformationForDeletedEntities = 35,
                SuggestionCardTemplate = 1190,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionSyncEntryOutlook = 48,
                StageSolutionUpload = 10009,
                SocialActivity = 4216,
                SocialInsightsConfiguration = 1300,
                SocialProfile = 99,
                SLA = 9750,
                SLAItem = 9751,
                SLAKPIInstance = 9752,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                SolutionComponentRelationshipConfiguration = 10002,
                SolutionHistoryData = 9890,
                SolutionComponent = 7103,
                SolutionComponentAttributeConfiguration = 10000,
                SolutionComponentConfiguration = 10001,
                Contact = 2,
                ConversationTranscript = 10041,
                RecordCreationAndUpdateRule = 9300,
                ConnectionRole = 3231,
                ConnectionRoleObjectTypeCode = 3233,
                Connector = 372,
                RecordCreationAndUpdateRuleItem = 9301,
                CustomControl = 9753,
                CustomControlDefaultConfig = 9755,
                CustomControlResource = 9754,
                CustomAPI = 10069,
                CustomAPIRequestParameter = 10070,
                CustomAPIResponseProperty = 10071,
                ConnectionReference = 10037,
                Category = 9959,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRule = 9400,
                CascadeGrantRevokeAccessVersionTracker = 10019,
                Catalog = 10066,
                CatalogAssignment = 10067,
                ChannelAccessProfileRuleItem = 9401,
                ColumnMapping = 4417,
                ProcessConfiguration = 9650,
                Connection = 3234,
                ChannelProperty = 1236,
                ChannelPropertyGroup = 1234,
                ClientUpdate = 36,
                DuplicateRuleCondition = 4416,
                Email = 4202,
                EmailHash = 4023,
                DocumentTemplate = 9940,
                DuplicateRecord = 4415,
                DuplicateDetectionRule = 4414,
                EmailSearch = 4299,
                EntityAnalyticsConfig = 430,
                VirtualEntityDataProvider = 78,
                VirtualEntityDataSource = 85,
                EmailServerProfile = 9605,
                EmailSignature = 9997,
                Entity = 9800,
                IndexedArticle = 126,
                DataLakeFolderPermission = 10015,
                DataLakeWorkspace = 10016,
                DataLakeWorkspacePermission = 10017,
                Address = 1071,
                CustomerRelationship = 4502,
                DataLakeFolder = 10014,
                DataPerformanceDashboard = 4450,
                DependencyNode = 7106,
                DisplayString = 4102,
                DisplayStringMap = 4101,
                DelveActionHub = 9961,
                Dependency = 7105,
                DependencyFeature = 7108,
                ApplicationUser = 10021,
                ModelDrivenApp = 9006,
                AppModuleComponent = 9007,
                AppConfigMaster = 9011,
                ModelDrivenAppElement = 10024,
                ApplicationFile = 4707,
                ModelDrivenAppComponentNodeSEdge = 10025,
                AppModuleMetadataAsyncOperation = 8702,
                AppModuleRoles = 9009,
                Notification1 = 10077,
                ModelDrivenAppComponentNode = 10026,
                AppModuleMetadata = 8700,
                AppModuleMetadataDependency = 8701,
                AppConfigurationInstance = 9013,
                ActionCardUserSettings = 9973,
                ActionCardUserState = 9968,
                ActivityFileAttachment = 10050,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCard = 9962,
                Attachment = 1001,
                Note = 5,
                AnnualFiscalCalendar = 2000,
                AppConfiguration = 9012,
                ActivityParty = 135,
                Activity = 4200,
                AdvancedSimilarityRule = 9949,
                BusinessUnit = 10,
                BusinessUnitMap = 6,
                Announcement = 132,
                BulkDeleteOperation = 4424,
                BusinessDataLocalizedLabel = 4232,
                BusinessProcessFlowInstance = 4725,
                Calendar = 4003,
                CanvasAppExtendedMetadata = 10031,
                ActionCardType = 9983,
                CascadeGrantRevokeAccessRecordsTracker = 10018,
                CalendarRule = 4004,
                CallbackRegistration = 301,
                CanvasApp = 300,
                BulkDeleteFailure = 4425,
                SystemJob = 4700,
                Attachment1 = 1002,
                Attribute = 9808,
                Appointment = 4201,
                ModelDrivenAppSetting = 10027,
                ModelDrivenAppUserSetting = 10028,
                ImageAttributeConfiguration = 431,
                AzureServiceConnection = 9936,
                Chatbot = 10042,
                ChatbotSubcomponent = 10043,
                AttributeMap = 4601,
                Auditing = 4567,
                AuthorizationServer = 1094,
                AIBuilderDataset = 10081,
                AIBuilderDatasetFile = 10082,
                AIBuilderDatasetRecord = 10083,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfileItemAssociation = 9868,
                MonthlyFiscalCalendar = 2003,
                AIBuilderDatasetsContainer = 10084,
                AIFormProcessingDocument = 10087,
                AIModel = 401,
                AIObjectDetectionImage = 10088,
                AIBuilderFile = 10085,
                AIBuilderFileAttachedData = 10086,
                AIConfiguration = 402,
                MobileOfflineProfile = 9866,
                LookupMapping = 4419,
                Mailbox = 9606,
                MailboxStatistics = 9607,
                Letter = 4207,
                License = 2027,
                LocalConfigStore = 9201,
                MailboxTrackingCategory = 9609,
                ManagedProperty = 9812,
                MetadataDifference = 4231,
                GoalMetric = 9603,
                MailboxAutoTrackingFolder = 9608,
                MailMergeTemplate = 9106,
                ManagedIdentity = 10065,
                KnowledgePersonalization = 10060,
                KnowledgeArticleImage = 10056,
                KnowledgeArticleTemplate = 10061,
                HelpPage = 10038,
                KnowledgeArticleLanguageSetting = 10059,
                SearchProvider = 10055,
                KnowledgeInteractionInsight = 10057,
                NonRelationalDataSource = 10079,
                ObjectDetectionProduct = 10150,
                ODataV4DataSource = 10032,
                KnowledgeSearchPersonalFilterConfig = 10062,
                KnowledgeSearchFilter = 10063,
                KnowledgeSearchInsight = 10058,
                HealthcareFeedback = 10149,
                AITemplate = 400,
                AnalysisComponent = 10095,
                AnalysisJob = 10096,
                AIObjectDetectionLabel = 10089,
                AIObjectDetectionBoundingBox = 10090,
                AIObjectDetectionImageMapping = 10091,
                AnalysisResult = 10097,
                Dataflow = 418,
                KnowledgeFederatedArticle = 10053,
                KnowledgeFederatedArticleIncident = 10054,
                AnalysisResultDetail = 10098,
                ComponentLayer = 10005,
                ComponentLayerDataSource = 10006,
                FilterTemplate = 30,
                FixedMonthlyFiscalCalendar = 2004,
                FlowMachine = 10033,
                FieldPermission = 1201,
                FieldSecurityProfile = 1200,
                FileAttachment = 55,
                FlowMachineGroup = 10034,
                RollupQuery = 9602,
                HierarchyRule = 8840,
                HierarchySecurityConfiguration = 9919,
                FlowSession = 4720,
                GlobalSearchConfiguration = 54,
                Goal = 9600,
                Feedback = 9958,
                EntityRelationship = 9811,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                EntityImageConfiguration = 432,
                EntityKey = 9810,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                ExternalParty = 3008,
                ExternalPartyItem = 9987,
                Fax = 4204,
                ExpanderEvent = 4711,
                ExpiredProcess = 955,
                ExportSolutionUpload = 10010,
                ArticleComment = 1082,
                ArticleTemplate = 1016,
                KeyVaultReference = 10064,
                InvalidDependency = 7107,
                ISVConfig = 4705,
                Article = 127,
                KnowledgeArticle = 9953,
                KnowledgeSearchModel = 9947,
                Language = 9957,
                LanguageProvisioningState = 9875,
                KnowledgeArticleCategory = 9960,
                KnowledgeArticleViews = 9955,
                KnowledgeBaseRecord = 9930,
                InterProcessLock = 4011,
                ImportData = 4413,
                ImportEntityMapping = 4428,
                ImportSourceFile = 4412,
                HolidayWrapper = 9996,
                ImageDescriptor = 1007,
                DataImport = 4410,
                ImportJob = 9107,
                InteractionForEmail = 9986,
                InternalAddress = 1003,
                InternalCatalogAssignment = 10068,
                ImportLog = 4423,
                DataMap = 4411,
                IntegrationStatus = 3000
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sitemap")]
    public class SiteMap : Entity
    {
        public const string EntityLogicalName = "sitemap";
        public SiteMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sitemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sitemapid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string SiteMapXml = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? SiteMapIdUnique = null;

        public readonly string SiteMapNameUnique = null;

        public readonly int? VersionNumber = null;

        public readonly bool? IsAppAware = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? SiteMapId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string SiteMapXmlManaged = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string SiteMapName = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sla")]
    public class SLA : Entity
    {
        public const string EntityLogicalName = "sla";
        public SLA() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slaid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slaid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Description = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Guid? SLAId = null;

        public readonly OptionSetValue SLAType = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference OwningTeam = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly bool? AllowPauseResume = null;

        public readonly EntityReference OwnerId = null;

        public readonly Guid? SLAIdUnique = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference BusinessHoursId = null;

        public readonly decimal? ExchangeRate = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue ApplicableFromPickList = null;

        public readonly DateTime? CreatedOn = null;

        public readonly OptionSetValue slaversion = null;

        public readonly string ChangedAttributeList = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference WorkflowId = null;

        public readonly int? PrimaryEntityOTC = null;

        public readonly string ApplicableFrom = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly OptionSetValue ObjectTypeCode = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }
            public enum SLAType
            {
                Standard = 0,
                Enhanced = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum ApplicableFromPickList
            {
                No = 1,
                Yes = 2
            }
            public enum slaversion
            {
                VersionWC = 100000000,
                VersionUC = 100000001
            }
            public enum ObjectTypeCode
            {
                QueueMemberCount = 2024,
                DocumentSuggestions = 1189,
                RecurrenceRule = 4250,
                Queue = 2020,
                QueueItem = 2029,
                QueueItemCount = 2023,
                RecurringAppointment = 4251,
                RelationshipRoleMap = 4501,
                ReplicationBacklog = 1140,
                Report = 9100,
                RelationshipEntity = 9813,
                RelationshipAttribute = 9814,
                RelationshipRole = 4500,
                QuarterlyFiscalCalendar = 2002,
                PrincipalSyncAttributeMap = 1404,
                Privilege = 1023,
                PrivilegeObjectTypeCode = 31,
                PostRegarding = 8002,
                PostRole = 8001,
                FieldSharing = 44,
                ProcessSession = 4710,
                ProvisionLanguageForUser = 10013,
                Publisher = 7101,
                PublisherAddress = 7102,
                ProcessStage = 4724,
                ProcessStageParameter = 10035,
                ProcessTrigger = 4712,
                RollupProperties = 9510,
                RoutingRuleSet = 8181,
                RuleItem = 8199,
                RoleTemplate = 1037,
                RollupField = 9604,
                RollupJob = 9511,
                RuntimeDependency = 7200,
                Fundraiser = 10138,
                Idea = 10142,
                Product = 10144,
                Challenge = 10140,
                ChallengeManagementProcess = 10141,
                Donation = 10137,
                SecurityRole = 1036,
                ReportVisibility = 9103,
                RevokeInheritedAccessRecordsTracker = 90001,
                RibbonClientMetadata = 4579,
                ReportRelatedCategory = 9102,
                ReportRelatedEntity = 9101,
                ReportLink = 9104,
                RibbonCommand = 1116,
                RibbonMetadataToProcess = 9880,
                RibbonRule = 1117,
                RibbonTabToCommandMapping = 1113,
                RibbonContextGroup = 1115,
                ApplicationRibbons = 1120,
                RibbonDifference = 1130,
                NavigationSetting = 9900,
                Autonumber = 10105,
                IdeaToProjectBusinessProcess = 10139,
                BotContent = 10040,
                MultiEntitySearch = 9910,
                MultiSelectOptionValue = 9912,
                CustomOrder = 10103,
                Notification = 4110,
                OfficeDocument = 4490,
                OfficeGraphDocument = 9950,
                CustomOrderDetails = 10152,
                CustomOrderSummary = 10154,
                NewProcess = 950,
                Tour = 10039,
                RichTextAttachment = 10078,
                ServiceConfiguration = 10051,
                SLAKPI = 10052,
                OnlineShopperIntention = 10151,
                PMInferredTask = 10093,
                PMRecording = 10094,
                SolutionComponentDataSource = 10012,
                SolutionHealthRuleSet = 10101,
                SolutionHistory = 10003,
                SolutionHistoryDataSource = 10004,
                SolutionComponentSummary = 10011,
                SolutionHealthRule = 10099,
                SolutionHealthRuleArgument = 10100,
                ListValueMapping = 4418,
                PlugInAssembly = 4605,
                PlugInTraceLog = 4619,
                PDFSetting = 10049,
                PersonalDocumentTemplate = 9941,
                PhoneCall = 4210,
                PlugInType = 4602,
                Comment = 8005,
                Follow = 8003,
                Like = 8006,
                PlugInTypeStatistic = 4603,
                Position = 50,
                Post = 8000,
                PartnerApplication = 1095,
                OrganizationDataSyncSubscription = 10075,
                OrganizationDataSyncSubscriptionEntity = 10076,
                OrganizationSetting = 10029,
                OfflineCommandDefinition = 9870,
                OptionSet = 9809,
                Organization = 1019,
                OrganizationStatistic = 4708,
                Owner = 7,
                OwnerMapping = 4420,
                Package = 10007,
                OrganizationUI = 1021,
                OrganizationInsightsMetric = 9699,
                OrganizationInsightsNotification = 9690,
                Territory = 2013,
                TextAnalyticsEntityMapping = 9945,
                Theme = 2015,
                TeamSyncAttributeMappingProfiles = 1403,
                TeamTemplate = 92,
                EmailTemplate = 2010,
                TimeStampDateMapping = 9932,
                TraceAssociation = 8051,
                Trace = 8050,
                TraceRegarding = 8052,
                TimeZoneDefinition = 4810,
                TimeZoneLocalizedName = 4812,
                TimeZoneRule = 4811,
                TeamProfiles = 1203,
                SystemApplicationMetadata = 7000,
                SystemForm = 1030,
                User = 8,
                SyncAttributeMapping = 1401,
                SyncAttributeMappingProfile = 1400,
                SyncError = 9869,
                SystemUserAuthorizationChangeTracker = 60,
                Task = 4212,
                Team = 9,
                TeamMobileOfflineProfileMembership = 10073,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserManagerMap = 51,
                SystemUserPrincipal = 14,
                VirtualEntityMetadata = 10072,
                WebResource = 9333,
                WebWizard = 4800,
                UserChart = 1112,
                UserSearchFacet = 52,
                UserSettings = 150,
                WebWizardAccessPrivilege = 4803,
                ProcessDependency = 4704,
                ProcessLog = 4706,
                WorkflowWaitSubscription = 4702,
                WizardPage = 4802,
                Process = 4703,
                WorkflowBinary = 10036,
                SavedView = 4230,
                TranslationProcess = 951,
                UnresolvedAddress = 2012,
                UntrackedEmail = 4220,
                Currency = 9105,
                TransformationMapping = 4426,
                TransformationParameterMapping = 4427,
                UserApplicationMetadata = 7001,
                UserDashboard = 1031,
                UserMapping = 2016,
                UserMobileOfflineProfileMembership = 10074,
                UserEntityInstanceData = 2501,
                UserEntityUISettings = 2500,
                UserFiscalCalendar = 1086,
                SemiannualFiscalCalendar = 2001,
                ServiceEndpoint = 4618,
                ServicePlan = 101,
                SdkMessageResponse = 4610,
                SdkMessageResponseField = 4611,
                SearchTelemetry = 10080,
                SettingDefinition = 10030,
                SharePointSite = 9502,
                SimilarityRule = 9951,
                SiteMap = 4709,
                SharePointData = 9509,
                SharepointDocument = 9507,
                DocumentLocation = 9508,
                SdkMessageRequestField = 4614,
                SavedOrganizationInsightsConfiguration = 1309,
                View = 1039,
                SystemChart = 1111,
                Reservation = 10147,
                Review = 10148,
                TeamProject = 10143,
                SdkMessage = 4606,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequest = 4609,
                SdkMessageFilter = 4607,
                SdkMessagePair = 4613,
                SdkMessageProcessingStep = 4608,
                Subscription = 29,
                SubscriptionClients = 1072,
                SubscriptionManuallyTrackedObject = 37,
                StatusMap = 1075,
                StringMap = 1043,
                Subject = 129,
                SubscriptionStatisticOffline = 45,
                SubscriptionSynchronizationInformation = 33,
                TrackingInformationForDeletedEntities = 35,
                SuggestionCardTemplate = 1190,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionSyncEntryOutlook = 48,
                StageSolutionUpload = 10009,
                SocialActivity = 4216,
                SocialInsightsConfiguration = 1300,
                SocialProfile = 99,
                SLA = 9750,
                SLAItem = 9751,
                SLAKPIInstance = 9752,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                SolutionComponentRelationshipConfiguration = 10002,
                SolutionHistoryData = 9890,
                SolutionComponent = 7103,
                SolutionComponentAttributeConfiguration = 10000,
                SolutionComponentConfiguration = 10001,
                Contact = 2,
                ConversationTranscript = 10041,
                RecordCreationAndUpdateRule = 9300,
                ConnectionRole = 3231,
                ConnectionRoleObjectTypeCode = 3233,
                Connector = 372,
                RecordCreationAndUpdateRuleItem = 9301,
                CustomControl = 9753,
                CustomControlDefaultConfig = 9755,
                CustomControlResource = 9754,
                CustomAPI = 10069,
                CustomAPIRequestParameter = 10070,
                CustomAPIResponseProperty = 10071,
                ConnectionReference = 10037,
                Category = 9959,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRule = 9400,
                CascadeGrantRevokeAccessVersionTracker = 10019,
                Catalog = 10066,
                CatalogAssignment = 10067,
                ChannelAccessProfileRuleItem = 9401,
                ColumnMapping = 4417,
                ProcessConfiguration = 9650,
                Connection = 3234,
                ChannelProperty = 1236,
                ChannelPropertyGroup = 1234,
                ClientUpdate = 36,
                DuplicateRuleCondition = 4416,
                Email = 4202,
                EmailHash = 4023,
                DocumentTemplate = 9940,
                DuplicateRecord = 4415,
                DuplicateDetectionRule = 4414,
                EmailSearch = 4299,
                EntityAnalyticsConfig = 430,
                VirtualEntityDataProvider = 78,
                VirtualEntityDataSource = 85,
                EmailServerProfile = 9605,
                EmailSignature = 9997,
                Entity = 9800,
                IndexedArticle = 126,
                DataLakeFolderPermission = 10015,
                DataLakeWorkspace = 10016,
                DataLakeWorkspacePermission = 10017,
                Address = 1071,
                CustomerRelationship = 4502,
                DataLakeFolder = 10014,
                DataPerformanceDashboard = 4450,
                DependencyNode = 7106,
                DisplayString = 4102,
                DisplayStringMap = 4101,
                DelveActionHub = 9961,
                Dependency = 7105,
                DependencyFeature = 7108,
                ApplicationUser = 10021,
                ModelDrivenApp = 9006,
                AppModuleComponent = 9007,
                AppConfigMaster = 9011,
                ModelDrivenAppElement = 10024,
                ApplicationFile = 4707,
                ModelDrivenAppComponentNodeSEdge = 10025,
                AppModuleMetadataAsyncOperation = 8702,
                AppModuleRoles = 9009,
                Notification1 = 10077,
                ModelDrivenAppComponentNode = 10026,
                AppModuleMetadata = 8700,
                AppModuleMetadataDependency = 8701,
                AppConfigurationInstance = 9013,
                ActionCardUserSettings = 9973,
                ActionCardUserState = 9968,
                ActivityFileAttachment = 10050,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCard = 9962,
                Attachment = 1001,
                Note = 5,
                AnnualFiscalCalendar = 2000,
                AppConfiguration = 9012,
                ActivityParty = 135,
                Activity = 4200,
                AdvancedSimilarityRule = 9949,
                BusinessUnit = 10,
                BusinessUnitMap = 6,
                Announcement = 132,
                BulkDeleteOperation = 4424,
                BusinessDataLocalizedLabel = 4232,
                BusinessProcessFlowInstance = 4725,
                Calendar = 4003,
                CanvasAppExtendedMetadata = 10031,
                ActionCardType = 9983,
                CascadeGrantRevokeAccessRecordsTracker = 10018,
                CalendarRule = 4004,
                CallbackRegistration = 301,
                CanvasApp = 300,
                BulkDeleteFailure = 4425,
                SystemJob = 4700,
                Attachment1 = 1002,
                Attribute = 9808,
                Appointment = 4201,
                ModelDrivenAppSetting = 10027,
                ModelDrivenAppUserSetting = 10028,
                ImageAttributeConfiguration = 431,
                AzureServiceConnection = 9936,
                Chatbot = 10042,
                ChatbotSubcomponent = 10043,
                AttributeMap = 4601,
                Auditing = 4567,
                AuthorizationServer = 1094,
                AIBuilderDataset = 10081,
                AIBuilderDatasetFile = 10082,
                AIBuilderDatasetRecord = 10083,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfileItemAssociation = 9868,
                MonthlyFiscalCalendar = 2003,
                AIBuilderDatasetsContainer = 10084,
                AIFormProcessingDocument = 10087,
                AIModel = 401,
                AIObjectDetectionImage = 10088,
                AIBuilderFile = 10085,
                AIBuilderFileAttachedData = 10086,
                AIConfiguration = 402,
                MobileOfflineProfile = 9866,
                LookupMapping = 4419,
                Mailbox = 9606,
                MailboxStatistics = 9607,
                Letter = 4207,
                License = 2027,
                LocalConfigStore = 9201,
                MailboxTrackingCategory = 9609,
                ManagedProperty = 9812,
                MetadataDifference = 4231,
                GoalMetric = 9603,
                MailboxAutoTrackingFolder = 9608,
                MailMergeTemplate = 9106,
                ManagedIdentity = 10065,
                KnowledgePersonalization = 10060,
                KnowledgeArticleImage = 10056,
                KnowledgeArticleTemplate = 10061,
                HelpPage = 10038,
                KnowledgeArticleLanguageSetting = 10059,
                SearchProvider = 10055,
                KnowledgeInteractionInsight = 10057,
                NonRelationalDataSource = 10079,
                ObjectDetectionProduct = 10150,
                ODataV4DataSource = 10032,
                KnowledgeSearchPersonalFilterConfig = 10062,
                KnowledgeSearchFilter = 10063,
                KnowledgeSearchInsight = 10058,
                HealthcareFeedback = 10149,
                AITemplate = 400,
                AnalysisComponent = 10095,
                AnalysisJob = 10096,
                AIObjectDetectionLabel = 10089,
                AIObjectDetectionBoundingBox = 10090,
                AIObjectDetectionImageMapping = 10091,
                AnalysisResult = 10097,
                Dataflow = 418,
                KnowledgeFederatedArticle = 10053,
                KnowledgeFederatedArticleIncident = 10054,
                AnalysisResultDetail = 10098,
                ComponentLayer = 10005,
                ComponentLayerDataSource = 10006,
                FilterTemplate = 30,
                FixedMonthlyFiscalCalendar = 2004,
                FlowMachine = 10033,
                FieldPermission = 1201,
                FieldSecurityProfile = 1200,
                FileAttachment = 55,
                FlowMachineGroup = 10034,
                RollupQuery = 9602,
                HierarchyRule = 8840,
                HierarchySecurityConfiguration = 9919,
                FlowSession = 4720,
                GlobalSearchConfiguration = 54,
                Goal = 9600,
                Feedback = 9958,
                EntityRelationship = 9811,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                EntityImageConfiguration = 432,
                EntityKey = 9810,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                ExternalParty = 3008,
                ExternalPartyItem = 9987,
                Fax = 4204,
                ExpanderEvent = 4711,
                ExpiredProcess = 955,
                ExportSolutionUpload = 10010,
                ArticleComment = 1082,
                ArticleTemplate = 1016,
                KeyVaultReference = 10064,
                InvalidDependency = 7107,
                ISVConfig = 4705,
                Article = 127,
                KnowledgeArticle = 9953,
                KnowledgeSearchModel = 9947,
                Language = 9957,
                LanguageProvisioningState = 9875,
                KnowledgeArticleCategory = 9960,
                KnowledgeArticleViews = 9955,
                KnowledgeBaseRecord = 9930,
                InterProcessLock = 4011,
                ImportData = 4413,
                ImportEntityMapping = 4428,
                ImportSourceFile = 4412,
                HolidayWrapper = 9996,
                ImageDescriptor = 1007,
                DataImport = 4410,
                ImportJob = 9107,
                InteractionForEmail = 9986,
                InternalAddress = 1003,
                InternalCatalogAssignment = 10068,
                ImportLog = 4423,
                DataMap = 4411,
                IntegrationStatus = 3000
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("slaitem")]
    public class SLAItem : Entity
    {
        public const string EntityLogicalName = "slaitem";
        public SLAItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slaitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slaitemid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference msdyn_slakpiid = null;

        public readonly string msdyn_PauseConfigurationXml = null;

        public readonly string ApplicableWhenXml = null;

        public readonly string Description = null;

        public readonly EntityReference OwningUser = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference SLAId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? FailureAfter = null;

        public readonly bool? AllowPauseResume = null;

        public readonly int? SequenceNumber = null;

        public readonly Guid? SLAItemIdUnique = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string RelatedField = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly string SuccessConditionsXml = null;

        public readonly EntityReference BusinessHoursId = null;

        public readonly string ApplicableEntity = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly decimal? ExchangeRate = null;

        public readonly int? WarnAfter = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly string actionflowuniquename = null;

        public readonly string ActionURL = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string ChangedAttributeList = null;

        public readonly EntityReference WorkflowId = null;

        public readonly bool? msdyn_AdvancedPauseConfiguration = null;

        public readonly EntityReference OwnerId = null;

        public readonly Guid? SLAItemId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("slakpiinstance")]
    public class SLAKPIInstance : Entity
    {
        public const string EntityLogicalName = "slakpiinstance";
        public SLAKPIInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slakpiinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slakpiinstanceid"] = value;
            }
        }

        public readonly OptionSetValue Status = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string msdyn_prevslakpiinstanceid = null;

        public readonly EntityReference msdyn_slaitemid = null;

        public readonly EntityReference Regarding = null;

        public readonly DateTime? PausedOn = null;

        public readonly bool? TerminalStateReached = null;

        public readonly DateTime? SuccessCheckedAt = null;

        public readonly OptionSetValue WarningTimeReached = null;

        public readonly DateTime? ComputedWarningTime = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Guid? SLAKPIInstanceId = null;

        public readonly DateTime? ApplicableFromValue = null;

        public readonly DateTime? ComputedFailureTime = null;

        public readonly DateTime? WarningTime = null;

        public readonly string RegardingEntityID = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? LastResumeTime = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? ElapsedTime = null;

        public readonly OptionSetValue msdyn_ActionExecutionStatus = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? FailureTime = null;

        public readonly DateTime? TerminalStateTime = null;

        public readonly DateTime? SucceededOn = null;

        public readonly EntityReference OwnerId = null;

        public readonly string msdyn_calendarid = null;

        public new static class Options
        {
            public enum Status
            {
                InProgress = 0,
                Noncompliant = 1,
                NearingNoncompliance = 2,
                Paused = 3,
                Succeeded = 4,
                Canceled = 5
            }
            public enum WarningTimeReached
            {
                No = 0,
                Yes = 1
            }
            public enum msdyn_ActionExecutionStatus
            {
                None = 0,
                Warning = 1,
                Success = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("socialactivity")]
    public class SocialActivity : Entity
    {
        public const string EntityLogicalName = "socialactivity";
        public SocialActivity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityCollection From = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly Guid? ActivityId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string PostId = null;

        public readonly int? OnHoldTime = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly string InResponseTo = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly Guid? StageId = null;

        public readonly DateTime? ActualStart = null;

        public readonly bool? IsBilled = null;

        public readonly decimal? ExchangeRate = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string ActivityAdditionalParams = null;

        public readonly string ThreadId = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly EntityReference SLAId = null;

        public readonly OptionSetValue StateCode = null;

        public readonly DateTime? PostedOn = null;

        public readonly EntityReference PostAuthorAccount = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwningUser = null;

        public readonly OptionSetValue Community = null;

        public readonly EntityReference PostFromProfileId = null;

        public readonly bool? DirectionCode = null;

        public readonly string TraversedPath = null;

        public readonly string ActivityTypeCode = null;

        public readonly EntityCollection Resources = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly string PostURL = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly double? SentimentValue = null;

        public readonly string PostToProfileId = null;

        public readonly Guid? ProcessId = null;

        public readonly DateTime? SortDate = null;

        public readonly string Description = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string SocialAdditionalParams = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly OptionSetValue PostMessageType = null;

        public readonly EntityReference PostAuthor = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityCollection To = null;

        public readonly bool? IsRegularActivity = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? ActualDurationMinutes = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum PostMessageType
            {
                PublicMessage = 0,
                PrivateMessage = 1
            }
            public enum StatusCode
            {
                Completed = 1,
                Failed = 2,
                Processing = 3,
                Open = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("socialinsightsconfiguration")]
    public class SocialInsightsConfiguration : Entity
    {
        public const string EntityLogicalName = "socialinsightsconfiguration";
        public SocialInsightsConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("socialinsightsconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["socialinsightsconfigurationid"] = value;
            }
        }

        public readonly string ControlId = null;

        public readonly EntityReference FormId = null;

        public readonly string SocialDataParameters = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly string SocialDataItemId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly OptionSetValue SocialDataItemType = null;

        public readonly Guid? SocialInsightsConfigurationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum SocialDataItemType
            {
                SearchItem = 1,
                Class = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("socialprofile")]
    public class SocialProfile : Entity
    {
        public const string EntityLogicalName = "socialprofile";
        public SocialProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("socialprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["socialprofileid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string ProfileName = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly double? InfluenceScore = null;

        public readonly string ProfileFullName = null;

        public readonly OptionSetValue Community = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference CustomerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string ProfileLink = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? Blocked = null;

        public readonly string UniqueProfileID = null;

        public readonly Guid? SocialProfileId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solution")]
    public class Solution : Entity
    {
        public const string EntityLogicalName = "solution";
        public Solution() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutionid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? UpdatedOn = null;

        public readonly bool? IsVisible = null;

        public readonly bool? IsInternal = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FriendlyName = null;

        public readonly EntityReference ParentSolutionId = null;

        public readonly EntityReference PublisherId = null;

        public readonly EntityReference ConfigurationPageId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string SolutionPackageVersion = null;

        public readonly OptionSetValue SolutionType = null;

        public readonly string Thumbprint = null;

        public readonly string PinpointSolutionDefaultLocale = null;

        public readonly string PinpointAssetId = null;

        public readonly string Version = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsApiManaged = null;

        public readonly bool? IsManaged = null;

        public readonly string TemplateSuffix = null;

        public readonly Guid? SolutionId = null;

        public readonly string UniqueName = null;

        public readonly int? PinpointSolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? PinpointPublisherId = null;

        public readonly DateTime? InstalledOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Description = null;

        public readonly string UpgradeInfo = null;

        public new static class Options
        {
            public enum SolutionType
            {
                None = 0,
                Snapshot = 1,
                Internal = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutioncomponent")]
    public class SolutionComponent : Entity
    {
        public const string EntityLogicalName = "solutioncomponent";
        public SolutionComponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutioncomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutioncomponentid"] = value;
            }
        }

        public readonly Guid? SolutionComponentId = null;

        public readonly OptionSetValue RootComponentBehavior = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ObjectId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Guid? RootSolutionComponentId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference SolutionId = null;

        public readonly bool? IsMetadata = null;

        public readonly OptionSetValue ComponentType = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum RootComponentBehavior
            {
                IncludeSubcomponents = 0,
                DoNotIncludeSubcomponents = 1,
                IncludeAsShellOnly = 2
            }
            public enum ComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                EnvironmentVariableDefinition = 380,
                EnvironmentVariableValue = 381,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402,
                EntityAnalyticsConfiguration = 430,
                AttributeImageConfiguration = 431,
                EntityImageConfiguration = 432
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutioncomponentattributeconfiguration")]
    public class solutioncomponentattributeconfiguration : OrganizationEntity
    {
        public const string EntityLogicalName = "solutioncomponentattributeconfiguration";
        public solutioncomponentattributeconfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutioncomponentattributeconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutioncomponentattributeconfigurationid"] = value;
            }
        }

        public readonly OptionSetValue EncodingFormat = null;

        public readonly EntityReference AttributeId = null;

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly bool? IsExportDisabled = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? solutioncomponentattributeconfigurationId = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference SolutionComponentConfigurationId = null;

        public readonly string FileExtension = null;

        public readonly bool? IsExportedAsFile = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum EncodingFormat
            {
                None = 0,
                Base64 = 1,
                UTF8 = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutioncomponentconfiguration")]
    public class solutioncomponentconfiguration : OrganizationEntity
    {
        public const string EntityLogicalName = "solutioncomponentconfiguration";
        public solutioncomponentconfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutioncomponentconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutioncomponentconfigurationid"] = value;
            }
        }

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? solutioncomponentconfigurationId = null;

        public readonly OptionSetValue FileScope = null;

        public readonly bool? IsSoftDeleteEnabled = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference EntityId = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly OptionSetValue FileFormat = null;

        public readonly bool? KeepActiveCustomizationAfterConversion = null;

        public readonly bool? isdisplayable = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum FileScope
            {
                None = 0,
                Individual = 1,
                Global = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum FileFormat
            {
                Xml = 0,
                Json = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutioncomponentdefinition")]
    public class SolutionComponentDefinition : Entity
    {
        public const string EntityLogicalName = "solutioncomponentdefinition";
        public SolutionComponentDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutioncomponentdefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutioncomponentdefinitionid"] = value;
            }
        }

        public readonly int? GroupParentComponentType = null;

        public readonly string IntroducedVersion = null;

        public readonly string ParentAttributeName = null;

        public readonly bool? AllowRecreateForLogicallyDeletedRow = null;

        public readonly bool? AllowOverwriteCustomizations = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly int? RootComponent = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? SolutionComponentType = null;

        public readonly bool? IsMergeable = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string PrimaryEntityName = null;

        public readonly bool? IsDisplayable = null;

        public readonly string GroupParentComponentAttributeName = null;

        public readonly string RootAttributeName = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string ComponentXPath = null;

        public readonly bool? IsManaged = null;

        public readonly bool? DescendentIsViewableComponent = null;

        public readonly int? ViewableDescendentComponentType = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly bool? HasIsRenameableAttribute = null;

        public readonly Guid? SolutionComponentDefinitionIdUnique = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? CanBeAddedToSolutionComponents = null;

        public readonly bool? UseForceDeleteForSolutionUpdate = null;

        public readonly OptionSetValue RemoveActiveCustomizationsBehavior = null;

        public readonly bool? AllowDeleteBaseSolutionRowAndFakeDelete = null;

        public readonly Guid? SolutionComponentDefinitionId = null;

        public readonly bool? UseSentinelRowInBaseSolution = null;

        public readonly bool? IsMetadata = null;

        public readonly bool? CanBeHidden = null;

        public readonly int? LabelTypeCode = null;

        public readonly bool? IsDependencyDisabled = null;

        public readonly bool? AlwaysRemoveActiveCustomizationsOnUninstall = null;

        public readonly bool? UseForceUpdateAlways = null;

        public readonly bool? IsViewable = null;

        public readonly int? ObjectTypeCode = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum RemoveActiveCustomizationsBehavior
            {
                None = 0,
                NoCascade = 1,
                Cascade = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutioncomponentrelationshipconfiguration")]
    public class solutioncomponentrelationshipconfiguration : OrganizationEntity
    {
        public const string EntityLogicalName = "solutioncomponentrelationshipconfiguration";
        public solutioncomponentrelationshipconfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutioncomponentrelationshipconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutioncomponentrelationshipconfigurationid"] = value;
            }
        }

        public readonly OptionSetValue PrimaryEntityDependencyType = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? solutioncomponentrelationshipconfigurationId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly OptionSetValue SecondaryEntityDependencyType = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference EntityRelationshipId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? AddRelatedComponents = null;

        public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum PrimaryEntityDependencyType
            {
                HardDependency = 0,
                SoftDependency = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SecondaryEntityDependencyType
            {
                HardDependency = 0,
                SoftDependency = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutionhistorydata")]
    public class SolutionHistoryData : Entity
    {
        public const string EntityLogicalName = "solutionhistorydata";
        public SolutionHistoryData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutionhistorydataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutionhistorydataid"] = value;
            }
        }

        public readonly string SolutionVersion = null;

        public readonly Guid? ActivityId = null;

        public readonly OptionSetValue Operation = null;

        public readonly string SolutionName = null;

        public readonly string ExceptionMessage = null;

        public readonly bool? IsPatch = null;

        public readonly string ExceptionStack = null;

        public readonly Guid? SolutionHistoryDataId = null;

        public readonly bool? IsMicrosoftPublisher = null;

        public readonly bool? IsManaged = null;

        public readonly OptionSetValue SubOperation = null;

        public readonly string PackageVersion = null;

        public readonly int? ErrorCode = null;

        public readonly Guid? CorrelationId = null;

        public readonly string PackageName = null;

        public readonly int? Result = null;

        public readonly string PublisherName = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue Status = null;

        public readonly bool? IsOverwriteCustomizations = null;

        public readonly DateTime? EndTime = null;

        public readonly DateTime? StartTime = null;

        public new static class Options
        {
            public enum Operation
            {
                Import = 0,
                Uninstall = 1,
                Export = 2
            }
            public enum SubOperation
            {
                None = 0,
                New = 1,
                Upgrade = 2,
                Update = 3,
                Delete = 4
            }
            public enum Status
            {
                Start = 0,
                End = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sqlencryptionaudit")]
    public class SqlEncryptionAudit : Entity
    {
        public const string EntityLogicalName = "sqlencryptionaudit";
        public SqlEncryptionAudit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("createdon")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["createdon"] = value;
            }
        }

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("stagesolutionupload")]
    public class StageSolutionUpload : UserOrTeamEntity
    {
        public const string EntityLogicalName = "stagesolutionupload";
        public StageSolutionUpload() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("stagesolutionuploadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["stagesolutionuploadid"] = value;
            }
        }

        public readonly string SolutionFileName = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly string SolutionUniqueName = null;

        public readonly Guid? StageSolutionUploadId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("statusmap")]
    public class StatusMap : Entity
    {
        public const string EntityLogicalName = "statusmap";
        public StatusMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("statusmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["statusmapid"] = value;
            }
        }

        public readonly int? State = null;

        public readonly bool? IsDefault = null;

        public readonly Guid? StatusMapId = null;

        public readonly int? VersionNumber = null;

        public readonly int? Status = null;

        public readonly string ObjectTypeCode = null;

        public readonly Guid? OrganizationId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("stringmap")]
    public class StringMap : Entity
    {
        public const string EntityLogicalName = "stringmap";
        public StringMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("stringmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["stringmapid"] = value;
            }
        }

        public readonly int? AttributeValue = null;

        public readonly Guid? OrganizationId = null;

        public readonly int? DisplayOrder = null;

        public readonly int? VersionNumber = null;

        public readonly string AttributeName = null;

        public readonly string Value = null;

        public readonly string ObjectTypeCode = null;

        public readonly int? LangId = null;

        public readonly Guid? StringMapId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subject")]
    public class Subject : Entity
    {
        public const string EntityLogicalName = "subject";
        public Subject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subjectid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subjectid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference ModifiedByExternalParty = null;

        public readonly int? FeatureMask = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly Guid? SubjectId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ParentSubject = null;

        public readonly EntityReference CreatedByExternalParty = null;

        public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscription")]
    public class Subscription : Entity
    {
        public const string EntityLogicalName = "subscription";
        public Subscription() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }

        public readonly DateTime? CompletedSyncStartedOn = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly Guid? SubscriptionId = null;

        public readonly Guid? SystemUserId = null;

        public readonly bool? ResetForCreate = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string SyncEntryTableName = null;

        public readonly int? SubscriptionType = null;

        public readonly string ClientVersion = null;

        public readonly bool? ReInitialize = null;

        public readonly string MachineName = null;

        public readonly int? CompletedSyncVersionNumber = null;

        public readonly DateTime? LastSyncStartedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionclients")]
    public class SubscriptionClients : Entity
    {
        public const string EntityLogicalName = "subscriptionclients";
        public SubscriptionClients() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionclientid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionclientid"] = value;
            }
        }

        public readonly Guid? SubscriptionId = null;

        public readonly Guid? SubscriptionClientId = null;

        public readonly bool? IsPrimaryClient = null;

        public readonly Guid? ClientId = null;

        public readonly string MachineName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionmanuallytrackedobject")]
    public class SubscriptionManuallyTrackedObject : Entity
    {
        public const string EntityLogicalName = "subscriptionmanuallytrackedobject";
        public SubscriptionManuallyTrackedObject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionmanuallytrackedobjectid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionmanuallytrackedobjectid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? ObjectId = null;

        public readonly bool? Track = null;

        public readonly string ObjectTypeCode = null;

        public readonly Guid? SubscriptionId = null;

        public readonly Guid? SubscriptionManuallyTrackedObjectId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                Contact = 2,
                Task = 4212
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionstatisticsoffline")]
    public class SubscriptionStatisticsOffline : Entity
    {
        public const string EntityLogicalName = "subscriptionstatisticsoffline";
        public SubscriptionStatisticsOffline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }

        public readonly Guid? SubscriptionId = null;

        public readonly bool? FullSyncRequired = null;

        public readonly int? ObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionstatisticsoutlook")]
    public class SubscriptionStatisticsOutlook : Entity
    {
        public const string EntityLogicalName = "subscriptionstatisticsoutlook";
        public SubscriptionStatisticsOutlook() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }

        public readonly Guid? SubscriptionId = null;

        public readonly bool? FullSyncRequired = null;

        public readonly int? ObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionsyncentryoffline")]
    public class SubscriptionSyncEntryOffline : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncentryoffline";
        public SubscriptionSyncEntryOffline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }

        public readonly Guid? SubscriptionId = null;

        public readonly Guid? ObjectId = null;

        public readonly int? VersionNumber = null;

        public readonly int? ObjectTypeCode = null;

        public readonly int? SyncState = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionsyncentryoutlook")]
    public class SubscriptionSyncEntryOutlook : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncentryoutlook";
        public SubscriptionSyncEntryOutlook() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? ObjectId = null;

        public readonly int? SyncState = null;

        public readonly int? ObjectTypeCode = null;

        public readonly Guid? SubscriptionId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionsyncinfo")]
    public class SubscriptionSyncInfo : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncinfo";
        public SubscriptionSyncInfo() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionsyncinfoid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionsyncinfoid"] = value;
            }
        }

        public readonly bool? SyncResult = null;

        public readonly DateTime? EndTime = null;

        public readonly int? SubscriptionSyncInfoId = null;

        public readonly int? InsertObjectCount = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? DataSize = null;

        public readonly string ClientVersion = null;

        public readonly DateTime? StartTime = null;

        public readonly EntityReference SubscriptionId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? DeleteObjectCount = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptiontrackingdeletedobject")]
    public class SubscriptionTrackingDeletedObject : Entity
    {
        public const string EntityLogicalName = "subscriptiontrackingdeletedobject";
        public SubscriptionTrackingDeletedObject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timestamp")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timestamp"] = value;
            }
        }

        public readonly bool? IsLogicalDelete = null;

        public readonly string ObjectTypeCode = null;

        public readonly Guid? ObjectId = null;

        public readonly DateTime? CrmCreatedOn = null;

        public readonly DateTime? DeleteTime = null;

        public readonly int? TimeStamp = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("suggestioncardtemplate")]
    public class SuggestionCardTemplate : Entity
    {
        public const string EntityLogicalName = "suggestioncardtemplate";
        public SuggestionCardTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("suggestioncardtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["suggestioncardtemplateid"] = value;
            }
        }

        public readonly Guid? SuggestionCardTemplateId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string StructuredLayout = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly decimal? ExchangeRate = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("syncattributemapping")]
    public class SyncAttributeMapping : Entity
    {
        public const string EntityLogicalName = "syncattributemapping";
        public SyncAttributeMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncattributemappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncattributemappingid"] = value;
            }
        }

        public readonly OptionSetValue DefaultSyncDirection = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? SyncAttributeMappingIdUnique = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsComputed = null;

        public readonly Guid? SyncAttributeMappingId = null;

        public readonly EntityReference SyncAttributeMappingProfileId = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly bool? IsManaged = null;

        public readonly string AttributeCRMName = null;

        public readonly OptionSetValue SyncDirection = null;

        public readonly string MappingName = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference ParentSyncAttributeMappingId = null;

        public readonly int? AllowedSyncDirection = null;

        public readonly Guid? SolutionId = null;

        public readonly string ComputedProperties = null;

        public readonly string AttributeExchangeName = null;

        public readonly string EntityTypeCode = null;

        public new static class Options
        {
            public enum DefaultSyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("syncattributemappingprofile")]
    public class SyncAttributeMappingProfile : Entity
    {
        public const string EntityLogicalName = "syncattributemappingprofile";
        public SyncAttributeMappingProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncattributemappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncattributemappingprofileid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly Guid? SyncAttributeMappingProfileIdUnique = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? SyncAttributeMappingProfileId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("syncerror")]
    public class SyncError : Entity
    {
        public const string EntityLogicalName = "syncerror";
        public SyncError() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncerrorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncerrorid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly string ErrorCode = null;

        public readonly string Action = null;

        public readonly string ErrorDetail = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ErrorTime = null;

        public readonly Guid? SyncErrorId = null;

        public readonly string RequestData = null;

        public readonly OptionSetValue ErrorType = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string ActionData = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string ErrorMessage = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Resolved = 1
            }
            public enum ErrorType
            {
                Conflict = 0,
                RecordNotFound = 1,
                RecordAlreadyExists = 2,
                Others = 3
            }
            public enum StatusCode
            {
                Active = 0,
                Fixed = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemapplicationmetadata")]
    public class SystemApplicationMetadata : Entity
    {
        public const string EntityLogicalName = "systemapplicationmetadata";
        public SystemApplicationMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemapplicationmetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemapplicationmetadataid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? FormFactor = null;

        public readonly Guid? SystemApplicationMetadataId = null;

        public readonly string DisplayName = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? Lcid = null;

        public readonly int? MetadataType = null;

        public readonly int? MetadataSubtype = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string Version = null;

        public readonly string SourceId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string AssociatedEntityLogicalName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Dependency = null;

        public readonly int? State = null;

        public readonly string Data = null;

        public readonly bool? IsDefault = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemform")]
    public class SystemForm : Entity
    {
        public const string EntityLogicalName = "systemform";
        public SystemForm() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("formid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["formid"] = value;
            }
        }

        public readonly Guid? FormId = null;

        public readonly string IntroducedVersion = null;

        public readonly string Description = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsAIRMerged = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue FormPresentation = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? IsDefault = null;

        public readonly EntityReference AncestorFormId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsDesktopEnabled = null;

        public readonly string FormJson = null;

        public readonly Guid? FormIdUnique = null;

        public readonly int? Version = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? CanBeDeleted = null;

        public readonly DateTime? PublishedOn = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly bool? IsTabletEnabled = null;

        public readonly string FormXml = null;

        public readonly string UniqueName = null;

        public readonly OptionSetValue FormActivationState = null;

        public readonly string FormXmlManaged = null;

        public readonly OptionSetValue Type = null;

        public readonly string ObjectTypeCode = null;

        public new static class Options
        {
            public enum FormPresentation
            {
                ClassicForm = 0,
                AirForm = 1,
                ConvertedICForm = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum FormActivationState
            {
                Inactive = 0,
                Active = 1
            }
            public enum Type
            {
                Dashboard = 0,
                AppointmentBook = 1,
                Main = 2,
                MiniCampaignBO = 3,
                Preview = 4,
                MobileExpress = 5,
                QuickViewForm = 6,
                QuickCreate = 7,
                Dialog = 8,
                TaskFlowForm = 9,
                InteractionCentricDashboard = 10,
                Card = 11,
                MainInteractiveExperience = 12,
                ContextualDashboard = 13,
                Other = 100,
                MainBackup = 101,
                AppointmentBookBackup = 102,
                PowerBIDashboard = 103
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuser")]
    public class SystemUser : Entity
    {
        public const string EntityLogicalName = "systemuser";
        public SystemUser() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserid"] = value;
            }
        }

        public readonly string TraversedPath = null;

        public readonly Guid? AzureActiveDirectoryObjectId = null;

        public readonly string Address1_Line1 = null;

        public readonly string InternalEMailAddress = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Address1_Line3 = null;

        public readonly string Skills = null;

        public readonly string YomiFirstName = null;

        public readonly double? Address1_Longitude = null;

        public readonly string YomiFullName = null;

        public readonly OptionSetValue Address1_AddressTypeCode = null;

        public readonly string Address2_County = null;

        public readonly Guid? ActiveDirectoryGuid = null;

        public readonly string Title = null;

        public readonly OptionSetValue Address1_ShippingMethodCode = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly int? PassportHi = null;

        public readonly string HomePhone = null;

        public readonly string Address2_StateOrProvince = null;

        public readonly string Address2_Country = null;

        public readonly string Address2_Name = null;

        public readonly string DisabledReason = null;

        public readonly string LastName = null;

        public readonly string Address1_City = null;

        public readonly EntityReference CalendarId = null;

        public readonly bool? SetupUser = null;

        public readonly int? Address1_UTCOffset = null;

        public readonly bool? IsLicensed = null;

        public readonly bool? IsActiveDirectoryUser = null;

        public readonly int? UserLicenseType = null;

        public readonly decimal? ExchangeRate = null;

        public readonly OptionSetValue PreferredEmailCode = null;

        public readonly EntityReference MobileOfflineProfileId = null;

        public readonly string Address2_City = null;

        public readonly int? PassportLo = null;

        public readonly double? Address2_Latitude = null;

        public readonly Guid? ApplicationId = null;

        public readonly EntityReference QueueId = null;

        public readonly string YomiMiddleName = null;

        public readonly string FirstName = null;

        public readonly string Address2_PostalCode = null;

        public readonly EntityReference sample_TeammemberId = null;

        public readonly bool? DisplayInServiceViews = null;

        public readonly string EmployeeId = null;

        public readonly Guid? ProcessId = null;

        public readonly string GovernmentId = null;

        public readonly string Address2_Line3 = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string Address1_County = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Address2_Telephone2 = null;

        public readonly OptionSetValue PreferredPhoneCode = null;

        public readonly string Address2_PostOfficeBox = null;

        public readonly string Address2_Telephone1 = null;

        public readonly string YomiLastName = null;

        public readonly string Address2_Telephone3 = null;

        public readonly Guid? Address1_AddressId = null;

        public readonly OptionSetValue EmailRouterAccessApproval = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string UserPuid = null;

        public readonly Guid? SystemUserId = null;

        public readonly EntityReference TerritoryId = null;

        public readonly EntityReference DefaultMailbox = null;

        public readonly string MiddleName = null;

        public readonly string Address2_Line2 = null;

        public readonly string ApplicationIdUri = null;

        public readonly byte[] EntityImage = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly string MobilePhone = null;

        public readonly string Address2_Composite = null;

        public readonly string Address1_Country = null;

        public readonly string MobileAlertEMail = null;

        public readonly string SharePointEmailAddress = null;

        public readonly string Address1_StateOrProvince = null;

        public readonly EntityReference PositionId = null;

        public readonly OptionSetValue PreferredAddressCode = null;

        public readonly OptionSetValue IncomingEmailDeliveryMethod = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string JobTitle = null;

        public readonly string NickName = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string Address1_Telephone1 = null;

        public readonly string Address1_Telephone2 = null;

        public readonly string Address1_Telephone3 = null;

        public readonly DateTime? LatestUpdateTime = null;

        public readonly string Address1_PostOfficeBox = null;

        public readonly Guid? OrganizationId = null;

        public readonly string YammerEmailAddress = null;

        public readonly int? IdentityId = null;

        public readonly bool? DefaultFiltersPopulated = null;

        public readonly int? Address2_UTCOffset = null;

        public readonly string PhotoUrl = null;

        public readonly OptionSetValue AccessMode = null;

        public readonly string PersonalEMailAddress = null;

        public readonly bool? IsIntegrationUser = null;

        public readonly double? Address2_Longitude = null;

        public readonly OptionSetValue CALType = null;

        public readonly string DomainName = null;

        public readonly string Address2_Fax = null;

        public readonly string Address1_Line2 = null;

        public readonly EntityReference CreatedBy = null;

        public readonly OptionSetValue Address2_AddressTypeCode = null;

        public readonly string Address2_UPSZone = null;

        public readonly string WindowsLiveID = null;

        public readonly string Salutation = null;

        public readonly string Address1_PostalCode = null;

        public readonly EntityReference ParentSystemUserId = null;

        public readonly Guid? StageId = null;

        public readonly string DefaultOdbFolderName = null;

        public readonly string Address1_Composite = null;

        public readonly Guid? Address2_AddressId = null;

        public readonly string YammerUserId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly bool? IsEmailAddressApprovedByO365Admin = null;

        public readonly OptionSetValue InviteStatusCode = null;

        public readonly int? VersionNumber = null;

        public readonly bool? IsSyncWithDirectory = null;

        public readonly string Address1_Name = null;

        public readonly string Address1_Fax = null;

        public readonly double? Address1_Latitude = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly OptionSetValue Address2_ShippingMethodCode = null;

        public readonly string Address2_Line1 = null;

        public readonly string Address1_UPSZone = null;

        public readonly EntityReference sample_StakeholdersId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string FullName = null;

        public readonly bool? IsDisabled = null;

        public new static class Options
        {
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum PreferredEmailCode
            {
                DefaultValue = 1
            }
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum PreferredPhoneCode
            {
                MainPhone = 1,
                OtherPhone = 2,
                HomePhone = 3,
                MobilePhone = 4
            }
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum PreferredAddressCode
            {
                MailingAddress = 1,
                OtherAddress = 2
            }
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum AccessMode
            {
                ReadWrite = 0,
                Administrative = 1,
                Read = 2,
                SupportUser = 3,
                NonInteractive = 4,
                DelegatedAdmin = 5
            }
            public enum CALType
            {
                Professional = 0,
                Administrative = 1,
                Basic = 2,
                DeviceProfessional = 3,
                DeviceBasic = 4,
                Essential = 5,
                DeviceEssential = 6,
                Enterprise = 7,
                DeviceEnterprise = 8,
                Sales = 9,
                Service = 10,
                FieldService = 11,
                ProjectService = 12
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum InviteStatusCode
            {
                InvitationNotSent = 0,
                Invited = 1,
                InvitationNearExpired = 2,
                InvitationExpired = 3,
                InvitationAccepted = 4,
                InvitationRejected = 5,
                InvitationRevoked = 6
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserauthorizationchangetracker")]
    public class SystemUserAuthorizationChangeTracker : Entity
    {
        public const string EntityLogicalName = "systemuserauthorizationchangetracker";
        public SystemUserAuthorizationChangeTracker() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserid"] = value;
            }
        }

        public readonly DateTime? ChangedOn = null;

        public readonly Guid? SystemUserId = null;

        public readonly int? ChangedVersionNumber = null;

        public readonly DateTime? ComputedOn = null;

        public readonly int? ComputedVersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserbusinessunitentitymap")]
    public class SystemUserBusinessUnitEntityMap : Entity
    {
        public const string EntityLogicalName = "systemuserbusinessunitentitymap";
        public SystemUserBusinessUnitEntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserbusinessunitentitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserbusinessunitentitymapid"] = value;
            }
        }

        public readonly Guid? BusinessUnitId = null;

        public readonly int? ReadPrivilegeDepth = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SystemUserId = null;

        public readonly string ObjectTypeCode = null;

        public readonly Guid? SystemUserBusinessUnitEntityMapId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserlicenses")]
    public class SystemUserLicenses : Entity
    {
        public const string EntityLogicalName = "systemuserlicenses";
        public SystemUserLicenses() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserlicenseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserlicenseid"] = value;
            }
        }

        public readonly Guid? LicenseId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SystemUserLicenseId = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemusermanagermap")]
    public class SystemUserManagerMap : Entity
    {
        public const string EntityLogicalName = "systemusermanagermap";
        public SystemUserManagerMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemusermanagermapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemusermanagermapid"] = value;
            }
        }

        public readonly int? HierarchyLevel = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? ParentSystemUserId = null;

        public readonly Guid? SystemUserManagerMapId = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserprincipals")]
    public class SystemUserPrincipals : Entity
    {
        public const string EntityLogicalName = "systemuserprincipals";
        public SystemUserPrincipals() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserprincipalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserprincipalid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? SystemUserPrincipalId = null;

        public readonly Guid? PrincipalId = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserprofiles")]
    public class SystemUserProfiles : Entity
    {
        public const string EntityLogicalName = "systemuserprofiles";
        public SystemUserProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserprofileid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? FieldSecurityProfileId = null;

        public readonly Guid? SystemUserProfileId = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserroles")]
    public class SystemUserRoles : Entity
    {
        public const string EntityLogicalName = "systemuserroles";
        public SystemUserRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserroleid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? RoleId = null;

        public readonly Guid? SystemUserRoleId = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemusersyncmappingprofiles")]
    public class SystemUserSyncMappingProfiles : Entity
    {
        public const string EntityLogicalName = "systemusersyncmappingprofiles";
        public SystemUserSyncMappingProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemusersyncmappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemusersyncmappingprofileid"] = value;
            }
        }

        public readonly Guid? SyncAttributeMappingProfileId = null;

        public readonly Guid? SystemUserSyncMappingProfileId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("task")]
    public class Task : Entity
    {
        public const string EntityLogicalName = "task";
        public Task() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly bool? IsBilled = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string TraversedPath = null;

        public readonly bool? IsWorkflowCreated = null;

        public readonly Guid? CrmTaskAssignedUniqueId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? OnHoldTime = null;

        public readonly OptionSetValue PriorityCode = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly DateTime? ScheduledStart = null;

        public readonly DateTime? ActualStart = null;

        public readonly Guid? SubscriptionId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string Subcategory = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly OptionSetValue StateCode = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string ActivityAdditionalParams = null;

        public readonly string ActivityTypeCode = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference SLAId = null;

        public readonly EntityReference OwnerId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? ScheduledDurationMinutes = null;

        public readonly string Category = null;

        public readonly Guid? ProcessId = null;

        public readonly string Description = null;

        public readonly EntityReference OwningTeam = null;

        public readonly DateTime? SortDate = null;

        public readonly DateTime? LastOnHoldTime = null;

        public readonly Guid? StageId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference SLAInvokedId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? PercentComplete = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? ActualEnd = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly Guid? ActivityId = null;

        public readonly bool? IsRegularActivity = null;

        public readonly DateTime? ScheduledEnd = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly int? ActualDurationMinutes = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }
            public enum StatusCode
            {
                NotStarted = 2,
                InProgress = 3,
                WaitingOnSomeoneElse = 4,
                Completed = 5,
                Canceled = 6,
                Deferred = 7
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("team")]
    public class Team : Entity
    {
        public const string EntityLogicalName = "team";
        public Team() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamid"] = value;
            }
        }

        public readonly string TraversedPath = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference AdministratorId = null;

        public readonly string Description = null;

        public readonly Guid? AzureActiveDirectoryObjectId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly Guid? TeamId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly Guid? StageId = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly Guid? OrganizationId = null;

        public readonly EntityReference BusinessUnitId = null;

        public readonly string EMailAddress = null;

        public readonly bool? SystemManaged = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly OptionSetValue TeamType = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? ProcessId = null;

        public readonly string YomiName = null;

        public readonly EntityReference TeamTemplateId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference QueueId = null;

        public readonly OptionSetValue MembershipType = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum TeamType
            {
                Owner = 0,
                Access = 1,
                AADSecurityGroup = 2,
                AADOfficeGroup = 3
            }
            public enum MembershipType
            {
                MembersAndGuests = 0,
                Members = 1,
                Owners = 2,
                Guests = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teammembership")]
    public class TeamMembership : Entity
    {
        public const string EntityLogicalName = "teammembership";
        public TeamMembership() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teammembershipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teammembershipid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? TeamMembershipId = null;

        public readonly Guid? TeamId = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teammobileofflineprofilemembership")]
    public class teammobileofflineprofilemembership : OrganizationEntity
    {
        public const string EntityLogicalName = "teammobileofflineprofilemembership";
        public teammobileofflineprofilemembership() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teammobileofflineprofilemembershipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teammobileofflineprofilemembershipid"] = value;
            }
        }

        public readonly Guid? teammobileofflineprofilemembershipId = null;

        public readonly EntityReference TeamId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference MobileOfflineProfileId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teamprofiles")]
    public class TeamProfiles : Entity
    {
        public const string EntityLogicalName = "teamprofiles";
        public TeamProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamprofileid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? TeamProfileId = null;

        public readonly Guid? FieldSecurityProfileId = null;

        public readonly Guid? TeamId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teamroles")]
    public class TeamRoles : Entity
    {
        public const string EntityLogicalName = "teamroles";
        public TeamRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamroleid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly Guid? RoleId = null;

        public readonly Guid? TeamId = null;

        public readonly Guid? TeamRoleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teamsyncattributemappingprofiles")]
    public class TeamSyncAttributeMappingProfiles : Entity
    {
        public const string EntityLogicalName = "teamsyncattributemappingprofiles";
        public TeamSyncAttributeMappingProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamsyncattributemappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamsyncattributemappingprofileid"] = value;
            }
        }

        public readonly Guid? SyncAttributeMappingProfileId = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? TeamId = null;

        public readonly Guid? TeamSyncAttributeMappingProfileId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teamtemplate")]
    public class TeamTemplate : Entity
    {
        public const string EntityLogicalName = "teamtemplate";
        public TeamTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamtemplateid"] = value;
            }
        }

        public readonly int? DefaultAccessRightsMask = null;

        public readonly bool? IsSystem = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Description = null;

        public readonly Guid? TeamTemplateId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string TeamTemplateName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? ObjectTypeCode = null;

        public readonly int? versionnumber = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("template")]
    public class Template : Entity
    {
        public const string EntityLogicalName = "template";
        public Template() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("templateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["templateid"] = value;
            }
        }

        public readonly string MimeType = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string IntroducedVersion = null;

        public readonly byte[] EntityImage = null;

        public readonly int? LanguageCode = null;

        public readonly string Description = null;

        public readonly EntityReference OwningUser = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string SafeHtml = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly bool? IsCustomizable = null;

        public readonly int? OpenRate = null;

        public readonly int? OpenCount = null;

        public readonly string TemplateTypeCode = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? TemplateIdUnique = null;

        public readonly string PresentationXml = null;

        public readonly int? ReplyCount = null;

        public readonly string SubjectSafeHtml = null;

        public readonly Guid? SolutionId = null;

        public readonly int? UsedCount = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string Body = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Title = null;

        public readonly bool? IsRecommended = null;

        public readonly bool? IsManaged = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? GenerationTypeCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? ReplyRate = null;

        public readonly bool? IsPersonal = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? TemplateId = null;

        public readonly string SubjectPresentationXml = null;

        public readonly string Subject = null;

        public new static class Options
        {
            public enum TemplateTypeCode
            {
                Account = 1,
                Contact = 2,
                SystemJob = 4700,
                User = 8
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("territory")]
    public class Territory : Entity
    {
        public const string EntityLogicalName = "territory";
        public Territory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("territoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["territoryid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly byte[] EntityImage = null;

        public readonly string Description = null;

        public readonly EntityReference ManagerId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly Guid? TerritoryId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ParentTerritoryId = null;

        public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("textanalyticsentitymapping")]
    public class TextAnalyticsEntityMapping : Entity
    {
        public const string EntityLogicalName = "textanalyticsentitymapping";
        public TextAnalyticsEntityMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("textanalyticsentitymappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["textanalyticsentitymappingid"] = value;
            }
        }

        public readonly bool? IsTextMatchMapping = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string EntityDisplayName = null;

        public readonly Guid? TextAnalyticsEntityMappingId = null;

        public readonly string Field = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? TextAnalyticsEntityMappingIdUnique = null;

        public readonly bool? IsManaged = null;

        public readonly string Entity = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference AdvancedSimilarityRuleId = null;

        public readonly Guid? SolutionId = null;

        public readonly OptionSetValue FieldPickList = null;

        public readonly OptionSetValue EntityPickList = null;

        public readonly int? ModelType = null;

        public readonly string FieldDisplayName = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference KnowledgeSearchModelId = null;

        public readonly string RelationshipName = null;

        public readonly EntityReference SimilarityRuleId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum FieldPickList
            {
                No = 1,
                Yes = 2
            }
            public enum EntityPickList
            {
                No = 1,
                Yes = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("theme")]
    public class Theme : Entity
    {
        public const string EntityLogicalName = "theme";
        public Theme() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("themeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["themeid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue statecode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly OptionSetValue statuscode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string NavBarShelfColor = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string HoverLinkEffect = null;

        public readonly string ControlBorder = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly string GlobalLinkColor = null;

        public readonly string ProcessControlColor = null;

        public readonly EntityReference LogoId = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly Guid? ThemeId = null;

        public readonly string PanelHeaderBackgroundColor = null;

        public readonly string DefaultCustomEntityColor = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly string ControlShade = null;

        public readonly string PageHeaderBackgroundColor = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string AccentColor = null;

        public readonly string MainColor = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string DefaultEntityColor = null;

        public readonly string LogoToolTip = null;

        public readonly string SelectedLinkEffect = null;

        public readonly string HeaderColor = null;

        public readonly bool? Type = null;

        public readonly string NavBarBackgroundColor = null;

        public readonly string BackgroundColor = null;

        public readonly bool? IsDefaultTheme = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Custom = 0,
                System = 1
            }
            public enum statuscode
            {
                Custom = 1,
                System = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("timestampdatemapping")]
    public class TimeStampDateMapping : Entity
    {
        public const string EntityLogicalName = "timestampdatemapping";
        public TimeStampDateMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timestampdatemappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timestampdatemappingid"] = value;
            }
        }

        public readonly Guid? TimeStampDateMappingId = null;

        public readonly DateTime? Date = null;

        public readonly int? TimeStamp = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("timezonedefinition")]
    public class TimeZoneDefinition : Entity
    {
        public const string EntityLogicalName = "timezonedefinition";
        public TimeZoneDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezonedefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezonedefinitionid"] = value;
            }
        }

        public readonly EntityReference OrganizationId = null;

        public readonly int? Bias = null;

        public readonly int? TimeZoneCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? TimeZoneDefinitionId = null;

        public readonly EntityReference ModifiedBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string UserInterfaceName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string DaylightName = null;

        public readonly string StandardName = null;

        public readonly int? RetiredOrder = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("timezonelocalizedname")]
    public class TimeZoneLocalizedName : Entity
    {
        public const string EntityLogicalName = "timezonelocalizedname";
        public TimeZoneLocalizedName() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezonelocalizednameid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezonelocalizednameid"] = value;
            }
        }

        public readonly Guid? TimeZoneLocalizedNameId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference TimeZoneDefinitionId = null;

        public readonly EntityReference ModifiedBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string UserInterfaceName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? CultureId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string DaylightName = null;

        public readonly string StandardName = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("timezonerule")]
    public class TimeZoneRule : Entity
    {
        public const string EntityLogicalName = "timezonerule";
        public TimeZoneRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezoneruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezoneruleid"] = value;
            }
        }

        public readonly int? DaylightYear = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? StandardMinute = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly DateTime? EffectiveDateTime = null;

        public readonly int? StandardDay = null;

        public readonly int? StandardYear = null;

        public readonly int? StandardDayOfWeek = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? DaylightMinute = null;

        public readonly int? VersionNumber = null;

        public readonly int? DaylightHour = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? StandardHour = null;

        public readonly int? StandardBias = null;

        public readonly int? DaylightSecond = null;

        public readonly int? Bias = null;

        public readonly int? DaylightMonth = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? DaylightBias = null;

        public readonly int? StandardSecond = null;

        public readonly int? DaylightDay = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference TimeZoneDefinitionId = null;

        public readonly int? StandardMonth = null;

        public readonly Guid? TimeZoneRuleId = null;

        public readonly int? DaylightDayOfWeek = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("traceassociation")]
    public class TraceAssociation : Entity
    {
        public const string EntityLogicalName = "traceassociation";
        public TraceAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("traceassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["traceassociationid"] = value;
            }
        }

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? TraceAssociationId = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly EntityReference TraceLogId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("tracelog")]
    public class TraceLog : Entity
    {
        public const string EntityLogicalName = "tracelog";
        public TraceLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("tracelogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["tracelogid"] = value;
            }
        }

        public readonly bool? IsUnique = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly EntityReference ParentTraceLogId = null;

        public readonly EntityReference RegardingObjectOwnerId = null;

        public readonly bool? TraceStatus = null;

        public readonly EntityReference OrganizationId = null;

        public readonly string TraceDetailXml = null;

        public readonly Guid? TraceLogId = null;

        public readonly EntityReference TraceRegardingId = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly EntityReference RegardingObjectOwningBusinessUnit = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string MachineName = null;

        public readonly bool? CanBeDeleted = null;

        public readonly int? TraceCode = null;

        public readonly string TraceActionXml = null;

        public readonly string TraceParameterXml = null;

        public readonly int? TraceParameterHash = null;

        public readonly string ErrorTypeDisplay = null;

        public readonly DateTime? ModifiedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Text = null;

        public readonly DateTime? CreatedOn = null;

        public readonly OptionSetValue Level = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? CollationLevel = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string ErrorDetails = null;

        public new static class Options
        {
            public enum Level
            {
                Information = 1,
                Warning = 2,
                Error = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("traceregarding")]
    public class TraceRegarding : Entity
    {
        public const string EntityLogicalName = "traceregarding";
        public TraceRegarding() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("traceregardingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["traceregardingid"] = value;
            }
        }

        public readonly Guid? TraceRegardingId = null;

        public readonly EntityReference RegardingObjectOwnerId = null;

        public readonly string RegardingObjectTypeCodeForSharing = null;

        public readonly EntityReference RegardingObjectOwningBusinessUnit = null;

        public readonly EntityReference RegardingObjectId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("transactioncurrency")]
    public class TransactionCurrency : Entity
    {
        public const string EntityLogicalName = "transactioncurrency";
        public TransactionCurrency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transactioncurrencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transactioncurrencyid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string CurrencySymbol = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Guid? TransactionCurrencyId = null;

        public readonly byte[] EntityImage = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? CurrencyPrecision = null;

        public readonly Guid? UniqueDscId = null;

        public readonly int? VersionNumber = null;

        public readonly string ISOCurrencyCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly DateTime? CreatedOn = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string CurrencyName = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("transformationmapping")]
    public class TransformationMapping : Entity
    {
        public const string EntityLogicalName = "transformationmapping";
        public TransformationMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transformationmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transformationmappingid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string TargetEntityName = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly Guid? TransformationMappingIdUnique = null;

        public readonly OptionSetValue ProcessCode = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string SourceEntityName = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? TransformationMappingId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference ImportMapId = null;

        public readonly string TransformationTypeName = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("transformationparametermapping")]
    public class TransformationParameterMapping : Entity
    {
        public const string EntityLogicalName = "transformationparametermapping";
        public TransformationParameterMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transformationparametermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transformationparametermappingid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly Guid? TransformationParameterMappingIdUnique = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Data = null;

        public readonly int? ParameterSequence = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsManaged = null;

        public readonly OptionSetValue DataTypeCode = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly OptionSetValue ParameterTypeCode = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference TransformationMappingId = null;

        public readonly Guid? TransformationParameterMappingId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? ParameterArrayIndex = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum DataTypeCode
            {
                Reference = 0,
                Value = 1
            }
            public enum ParameterTypeCode
            {
                Input = 0,
                Output = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("translationprocess")]
    public class TranslationProcess : Entity
    {
        public const string EntityLogicalName = "translationprocess";
        public TranslationProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }

        public readonly EntityReference ActiveStageId = null;

        public readonly string TraversedPath = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference KnowledgeArticleId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly int? ImportSequenceNumber = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly int? Duration = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ProcessId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? BusinessProcessFlowInstanceId = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly DateTime? ActiveStageStartedOn = null;

        public readonly DateTime? CompletedOn = null;

        public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("unresolvedaddress")]
    public class UnresolvedAddress : Entity
    {
        public const string EntityLogicalName = "unresolvedaddress";
        public UnresolvedAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("unresolvedaddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["unresolvedaddressid"] = value;
            }
        }

        public readonly string FullName = null;

        public readonly int? VersionNumber = null;

        public readonly string Telephone = null;

        public readonly string EMailAddress = null;

        public readonly Guid? UnresolvedAddressId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("untrackedemail")]
    public class UntrackedEmail : Entity
    {
        public const string EntityLogicalName = "untrackedemail";
        public UntrackedEmail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference TransactionCurrencyId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Subject = null;

        public readonly string ExchangeItemId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly decimal? ExchangeRate = null;

        public readonly string ExchangeWebLink = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Description = null;

        public readonly string ActivityTypeCode = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? ActivityId = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                Donation = 10137
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userapplicationmetadata")]
    public class UserApplicationMetadata : Entity
    {
        public const string EntityLogicalName = "userapplicationmetadata";
        public UserApplicationMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userapplicationmetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userapplicationmetadataid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly int? FormFactor = null;

        public readonly string DisplayName = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? Lcid = null;

        public readonly int? MetadataType = null;

        public readonly int? MetadataSubtype = null;

        public readonly Guid? UserApplicationMetadataId = null;

        public readonly string Data = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly string SourceId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string AssociatedEntityLogicalName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Dependency = null;

        public readonly int? State = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly bool? IsDefault = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userentityinstancedata")]
    public class UserEntityInstanceData : Entity
    {
        public const string EntityLogicalName = "userentityinstancedata";
        public UserEntityInstanceData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userentityinstancedataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userentityinstancedataid"] = value;
            }
        }

        public readonly DateTime? ReminderTime = null;

        public readonly string FlagRequest = null;

        public readonly string ToDoTitle = null;

        public readonly int? FlagStatus = null;

        public readonly EntityReference ObjectId = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string PersonalCategories = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? UserEntityInstanceDataId = null;

        public readonly string ToDoSubOrdinal = null;

        public readonly DateTime? ToDoOrdinalDate = null;

        public readonly int? ToDoItemFlags = null;

        public readonly DateTime? FlagDueBy = null;

        public readonly int? ObjectTypeCode = null;

        public readonly DateTime? DueDate = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningUser = null;

        public readonly bool? ReminderSet = null;

        public readonly DateTime? CommonEnd = null;

        public readonly DateTime? CommonStart = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? StartTime = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userentityuisettings")]
    public class UserEntityUISettings : Entity
    {
        public const string EntityLogicalName = "userentityuisettings";
        public UserEntityUISettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userentityuisettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userentityuisettingsid"] = value;
            }
        }

        public readonly string InsertIntoEmailMRUXml = null;

        public readonly string LastViewedFormXml = null;

        public readonly string RecentlyViewedXml = null;

        public readonly string LookupMRUXml = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string ReadingPaneXml = null;

        public readonly Guid? UserEntityUISettingsId = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningUser = null;

        public readonly int? ObjectTypeCode = null;

        public readonly bool? ShowInAddressBook = null;

        public readonly string MRUXml = null;

        public readonly EntityReference OwnerId = null;

        public readonly string TabOrderXml = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userfiscalcalendar")]
    public class UserFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "userfiscalcalendar";
        public UserFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }

        public readonly Money Period5 = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? UserFiscalCalendarId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Money Period12_Base = null;

        public readonly Money Period8 = null;

        public readonly Money Period5_Base = null;

        public readonly Money Period4_Base = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly Money Period12 = null;

        public readonly Money Period3_Base = null;

        public readonly Money Period11 = null;

        public readonly int? FiscalPeriodType = null;

        public readonly Money Period2_Base = null;

        public readonly int? ImportSequenceNumber = null;

        public readonly Money Period6_Base = null;

        public readonly Money Period7 = null;

        public readonly Money Period1_Base = null;

        public readonly Money Period6 = null;

        public readonly Money Period3 = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly Money Period1 = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly DateTime? EffectiveOn = null;

        public readonly Money Period8_Base = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Money Period11_Base = null;

        public readonly EntityReference CreatedBy = null;

        public readonly Money Period10_Base = null;

        public readonly Money Period2 = null;

        public readonly Money Period13 = null;

        public readonly Money Period9_Base = null;

        public readonly Money Period10 = null;

        public readonly Money Period13_Base = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? BusinessUnitId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly Money Period7_Base = null;

        public readonly Money Period9 = null;

        public readonly EntityReference SalesPersonId = null;

        public readonly Money Period4 = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userform")]
    public class UserForm : Entity
    {
        public const string EntityLogicalName = "userform";
        public UserForm() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userformid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userformid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly EntityReference OwningTeam = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly string FormJson = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsTabletEnabled = null;

        public readonly string FormXml = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly OptionSetValue Type = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string ObjectTypeCode = null;

        public readonly Guid? UserFormId = null;

        public new static class Options
        {
            public enum Type
            {
                Dashboard = 0,
                PowerBIDashboard = 103
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("usermapping")]
    public class UserMapping : Entity
    {
        public const string EntityLogicalName = "usermapping";
        public UserMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("usermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["usermappingid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly int? UTCConversionTimeZoneCode = null;

        public readonly decimal? ExchangeRate = null;

        public readonly Guid? UserMappingId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? TimeZoneRuleVersionNumber = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly OptionSetValue PartnerApplicationType = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string ClaimType = null;

        public readonly string SystemUserAttributeName = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum PartnerApplicationType
            {
                SharePoint = 0,
                Exchange = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("usermobileofflineprofilemembership")]
    public class usermobileofflineprofilemembership : OrganizationEntity
    {
        public const string EntityLogicalName = "usermobileofflineprofilemembership";
        public usermobileofflineprofilemembership() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("usermobileofflineprofilemembershipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["usermobileofflineprofilemembershipid"] = value;
            }
        }

        public readonly Guid? usermobileofflineprofilemembershipId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly EntityReference SystemUserId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? HasMobileOfflineProfileIdConflict = null;

        public readonly EntityReference MobileOfflineProfileId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userquery")]
    public class UserQuery : Entity
    {
        public const string EntityLogicalName = "userquery";
        public UserQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userqueryid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly string ConditionalFormatting = null;
        [System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
        public readonly OptionSetValue StateCode = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ParentQueryId = null;

        public readonly string AdvancedGroupBy = null;

        public readonly string ColumnSetXml = null;

        public readonly string OfflineSqlQuery = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly Guid? UserQueryId = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string ReturnedTypeCode = null;

        public readonly string FetchXml = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? QueryType = null;

        public readonly string LayoutJson = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly DateTime? CreatedOn = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string LayoutXml = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                All = 3,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userqueryvisualization")]
    public class UserQueryVisualization : Entity
    {
        public const string EntityLogicalName = "userqueryvisualization";
        public UserQueryVisualization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userqueryvisualizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userqueryvisualizationid"] = value;
            }
        }

        public readonly EntityReference OwningUser = null;

        public readonly string PresentationDescription = null;

        public readonly string Description = null;

        public readonly EntityReference CreatedOnBehalfBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string DataDescription = null;

        public readonly string PrimaryEntityTypeCode = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? UserQueryVisualizationId = null;

        public readonly OptionSetValue ChartType = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference WebResourceId = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ChartType
            {
                ASPNETCharts = 0,
                PowerBI = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("usersearchfacet")]
    public class UserSearchFacet : Entity
    {
        public const string EntityLogicalName = "usersearchfacet";
        public UserSearchFacet() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("usersearchfacetid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["usersearchfacetid"] = value;
            }
        }

        public readonly int? FacetOrder = null;

        public readonly string AttributeName = null;

        public readonly Guid? UserSearchFacetId = null;

        public readonly string EntityName = null;

        public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("usersettings")]
    public class UserSettings : Entity
    {
        public const string EntityLogicalName = "usersettings";
        public UserSettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserid"] = value;
            }
        }

        public readonly string WorkdayStartTime = null;

        public readonly int? UILanguageId = null;

        public readonly int? VersionNumber = null;

        public readonly DateTime? LastAlertsViewedTime = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference CreatedBy = null;

        public readonly bool? IsResourceBookingExchangeSyncEnabled = null;

        public readonly bool? IsDefaultCountryCodeCheckEnabled = null;

        public readonly string DefaultCountryCode = null;

        public readonly bool? UseCrmFormForContact = null;

        public readonly int? HelpLanguageId = null;

        public readonly bool? GetStartedPaneContentEnabled = null;

        public readonly int? LongDateFormatCode = null;

        public readonly bool? SplitViewState = null;

        public readonly string DateSeparator = null;

        public readonly int? DefaultCalendarView = null;

        public readonly string EmailPassword = null;

        public readonly bool? IsAppsForCrmAlertDismissed = null;

        public readonly Guid? SystemUserId = null;

        public readonly bool? IsEmailConversationViewEnabled = null;

        public readonly int? OutlookSyncInterval = null;

        public readonly int? TimeZoneDaylightDay = null;

        public readonly int? CalendarType = null;

        public readonly int? TimeZoneStandardMonth = null;

        public readonly string UserProfile = null;

        public readonly string DateFormatString = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly int? TimeZoneStandardSecond = null;

        public readonly string PersonalizationSettings = null;

        public readonly int? TimeZoneDaylightMinute = null;

        public readonly string PMDesignator = null;

        public readonly bool? SyncContactCompany = null;

        public readonly string TimeSeparator = null;

        public readonly int? PricingDecimalPrecision = null;

        public readonly bool? AllowEmailCredentials = null;

        public readonly string CurrencySymbol = null;

        public readonly int? TimeZoneStandardDay = null;

        public readonly int? PagingLimit = null;

        public readonly bool? IsSendAsAllowed = null;

        public readonly Guid? DefaultDashboardId = null;

        public readonly int? NegativeFormatCode = null;

        public readonly bool? ShowWeekNumber = null;

        public readonly Guid? SelectedGlobalFilterId = null;

        public readonly int? TimeZoneDaylightSecond = null;

        public readonly OptionSetValue DataValidationModeForExportToExcel = null;

        public readonly bool? IsGuidedHelpEnabled = null;

        public readonly int? TimeZoneDaylightMonth = null;

        public readonly int? TimeZoneCode = null;

        public readonly string NumberSeparator = null;

        public readonly int? TimeZoneStandardMinute = null;

        public readonly string NumberGroupFormat = null;

        public readonly int? TimeZoneDaylightYear = null;

        public readonly OptionSetValue EntityFormMode = null;

        public readonly int? AutoCreateContactOnPromote = null;

        public readonly int? TimeFormatCode = null;

        public readonly int? TimeZoneDaylightBias = null;

        public readonly int? TimeZoneStandardYear = null;

        public readonly string HomepageArea = null;

        public readonly string DecimalSymbol = null;

        public readonly OptionSetValue VisualizationPaneLayout = null;

        public readonly int? DateFormatCode = null;

        public readonly bool? IsDuplicateDetectionEnabledWhenGoingOnline = null;

        public readonly string EmailUsername = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly int? AdvancedFindStartupMode = null;

        public readonly bool? IgnoreUnsolicitedEmail = null;

        public readonly int? TimeZoneDaylightDayOfWeek = null;

        public readonly string AMDesignator = null;

        public readonly string HomepageLayout = null;

        public readonly int? AutoCaptureUserStatus = null;

        public readonly int? CurrencyFormatCode = null;

        public readonly int? TimeZoneStandardBias = null;

        public readonly int? FullNameConventionCode = null;

        public readonly int? LocaleId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? TrackingTokenId = null;

        public readonly bool? IsAutoDataCaptureEnabled = null;

        public readonly int? TimeZoneStandardDayOfWeek = null;

        public readonly int? NextTrackingNumber = null;

        public readonly int? CurrencyDecimalPrecision = null;

        public readonly int? ResourceBookingExchangeSyncVersion = null;

        public readonly int? TimeZoneBias = null;

        public readonly int? AddressBookSyncInterval = null;

        public readonly OptionSetValue IncomingEmailFilteringMethod = null;

        public readonly bool? UseCrmFormForEmail = null;

        public readonly int? TimeZoneStandardHour = null;

        public readonly bool? UseCrmFormForAppointment = null;

        public readonly int? OfflineSyncInterval = null;

        public readonly bool? UseImageStrips = null;

        public readonly int? TimeZoneDaylightHour = null;

        public readonly bool? UseCrmFormForTask = null;

        public readonly OptionSetValue DefaultSearchExperience = null;

        public readonly int? NegativeCurrencyFormatCode = null;

        public readonly EntityReference TransactionCurrencyId = null;

        public readonly string TimeFormatString = null;

        public readonly Guid? BusinessUnitId = null;

        public readonly string WorkdayStopTime = null;

        public readonly string HomepageSubarea = null;

        public readonly OptionSetValue ReportScriptErrors = null;

        public new static class Options
        {
            public enum DataValidationModeForExportToExcel
            {
                Full = 0,
                None = 1
            }
            public enum EntityFormMode
            {
                OrganizationDefault = 0,
                ReadOptimized = 1,
                Edit = 2
            }
            public enum VisualizationPaneLayout
            {
                TopBottom = 0,
                SideBySide = 1
            }
            public enum IncomingEmailFilteringMethod
            {
                AllEmailMessages = 0,
                EmailMessagesInResponseToDynamics365Email = 1,
                EmailMessagesFromDynamics365LeadsContactsAndAccounts = 2,
                EmailMessagesFromDynamics365RecordsThatAreEmailEnabled = 3,
                NoEmailMessages = 4
            }
            public enum DefaultSearchExperience
            {
                UseLastSearch = 2,
                RelevanceSearch = 0,
                CategorizedSearch = 1,
                CustomSearch = 3
            }
            public enum ReportScriptErrors
            {
                AskMeForPermissionToSendAnErrorReportToMicrosoft = 1,
                AutomaticallySendAnErrorReportToMicrosoftWithoutAskingMeForPermission = 2,
                NeverSendAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("virtualentitymetadata")]
    public class VirtualEntityMetadata : OrganizationEntity
    {
        public const string EntityLogicalName = "virtualentitymetadata";
        public VirtualEntityMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("virtualentitymetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["virtualentitymetadataid"] = value;
            }
        }

        public readonly bool? IsOnExternalCreatedEnabled = null;

        public readonly Guid? SupportingSolutionId = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsOnExternalDeletedEnabled = null;

        public readonly Guid? ComponentIdUnique = null;

        public readonly bool? IsCustomizable = null;

        public readonly Guid? VirtualEntityMetadataId = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsManaged = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly EntityReference ExtensionOfRecordId = null;

        public readonly EntityReference OrganizationId = null;

        public readonly bool? IsOnExternalUpdatedEnabled = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("webresource")]
    public class WebResource : Entity
    {
        public const string EntityLogicalName = "webresource";
        public WebResource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("webresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["webresourceid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly int? LanguageCode = null;

        public readonly string Description = null;

        public readonly string ContentJson = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly bool? IsHidden = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly bool? IsCustomizable = null;

        public readonly OptionSetValue WebResourceType = null;

        public readonly bool? CanBeDeleted = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly string DependencyXml = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string DisplayName = null;

        public readonly bool? IsManaged = null;

        public readonly string SilverlightVersion = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly DateTime? CreatedOn = null;

        public readonly string Content = null;

        public readonly EntityReference OrganizationId = null;

        public readonly Guid? WebResourceId = null;

        public readonly bool? IsAvailableForMobileOffline = null;

        public readonly Guid? WebResourceIdUnique = null;

        public readonly bool? IsEnabledForMobileClient = null;

        public new static class Options
        {
            public enum WebResourceType
            {
                WebpageHTML = 1,
                StyleSheetCSS = 2,
                ScriptJScript = 3,
                DataXML = 4,
                PNGFormat = 5,
                JPGFormat = 6,
                GIFFormat = 7,
                SilverlightXAP = 8,
                StyleSheetXSL = 9,
                ICOFormat = 10,
                VectorFormatSVG = 11,
                StringRESX = 12
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("webwizard")]
    public class WebWizard : Entity
    {
        public const string EntityLogicalName = "webwizard";
        public WebWizard() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("webwizardid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["webwizardid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string IntroducedVersion = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly string TitleResourceString = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly int? StartPageSequenceNumber = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? WizardPageHeight = null;

        public readonly bool? IsManaged = null;

        public readonly bool? IsStaticPageSequence = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly Guid? SolutionId = null;

        public readonly string AccessPrivileges = null;

        public readonly Guid? WebWizardIdUnique = null;

        public readonly int? WizardPageWidth = null;

        public readonly Guid? WebWizardId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("wizardaccessprivilege")]
    public class WizardAccessPrivilege : Entity
    {
        public const string EntityLogicalName = "wizardaccessprivilege";
        public WizardAccessPrivilege() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("wizardaccessprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["wizardaccessprivilegeid"] = value;
            }
        }

        public readonly string PrivilegeName = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly int? VersionNumber = null;

        public readonly Guid? WizardAccessPrivilegeId = null;

        public readonly EntityReference ModifiedBy = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string EntityName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference WebWizardId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("wizardpage")]
    public class WizardPage : Entity
    {
        public const string EntityLogicalName = "wizardpage";
        public WizardPage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("wizardpageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["wizardpageid"] = value;
            }
        }

        public readonly int? PageSequenceNumber = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string PageUrl = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string PageDataToPost = null;

        public readonly EntityReference WebWizardId = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference OrganizationId = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly Guid? WizardPageId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflow")]
    public class Workflow : Entity
    {
        public const string EntityLogicalName = "workflow";
        public Workflow() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowid"] = value;
            }
        }

        public readonly int? VersionNumber = null;

        public readonly DateTime? CreatedOn = null;

        public readonly bool? TriggerOnCreate = null;

        public readonly bool? AsyncAutoDelete = null;

        public readonly Guid? FormId = null;

        public readonly Guid? SolutionId = null;

        public readonly bool? SyncWorkflowLogOnFailure = null;

        public readonly Guid? ProcessTriggerFormId = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string UniqueName = null;

        public readonly string PrimaryEntity = null;

        public readonly Guid? WorkflowIdUnique = null;

        public readonly EntityReference PluginTypeId = null;

        public readonly string IntroducedVersion = null;

        public readonly EntityReference ActiveWorkflowId = null;

        public readonly Guid? SupportingSolutionId = null;

        public readonly bool? IsManaged = null;

        public readonly bool? TriggerOnDelete = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly bool? IsCustomizable = null;

        public readonly EntityReference OwningTeam = null;

        public readonly OptionSetValue ProcessTriggerScope = null;

        public readonly string UIData = null;

        public readonly OptionSetValue StateCode = null;

        public readonly EntityReference SdkMessageId = null;

        public readonly OptionSetValue DeleteStage = null;

        public readonly OptionSetValue RunAs = null;

        public readonly Guid? WorkflowId = null;

        public readonly OptionSetValue Mode = null;

        public readonly bool? Subprocess = null;

        public readonly string TriggerOnUpdateAttributeList = null;

        public readonly OptionSetValue UpdateStage = null;

        public readonly int? ProcessOrder = null;

        public readonly string RendererObjectTypeCode = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string ClientData = null;

        public readonly string Description = null;

        public readonly int? Rank = null;

        public readonly string InputParameters = null;

        public readonly bool? OnDemand = null;

        public readonly EntityReference ParentWorkflowId = null;

        public readonly int? LanguageCode = null;

        public readonly OptionSetValue Type = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly string ProcessRoleAssignment = null;

        public readonly EntityReference OwningUser = null;

        public readonly DateTime? OverwriteTime = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly OptionSetValue Scope = null;
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string Name = null;

        public readonly OptionSetValue StatusCode = null;

        public readonly byte[] EntityImage = null;

        public readonly OptionSetValue BusinessProcessType = null;

        public readonly OptionSetValue ComponentState = null;

        public readonly bool? IsCustomProcessingStepAllowedForOtherPublishers = null;

        public readonly OptionSetValue Category = null;

        public readonly string Xaml = null;

        public readonly OptionSetValue UIFlowType = null;

        public readonly bool? IsTransacted = null;

        public readonly OptionSetValue CreateStage = null;

        public readonly bool? IsCrmUIWorkflow = null;

        public new static class Options
        {
            public enum PrimaryEntity
            {

            }
            public enum ProcessTriggerScope
            {
                Form = 1,
                Entity = 2
            }
            public enum StateCode
            {
                Draft = 0,
                Activated = 1
            }
            public enum DeleteStage
            {
                PreOperation = 20,
                PostOperation = 40
            }
            public enum RunAs
            {
                Owner = 0,
                CallingUser = 1
            }
            public enum Mode
            {
                Background = 0,
                RealTime = 1
            }
            public enum UpdateStage
            {
                PreOperation = 20,
                PostOperation = 40
            }
            public enum Type
            {
                Definition = 1,
                Activation = 2,
                Template = 3
            }
            public enum Scope
            {
                User = 1,
                BusinessUnit = 2,
                ParentChildBusinessUnits = 3,
                Organization = 4
            }
            public enum StatusCode
            {
                Draft = 1,
                Activated = 2
            }
            public enum BusinessProcessType
            {
                BusinessFlow = 0,
                TaskFlow = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum Category
            {
                Workflow = 0,
                Dialog = 1,
                BusinessRule = 2,
                Action = 3,
                BusinessProcessFlow = 4,
                ModernFlow = 5,
                DesktopFlow = 6
            }
            public enum UIFlowType
            {
                WindowsRecorderV1 = 0,
                SeleniumIDE = 1,
                PowerAutomateDesktop = 2,
                Recording = 101
            }
            public enum CreateStage
            {
                PreOperation = 20,
                PostOperation = 40
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflowbinary")]
    public class workflowbinary : UserOrTeamEntity
    {
        public const string EntityLogicalName = "workflowbinary";
        public workflowbinary() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowbinaryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowbinaryid"] = value;
            }
        }
        [System.ComponentModel.DataAnnotations.KeyAttribute]
        public readonly string name = null;

        public readonly EntityReference Process = null;

        public readonly string ReferenceName = null;

        public readonly Guid? workflowbinaryId = null;

        public readonly string Metadata = null;

        public readonly string MimeType = null;

        public readonly EntityReference FlowSessionId = null;

        public readonly string Type = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflowdependency")]
    public class WorkflowDependency : Entity
    {
        public const string EntityLogicalName = "workflowdependency";
        public WorkflowDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowdependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowdependencyid"] = value;
            }
        }

        public readonly Guid? OwningUser = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly string DependentAttributeName = null;

        public readonly Guid? WorkflowDependencyId = null;

        public readonly string CustomEntityName = null;

        public readonly string RelatedAttributeName = null;

        public readonly int? VersionNumber = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly EntityReference SdkMessageId = null;

        public readonly string DependentEntityName = null;

        public readonly string EntityAttributes = null;

        public readonly string RelatedEntityName = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly string ParameterName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly EntityReference WorkflowId = null;

        public readonly OptionSetValue Type = null;

        public readonly string ParameterType = null;

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly EntityReference OwnerId = null;

        public readonly Guid? OwningBusinessUnit = null;

        public new static class Options
        {
            public enum Type
            {
                SdkAssociation = 1,
                LocalParameter = 2,
                PrimaryEntity = 3,
                PrimaryEntityBeforeSDKOperation = 4,
                PrimaryEntityAfterSDKOperation = 5,
                RelatedEntity = 6,
                CustomEntityDefinitionThatWorkflowDependsOn = 7,
                AttributeDefinitionThatWorkflowDependsOn = 8,
                ArgumentEntityThatWorkflowDependsOn = 9
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflowlog")]
    public class WorkflowLog : Entity
    {
        public const string EntityLogicalName = "workflowlog";
        public WorkflowLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowlogid"] = value;
            }
        }

        public readonly EntityReference ModifiedOnBehalfBy = null;

        public readonly string Description = null;

        public readonly EntityReference OwningUser = null;

        public readonly string StepName = null;

        public readonly EntityReference CreatedOnBehalfBy = null;

        public readonly EntityReference RegardingObjectId = null;

        public readonly int? RepetitionCount = null;

        public readonly int? ErrorCode = null;

        public readonly EntityReference AsyncOperationId = null;

        public readonly string InteractionActivityResult = null;

        public readonly int? IterationCount = null;

        public readonly Guid? WorkflowLogId = null;

        public readonly int? Duration = null;

        public readonly EntityReference OwningBusinessUnit = null;

        public readonly EntityReference OwningTeam = null;

        public readonly EntityReference ModifiedBy = null;

        public readonly EntityReference CreatedBy = null;

        public readonly string Message = null;

        public readonly string RepetitionId = null;

        public readonly string ActivityName = null;

        public readonly DateTime? StartedOn = null;

        public readonly string ErrorText = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly OptionSetValue Status = null;

        public readonly EntityReference ChildWorkflowInstanceId = null;

        public readonly string StageName = null;

        public readonly DateTime? CreatedOn = null;

        public readonly DateTime? CompletedOn = null;

        public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum Status
            {
                InProgress = 1,
                Succeeded = 2,
                Failed = 3,
                Canceled = 4,
                Waiting = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflowwaitsubscription")]
    public class WorkflowWaitSubscription : Entity
    {
        public const string EntityLogicalName = "workflowwaitsubscription";
        public WorkflowWaitSubscription() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowwaitsubscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowwaitsubscriptionid"] = value;
            }
        }

        public readonly bool? IsDeleted = null;

        public readonly bool? IsModified = null;

        public readonly string WaitOnAttributeList = null;

        public readonly Guid? EntityId = null;

        public readonly Guid? WorkflowWaitSubscriptionId = null;

        public readonly string Data = null;

        public readonly string EntityName = null;

        public readonly EntityReference AsyncOperationId = null;

        public readonly Guid? OwningBusinessUnit = null;

        public readonly Guid? OwningUser = null;

        public readonly DateTime? ModifiedOn = null;

        public readonly EntityReference OwnerId = null;


    }

}